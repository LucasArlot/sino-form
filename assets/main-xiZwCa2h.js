import { r as la, a as da } from './react-vendor-BRnhmgIC.js';
import {
  r,
  C as ua,
  a as ca,
  S as pa,
  X as Ke,
  I as Ne,
  M as qe,
  b as se,
  c as Ve,
  T as ha,
  P as ma,
  d as fa,
  W as Ze,
  B as $e,
  H as Ye,
  e as ga,
  f as ba,
  g as va,
  h as Ee,
  i as we,
  j as Aa,
  k as Oe,
} from './ui-icons-CW1QtAxz.js';
import { Q as Qe } from './quote-form-context-C9R7Vhs_.js';
import { i as Le, I as ge, a as Pa, b as Sa, D as De } from './lead-context-B3V8kn2n.js';
(function () {
  const a = document.createElement('link').relList;
  if (a && a.supports && a.supports('modulepreload')) return;
  for (const n of document.querySelectorAll('link[rel="modulepreload"]')) b(n);
  new MutationObserver((n) => {
    for (const p of n)
      if (p.type === 'childList')
        for (const A of p.addedNodes) A.tagName === 'LINK' && A.rel === 'modulepreload' && b(A);
  }).observe(document, { childList: !0, subtree: !0 });
  function z(n) {
    const p = {};
    return (
      n.integrity && (p.integrity = n.integrity),
      n.referrerPolicy && (p.referrerPolicy = n.referrerPolicy),
      n.crossOrigin === 'use-credentials'
        ? (p.credentials = 'include')
        : n.crossOrigin === 'anonymous'
          ? (p.credentials = 'omit')
          : (p.credentials = 'same-origin'),
      p
    );
  }
  function b(n) {
    if (n.ep) return;
    n.ep = !0;
    const p = z(n);
    fetch(n.href, p);
  }
})();
var Ge = { exports: {} },
  Me = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var We;
function ya() {
  if (We) return Me;
  We = 1;
  var g = la(),
    a = Symbol.for('react.element'),
    z = Symbol.for('react.fragment'),
    b = Object.prototype.hasOwnProperty,
    n = g.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    p = { key: !0, ref: !0, __self: !0, __source: !0 };
  function A(y, M, H) {
    var N,
      l = {},
      t = null,
      u = null;
    (H !== void 0 && (t = '' + H),
      M.key !== void 0 && (t = '' + M.key),
      M.ref !== void 0 && (u = M.ref));
    for (N in M) b.call(M, N) && !p.hasOwnProperty(N) && (l[N] = M[N]);
    if (y && y.defaultProps) for (N in ((M = y.defaultProps), M)) l[N] === void 0 && (l[N] = M[N]);
    return { $$typeof: a, type: y, key: t, ref: u, props: l, _owner: n.current };
  }
  return ((Me.Fragment = z), (Me.jsx = A), (Me.jsxs = A), Me);
}
var _e;
function xa() {
  return (_e || ((_e = 1), (Ge.exports = ya())), Ge.exports);
}
var e = xa(),
  Be = {},
  Je;
function za() {
  if (Je) return Be;
  Je = 1;
  var g = da();
  return ((Be.createRoot = g.createRoot), (Be.hydrateRoot = g.hydrateRoot), Be);
}
var $a = za();
const Ca = ({ currentStep: g, totalSteps: a, translations: z, compact: b = !1 }) => {
    const n = Math.round((g / a) * 100),
      p = (y) => {
        if (!y) return `${g}/${a}`;
        const M = y.replace('{current}', String(g)).replace('{total}', String(a));
        return M.includes('{current}') || M.includes('{total}') ? `${g}/${a}` : M;
      },
      A = [
        { icon: '🌍', label: z.timelineDestination },
        { icon: '🚢', label: z.timelineMode },
        { icon: '🇨🇳', label: z.timelineOrigin },
        { icon: '📦', label: z.timelineCargo },
        { icon: '📝', label: z.timelineGoodsDetails },
        { icon: '📱', label: z.timelineContact },
      ];
    return e.jsxs('div', {
      className: `timeline-container ${b ? 'timeline-compact' : ''}`,
      children: [
        e.jsx('div', {
          className: 'timeline-progress',
          children: A.map((y, M) =>
            e.jsxs(
              r.Fragment,
              {
                children: [
                  e.jsxs('div', {
                    className: `timeline-item ${g > M + 1 ? 'completed' : g === M + 1 ? 'active' : ''}`,
                    children: [
                      e.jsx('div', {
                        className: 'timeline-icon',
                        children: g > M + 1 ? e.jsx(ua, { size: 18 }) : y.icon,
                      }),
                      e.jsx('span', { className: 'timeline-label', children: y.label }),
                    ],
                  }),
                  M < A.length - 1 &&
                    e.jsx('div', {
                      className: 'timeline-connector',
                      children: e.jsx('div', {
                        className: 'timeline-connector-fill',
                        style: { width: g > M + 1 ? '100%' : g === M + 1 ? '50%' : '0%' },
                      }),
                    }),
                ],
              },
              M
            )
          ),
        }),
        e.jsxs('div', {
          className: 'timeline-info',
          children: [
            e.jsx('span', { className: 'timeline-step-count', children: p(z.stepCounter) }),
            e.jsxs('span', { className: 'timeline-percentage', children: [n, '%'] }),
          ],
        }),
      ],
    });
  },
  Ia = ({ message: g, isVisible: a }) => {
    const [z, b] = r.useState('');
    return (
      r.useEffect(() => {
        if (a) {
          b('slide-in');
          const n = setTimeout(() => {
            b('slide-out');
          }, 2500);
          return () => clearTimeout(n);
        }
      }, [a, g]),
      g ? e.jsx('div', { className: `toast ${z}`, children: g }) : null
    );
  },
  ye = ({
    value: g,
    onChange: a,
    options: z,
    placeholder: b = 'Select...',
    compact: n = !1,
    unitSelector: p = !1,
    disabled: A = !1,
  }) => {
    const [y, M] = r.useState(!1),
      H = r.useRef(null),
      N = r.useRef(null),
      l = r.useRef(null);
    (r.useEffect(() => {
      const x = (h) => {
        H.current && !H.current.contains(h.target) && M(!1);
      };
      if (y) {
        (document.addEventListener('mousedown', x), document.addEventListener('touchstart', x));
        const h = window.innerWidth <= 768;
        return (
          h && (document.body.style.overflow = 'hidden'),
          () => {
            (document.removeEventListener('mousedown', x),
              document.removeEventListener('touchstart', x),
              h && (document.body.style.overflow = ''));
          }
        );
      }
    }, [y]),
      r.useEffect(() => {
        if (!(y && l.current && N.current)) return;
        const x = l.current,
          h = N.current.closest('.quote-form-container'),
          T = window.innerWidth <= 768,
          m = () => {
            if (T) return;
            const F = N.current.getBoundingClientRect(),
              C = h
                ? h.getBoundingClientRect()
                : { top: 0, left: 0, right: window.innerWidth, bottom: window.innerHeight },
              j = Math.max(0, C.bottom - F.bottom - 10),
              K = Math.max(0, F.top - C.top - 10),
              S = Math.max(0, C.right - F.left),
              B = Math.max(0, F.right - C.left);
            (x.classList.remove('show-above', 'adjust-left', 'adjust-right'),
              j < 200 && K > j && x.classList.add('show-above'));
            const i = 200;
            if (
              (S < i ? x.classList.add('adjust-right') : B < i && x.classList.add('adjust-left'),
              x.style.setProperty('--available-space-bottom', `${j}px`),
              x.style.setProperty('--available-space-top', `${K}px`),
              x.style.setProperty('--dropdown-top', `${F.bottom}px`),
              h)
            ) {
              const k = x.getBoundingClientRect(),
                w = Math.max(0, k.bottom - C.bottom),
                c = w > 0 ? Math.ceil(w + 12) : 0;
              h.style.setProperty('--dropdown-safe-area', `${c}px`);
            }
          };
        m();
        const I = () => m();
        return (
          window.addEventListener('resize', I, { passive: !0 }),
          window.addEventListener('scroll', I, { passive: !0, capture: !0 }),
          () => {
            (window.removeEventListener('resize', I),
              window.removeEventListener('scroll', I, { capture: !0 }),
              h && h.style.setProperty('--dropdown-safe-area', '0px'));
          }
        );
      }, [y]));
    const t = z.find((x) => x.value === g);
    t && t.label;
    const u = (x) => {
        const h = (x || '').trim();
        if (!h) return '';
        const T = h.split(/\s+/)[0],
          m = /[\u{1F1E6}-\u{1F1FF}]/u.test(T),
          I = new RegExp('\\p{Extended_Pictographic}', 'u').test(T);
        return m || I ? T : '';
      },
      P = (x) => {
        const h = (x || '').trim(),
          T = h.split(/\s+/)[0] ?? '';
        return /[\u{1F1E6}-\u{1F1FF}]/u.test(T) ||
          new RegExp('\\p{Extended_Pictographic}', 'u').test(T)
          ? h.slice(T.length).trimStart()
          : h;
      },
      f = t ? u(t.label) : '',
      O = t ? P(t.label) : b,
      _ = (x) => {
        (a(x), M(!1));
      },
      J = ['custom-dropdown', n ? 'compact' : '', p ? 'unit-selector' : '', A ? 'disabled' : '']
        .filter(Boolean)
        .join(' ');
    return e.jsxs('div', {
      ref: H,
      className: J,
      children: [
        e.jsxs('button', {
          ref: N,
          type: 'button',
          className: `custom-dropdown-trigger ${y ? 'open' : ''}`,
          onClick: () => !A && M(!y),
          onTouchEnd: (x) => {
            (x.preventDefault(), A || M(!y));
          },
          disabled: A,
          'aria-haspopup': 'listbox',
          'aria-expanded': y,
          children: [
            e.jsxs('span', {
              className: 'custom-dropdown-text',
              children: [
                e.jsx('span', { className: 'flag', 'aria-hidden': !0, children: f }),
                e.jsx('span', { className: 'label', children: O }),
              ],
            }),
            e.jsx(ca, { size: 16, className: 'custom-dropdown-icon' }),
          ],
        }),
        e.jsx('div', {
          ref: l,
          className: `custom-dropdown-list ${y ? 'show' : ''}`,
          role: 'listbox',
          children: z.map((x) =>
            e.jsx(
              'div',
              {
                className: `custom-dropdown-option ${g === x.value ? 'selected' : ''}`,
                onClick: () => _(x.value),
                onTouchEnd: (h) => {
                  (h.preventDefault(), _(x.value));
                },
                role: 'option',
                'aria-selected': g === x.value,
                children: e.jsx('span', {
                  className: 'custom-dropdown-option-text',
                  children: x.label,
                }),
              },
              x.value
            )
          ),
        }),
      ],
    });
  };
function Pe() {
  const g = r.useContext(Qe);
  if (!g) throw new Error('useQuoteForm must be used inside <QuoteFormProvider>');
  return g;
}
function La(g = 2500) {
  const [a, z] = r.useState(''),
    [b, n] = r.useState(!1),
    p = r.useCallback((A) => {
      (z(A), n(!0));
    }, []);
  return (
    r.useEffect(() => {
      if (!b) return;
      const A = setTimeout(() => n(!1), g);
      return () => clearTimeout(A);
    }, [b, g]),
    { message: b ? a : '', showToast: p }
  );
}
const ze = ({
    isVisible: g,
    stepNumber: a,
    title: z,
    emoji: b,
    children: n,
    hideStepNumber: p = !1,
  }) =>
    g
      ? e.jsxs('div', {
          className: 'form-step',
          children: [
            e.jsx('div', {
              className: 'step-header',
              children: e.jsxs('h2', {
                children: [
                  !p && e.jsxs('span', { className: 'step-number', children: [a, '.'] }),
                  ' ',
                  z,
                  ' ',
                  e.jsx('span', { className: 'step-emoji', children: b }),
                ],
              }),
            }),
            e.jsx('div', { className: 'step-content', children: n }),
          ],
        })
      : null,
  ka = () => {
    const {
        currentStep: g,
        formData: a,
        setFormData: z,
        fieldValid: b,
        setFieldValid: n,
        userLang: p,
        countrySearch: A,
        setCountrySearch: y,
        setDebouncedCountrySearch: M,
        isCountryListVisible: H,
        setIsCountryListVisible: N,
        highlightedCountryIndex: l,
        setHighlightedCountryIndex: t,
        destPortSearch: u,
        setDestPortSearch: P,
        isDestPortListVisible: f,
        setIsDestPortListVisible: O,
        handleCountrySelect: _,
        handleCountrySearchKeyDown: J,
        clearCountrySelection: x,
        handleDestLocationTypeSelect: h,
        handleDestPortSelect: T,
        handleInputChange: m,
        getDestinationLocationTypes: I,
        getFilteredDestinationPorts: F,
        filteredCountries: C,
        sanitizedCountrySearch: j,
        getText: K,
        getLocationTypeName: S,
        getLocationTypeDescription: B,
        getTranslatedPortNameLocal: i,
        getTranslatedPortType: k,
        getTranslatedCountryName: w,
        step1SubStep: c,
        setStep1SubStep: D,
      } = Pe(),
      R = r.useRef(null),
      V = r.useRef(null),
      ee = r.useRef(null),
      ne = r.useRef(null),
      oe = r.useRef(null);
    (r.useEffect(() => {
      const v = setTimeout(() => {
        M(A);
      }, 200);
      return () => clearTimeout(v);
    }, [A, M]),
      r.useEffect(() => {
        t(H ? (v) => (v >= 0 && v < C.length ? v : 0) : -1);
      }, [H, j, C.length, t]),
      r.useEffect(() => {
        if (!H || l < 0 || l >= C.length) return;
        const v = document.getElementById(`country-option-${C[l].code}`);
        v && v.scrollIntoView && v.scrollIntoView({ block: 'nearest' });
      }, [l, H, C]),
      r.useEffect(() => {
        var ae;
        const v = R.current;
        if (!v) return;
        const E = v.closest('.quote-form-container'),
          W = (ae = ee.current) == null ? void 0 : ae.closest('.search-input-wrapper'),
          L = () => {
            if (!E || !W) return;
            if (!H) {
              (E.style.setProperty('--dropdown-safe-area', '0px'),
                v.classList.remove('show-above', 'adjust-left', 'adjust-right'));
              return;
            }
            const X = W.getBoundingClientRect(),
              te = E.getBoundingClientRect(),
              le = Math.max(0, te.bottom - X.bottom - 20),
              de = Math.max(0, X.top - te.top - 20),
              ce = Math.max(0, te.right - X.left),
              be = Math.max(0, X.right - te.left),
              Se = Math.min(300, v.scrollHeight || 300),
              pe = le < Se && de > le;
            (v.classList.toggle('show-above', pe),
              v.classList.toggle('adjust-right', ce < 200),
              v.classList.toggle('adjust-left', be < 200),
              v.style.setProperty('--dropdown-top', `${X.bottom}px`),
              v.style.setProperty('--available-space-bottom', `${le}px`),
              v.style.setProperty('--available-space-top', `${de}px`));
            const ve = v.getBoundingClientRect(),
              Ce = Math.max(0, ve.bottom - te.bottom),
              Ue = Ce > 0 ? Math.ceil(Ce + 12) : 0;
            E.style.setProperty('--dropdown-safe-area', `${Ue}px`);
          },
          G = requestAnimationFrame(L),
          Q = () => L(),
          Z = () => L();
        return (
          window.addEventListener('resize', Q, { passive: !0 }),
          window.addEventListener('scroll', Z, { passive: !0, capture: !0 }),
          () => {
            (cancelAnimationFrame(G),
              window.removeEventListener('resize', Q),
              window.removeEventListener('scroll', Z, !0),
              E && E.style.setProperty('--dropdown-safe-area', '0px'),
              v.classList.remove('show-above', 'adjust-left', 'adjust-right'));
          }
        );
      }, [H, A]),
      r.useEffect(() => {
        const v = (E) => {
          var W, L, G;
          (!((W = R.current) != null && W.contains(E.target)) &&
            !((L = ee.current) != null && L.contains(E.target)) &&
            N(!1),
            ((G = V.current) != null && G.contains(E.target)) || O(!1));
        };
        return (
          document.addEventListener('mousedown', v),
          () => document.removeEventListener('mousedown', v)
        );
      }, [N, O]),
      r.useEffect(() => {
        const v = V.current;
        if (!v) return;
        const E = v.closest('.quote-form-container'),
          W = v.previousElementSibling,
          L = () => {
            if (!E || !W) return;
            if (!f) {
              (E.style.setProperty('--dropdown-safe-area', '0px'),
                v.classList.remove('show-above', 'adjust-left', 'adjust-right'));
              return;
            }
            const ae = W.getBoundingClientRect(),
              X = E.getBoundingClientRect(),
              te = Math.max(0, X.bottom - ae.bottom - 20),
              le = Math.max(0, ae.top - X.top - 20),
              de = Math.max(0, X.right - ae.left),
              ce = Math.max(0, ae.right - X.left),
              be = Math.min(300, v.scrollHeight || 300),
              Se = te < be && le > te;
            (v.classList.toggle('show-above', Se),
              v.classList.toggle('adjust-right', de < 200),
              v.classList.toggle('adjust-left', ce < 200),
              v.style.setProperty('--dropdown-top', `${ae.bottom}px`),
              v.style.setProperty('--available-space-bottom', `${te}px`),
              v.style.setProperty('--available-space-top', `${le}px`));
            const pe = v.getBoundingClientRect(),
              ve = Math.max(0, pe.bottom - X.bottom),
              Ce = ve > 0 ? Math.ceil(ve + 12) : 0;
            E.style.setProperty('--dropdown-safe-area', `${Ce}px`);
          },
          G = requestAnimationFrame(L),
          Q = () => L(),
          Z = () => L();
        return (
          window.addEventListener('resize', Q, { passive: !0 }),
          window.addEventListener('scroll', Z, { passive: !0, capture: !0 }),
          () => {
            (cancelAnimationFrame(G),
              window.removeEventListener('resize', Q),
              window.removeEventListener('scroll', Z, !0),
              E && E.style.setProperty('--dropdown-safe-area', '0px'),
              v.classList.remove('show-above', 'adjust-left', 'adjust-right'));
          }
        );
      }, [f, u, a.country]),
      r.useEffect(() => {
        var E, W;
        if (g !== 1) return;
        const v = { behavior: 'smooth', block: 'start' };
        (c === 2 && ((E = ne.current) == null || E.scrollIntoView(v)),
          c === 3 && ((W = oe.current) == null || W.scrollIntoView(v)));
      }, [c, g]));
    const q = (v) => K(v);
    return e.jsxs(ze, {
      isVisible: g === 1,
      stepNumber: 1,
      title: q('step1Title') || 'Destination',
      emoji: '🌍',
      children: [
        e.jsx('div', {
          style: {
            display: 'flex',
            justifyContent: 'flex-start',
            alignItems: 'center',
            gap: '0.5rem',
            margin: '0.25rem 0 1rem',
          },
          children: (() => {
            const v = [
                K('tabCountry', 'Pays'),
                K('tabLocation', 'Lieu'),
                K('tabDetails', 'Détails'),
              ],
              E = !!a.country,
              W = !!a.destLocationType,
              L = a.destLocationType === 'port' ? !!a.destPort : !!(a.destCity && a.destZipCode),
              G = (Z) => (Z === 1 ? !0 : Z === 2 ? E : Z === 3 ? E && W : !1),
              Q = (Z) => {
                G(Z) ? D(Z) : E ? W || D(2) : D(1);
              };
            return e.jsx('div', {
              role: 'tablist',
              'aria-label': 'Sous-étapes',
              style: {
                display: 'grid',
                gridTemplateColumns: 'repeat(3, minmax(0, 1fr))',
                alignItems: 'center',
                gap: '4px',
                background: 'rgba(243, 244, 246, 0.8)',
                borderRadius: '9999px',
                padding: '4px',
                border: '1px solid rgba(229, 231, 235, 0.7)',
                width: '100%',
                maxWidth: '640px',
              },
              children: v.map((Z, ae) => {
                const X = ae + 1,
                  te = c === X,
                  le = (X === 1 && E) || (X === 2 && W) || (X === 3 && L);
                return e.jsxs(
                  'button',
                  {
                    type: 'button',
                    role: 'tab',
                    'aria-selected': te,
                    onClick: () => Q(X),
                    style: {
                      width: '100%',
                      minWidth: 0,
                      padding: '6px 8px',
                      fontSize: '0.85rem',
                      borderRadius: '9999px',
                      background: te ? '#ffffff' : 'transparent',
                      color: te ? '#111827' : '#6b7280',
                      boxShadow: te ? '0 1px 3px rgba(0,0,0,0.08)' : 'none',
                      border: te ? '1px solid rgba(0,0,0,0.05)' : '1px solid transparent',
                      display: 'inline-flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '0.4rem',
                      transition: 'all 0.2s ease',
                      cursor: G(X) ? 'pointer' : 'not-allowed',
                      opacity: G(X) ? 1 : 0.5,
                    },
                    children: [
                      e.jsx('span', {
                        style: {
                          width: '16px',
                          height: '16px',
                          borderRadius: '50%',
                          background: le ? 'linear-gradient(135deg, #10b981, #059669)' : '#e5e7eb',
                          display: 'inline-flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          color: '#fff',
                          fontSize: '0.7rem',
                        },
                        children: le ? '✓' : X,
                      }),
                      e.jsx('span', {
                        style: {
                          whiteSpace: 'nowrap',
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                        },
                        children: Z,
                      }),
                    ],
                  },
                  X
                );
              }),
            });
          })(),
        }),
        e.jsxs('div', {
          className: 'step-1-container',
          children: [
            c === 1 &&
              e.jsxs('div', {
                className: 'country-selection-phase',
                style: { marginTop: '2rem', borderTop: '1px solid #e5e7eb', paddingTop: '1.25rem' },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: `step-indicator ${a.country ? 'completed' : ''}`,
                            children: '1',
                          }),
                          q('selectDestinationCountry') || 'Select destination country',
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children:
                          q('searchCountryDescription') ||
                          'Start typing to find your destination country',
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'form-control country-select',
                    style: { marginTop: '0.5rem' },
                    children: [
                      e.jsxs('div', {
                        className: 'search-input-wrapper relative',
                        children: [
                          e.jsx(pa, { className: 'search-icon', size: 18 }),
                          e.jsx('input', {
                            ref: ee,
                            type: 'text',
                            placeholder: q('searchCountry') || 'Search country...',
                            value: A,
                            onChange: (v) => {
                              (y(v.target.value), N(!0));
                            },
                            onFocus: () => N(!0),
                            onKeyDown: J,
                            role: 'combobox',
                            'aria-expanded': H,
                            'aria-controls': 'country-listbox',
                            'aria-activedescendant':
                              l >= 0 && C[l] ? `country-option-${C[l].code}` : void 0,
                            className: 'input glassmorphism search-input',
                          }),
                          a.country &&
                            e.jsx(Ke, {
                              size: 18,
                              className: 'clear-search-icon clear-button',
                              onClick: x,
                              'aria-label': q('clearCountry') || 'Clear country',
                            }),
                        ],
                      }),
                      e.jsx('div', {
                        ref: R,
                        id: 'country-listbox',
                        role: 'listbox',
                        'aria-expanded': H,
                        className: `country-list ${H ? 'show' : ''}`,
                        children:
                          C.length > 0
                            ? (() => {
                                const E =
                                    {
                                      fr: ['FR', 'BE', 'CH', 'CA', 'LU', 'MC'],
                                      en: ['US', 'GB', 'CA', 'AU', 'NZ', 'IE'],
                                      de: ['DE', 'AT', 'CH', 'LI'],
                                      es: ['ES', 'MX', 'AR', 'CO', 'PE', 'CL'],
                                      it: ['IT', 'SM', 'VA', 'CH'],
                                      nl: ['NL', 'BE'],
                                      pt: ['PT', 'BR', 'AO', 'MZ'],
                                      zh: ['CN', 'TW', 'HK', 'MO', 'SG'],
                                      ar: ['SA', 'AE', 'EG', 'JO', 'LB', 'MA'],
                                      tr: ['TR', 'CY'],
                                      ru: ['RU', 'BY', 'KZ', 'KG', 'UA'],
                                    }[p] || [],
                                  W = C.filter((G) => E.includes(G.code)),
                                  L = C.filter((G) => !E.includes(G.code));
                                return e.jsxs(e.Fragment, {
                                  children: [
                                    !j &&
                                      W.length > 0 &&
                                      e.jsxs(e.Fragment, {
                                        children: [
                                          e.jsxs('div', {
                                            className: 'country-section-header section-header',
                                            style: {
                                              padding: '0.5rem 0.75rem',
                                              backgroundColor: '#f8fafc',
                                              borderBottom: '1px solid #e5e7eb',
                                              fontSize: '0.8rem',
                                              fontWeight: 600,
                                              color: '#6b7280',
                                              textTransform: 'uppercase',
                                              letterSpacing: '0.05em',
                                              display: 'flex',
                                              alignItems: 'center',
                                              gap: '0.5rem',
                                            },
                                            children: [
                                              e.jsx('span', {
                                                style: { color: '#10b981' },
                                                children: '⭐',
                                              }),
                                              q('popular') || 'Popular',
                                            ],
                                          }),
                                          W.map((G, Q) =>
                                            e.jsxs(
                                              'div',
                                              {
                                                id: `country-option-${G.code}`,
                                                role: 'option',
                                                'aria-selected': l === Q,
                                                className: `country-option ${a.country === G.code ? 'selected' : ''} ${l === Q ? 'highlighted' : ''}`,
                                                onClick: () => {
                                                  (_(G.code),
                                                    D(2),
                                                    setTimeout(() => {
                                                      var Z;
                                                      return (Z = ne.current) == null
                                                        ? void 0
                                                        : Z.scrollIntoView({
                                                            behavior: 'smooth',
                                                            block: 'start',
                                                          });
                                                    }, 50));
                                                },
                                                children: [
                                                  e.jsx('span', {
                                                    className: 'country-flag',
                                                    children: G.flag,
                                                  }),
                                                  e.jsx('span', {
                                                    className: 'country-name',
                                                    children: w(G.code, p),
                                                  }),
                                                  e.jsx('span', {
                                                    className: 'country-code',
                                                    children: G.code,
                                                  }),
                                                ],
                                              },
                                              G.code
                                            )
                                          ),
                                          L.length > 0 &&
                                            e.jsx('div', {
                                              className: 'country-section-header section-header',
                                              style: {
                                                padding: '0.5rem 0.75rem',
                                                backgroundColor: '#f1f5f9',
                                                borderBottom: '1px solid #e5e7eb',
                                                fontSize: '0.8rem',
                                                fontWeight: 600,
                                                color: '#475569',
                                                textTransform: 'uppercase',
                                                letterSpacing: '0.05em',
                                                borderRadius: '4px',
                                              },
                                              children: q('otherCountries') || 'Other Countries',
                                            }),
                                        ],
                                      }),
                                    (j ? C : L).map((G, Q) => {
                                      const Z = j ? Q : Q + W.length;
                                      return e.jsxs(
                                        'div',
                                        {
                                          id: `country-option-${G.code}`,
                                          role: 'option',
                                          'aria-selected': l === Z,
                                          className: `country-option ${a.country === G.code ? 'selected' : ''} ${l === Z ? 'highlighted' : ''}`,
                                          onClick: () => {
                                            (_(G.code),
                                              D(2),
                                              setTimeout(() => {
                                                var ae;
                                                return (ae = ne.current) == null
                                                  ? void 0
                                                  : ae.scrollIntoView({
                                                      behavior: 'smooth',
                                                      block: 'start',
                                                    });
                                              }, 50));
                                          },
                                          children: [
                                            e.jsx('span', {
                                              className: 'country-flag',
                                              children: G.flag,
                                            }),
                                            e.jsx('span', {
                                              className: 'country-name',
                                              children: w(G.code, p),
                                            }),
                                            e.jsx('span', {
                                              className: 'country-code',
                                              children: G.code,
                                            }),
                                          ],
                                        },
                                        G.code
                                      );
                                    }),
                                  ],
                                });
                              })()
                            : A.trim() &&
                              e.jsx('div', {
                                className: 'no-results',
                                children: q('noCountryResults') || 'No countries found',
                              }),
                      }),
                    ],
                  }),
                ],
              }),
            c === 2 &&
              e.jsxs('div', {
                className: 'location-type-phase',
                ref: ne,
                style: {
                  marginTop: '2rem',
                  opacity: 1,
                  transform: 'translateY(0)',
                  transition: 'all 0.4s ease',
                  borderTop: '1px solid #e5e7eb',
                  paddingTop: '2rem',
                },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: `step-indicator ${a.destLocationType ? 'completed' : ''}`,
                            children: '2',
                          }),
                          q('addressTypeQuestion') || 'What kind of delivery location?',
                        ],
                      }),
                      e.jsxs('div', {
                        className: 'phase-header-subtitle flex-center flex-gap-sm',
                        children: [
                          e.jsx(Ne, { size: 14, className: 'info-icon' }),
                          e.jsx('span', {
                            children:
                              q('helpChooseLocation') ||
                              'Not sure? Most beginners choose Business/Office',
                          }),
                        ],
                      }),
                    ],
                  }),
                  e.jsx('div', {
                    className: 'location-types grid-2cols',
                    children: I().map((v) =>
                      e.jsxs(
                        'div',
                        {
                          className: `location-type-option ${a.destLocationType === v.id ? 'selected' : ''}`,
                          onClick: () => {
                            (h(v.id), window.innerWidth <= 768 || D(3));
                          },
                          'data-id': v.id,
                          children: [
                            e.jsx(v.icon, { size: 24 }),
                            e.jsx('span', { children: S(v.id, p) }),
                            e.jsx('p', { className: 'location-desc', children: B(v.id, p) }),
                          ],
                        },
                        v.id
                      )
                    ),
                  }),
                ],
              }),
            c === 3 &&
              e.jsxs('div', {
                className: 'address-details-phase',
                ref: oe,
                style: {
                  marginTop: '2rem',
                  opacity: 1,
                  transform: 'translateY(0)',
                  transition: 'all 0.4s ease 0.2s',
                  borderTop: '1px solid #e5e7eb',
                  paddingTop: '2rem',
                },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: `step-indicator ${(a.destLocationType === 'port' ? a.destPort : a.destCity && a.destZipCode) ? 'completed' : ''}`,
                            children: '3',
                          }),
                          a.destLocationType === 'port'
                            ? q('selectDestinationPort') || 'Select destination port'
                            : q('enterDestinationDetails') || 'Enter destination details',
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children:
                          a.destLocationType === 'port'
                            ? q('selectDestinationPortDescription') ||
                              'Choose the specific port or airport for delivery'
                            : q('cityPostalDescription') ||
                              'Enter the city and postal code for delivery',
                      }),
                    ],
                  }),
                  a.destLocationType === 'port'
                    ? e.jsxs('div', {
                        className: 'form-control port-select',
                        children: [
                          e.jsxs('div', {
                            className: 'search-input-wrapper',
                            style: { position: 'relative' },
                            children: [
                              e.jsx(qe, { className: 'search-icon', size: 18 }),
                              e.jsx('input', {
                                type: 'text',
                                placeholder: `${a.country ? `${w(a.country, p)} — ${q('searchDestinationPorts') || 'Search destination ports'}` : ''}`,
                                value: u,
                                onChange: (v) => {
                                  (P(v.target.value), O(!0));
                                },
                                onFocus: () => O(!0),
                                className: 'input glassmorphism search-input',
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.destPort ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                              a.destPort &&
                                e.jsx(Ke, {
                                  size: 18,
                                  className: 'clear-search-icon',
                                  style: {
                                    cursor: 'pointer',
                                    position: 'absolute',
                                    right: '0.75rem',
                                    top: '50%',
                                    transform: 'translateY(-50%)',
                                    color: '#94a3b8',
                                  },
                                  onClick: () => {
                                    (z((v) => ({ ...v, destPort: '' })),
                                      P(''),
                                      n((v) => ({ ...v, destPort: null })));
                                  },
                                  'aria-label': 'Clear selected port',
                                }),
                            ],
                          }),
                          e.jsx('div', {
                            ref: V,
                            className: `port-list ${f ? 'show' : ''}`,
                            children:
                              F().length > 0
                                ? F().map((v) =>
                                    e.jsxs(
                                      'div',
                                      {
                                        className: `port-option ${a.destPort === v.code ? 'selected' : ''}`,
                                        onClick: () => T(v.code),
                                        children: [
                                          e.jsx('span', {
                                            className: 'port-icon',
                                            children: v.flag,
                                          }),
                                          e.jsxs('div', {
                                            className: 'port-info',
                                            children: [
                                              e.jsx('span', {
                                                className: 'port-name',
                                                children: i(v, p),
                                              }),
                                              e.jsx('span', {
                                                className: 'port-region',
                                                children: k(v.type || '', p),
                                              }),
                                              v.volume &&
                                                e.jsxs('span', {
                                                  className: 'port-volume',
                                                  children: [
                                                    q('annualVolume') || 'Annual Volume',
                                                    ' : ',
                                                    v.volume,
                                                  ],
                                                }),
                                            ],
                                          }),
                                          e.jsx('span', {
                                            className: 'port-code',
                                            children: v.code,
                                          }),
                                        ],
                                      },
                                      v.code
                                    )
                                  )
                                : e.jsx('div', {
                                    className: 'no-results',
                                    children: a.country
                                      ? `${q('noPortsFoundFor') || 'No ports found for'} ${w(a.country, p)}`
                                      : q('selectCountryFirst') || 'Please select a country first',
                                  }),
                          }),
                        ],
                      })
                    : e.jsx('div', {
                        className: 'address-form',
                        children: e.jsxs('div', {
                          className: 'address-details',
                          style: {
                            display: 'grid',
                            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                            gap: '1rem',
                          },
                          children: [
                            e.jsxs('div', {
                              className: 'form-control',
                              children: [
                                e.jsx('input', {
                                  type: 'text',
                                  name: 'destCity',
                                  placeholder: q('destinationCity') || 'Destination City',
                                  value: a.destCity,
                                  onChange: m,
                                  className: `input glassmorphism ${b.destCity === !1 ? 'input-error' : ''}`,
                                  style: {
                                    transition: 'all 0.3s ease',
                                    transform: a.destCity ? 'scale(1.02)' : 'scale(1)',
                                  },
                                }),
                                b.destCity === !0 && e.jsx(se, { className: 'check-icon' }),
                              ],
                            }),
                            e.jsxs('div', {
                              className: 'form-control',
                              children: [
                                e.jsx('input', {
                                  type: 'text',
                                  name: 'destZipCode',
                                  placeholder: q('destinationZipCode') || 'Postal Code',
                                  value: a.destZipCode,
                                  onChange: m,
                                  className: `input glassmorphism ${b.destZipCode === !1 ? 'input-error' : ''}`,
                                  style: {
                                    transition: 'all 0.3s ease',
                                    transform: a.destZipCode ? 'scale(1.02)' : 'scale(1)',
                                  },
                                }),
                                b.destZipCode === !0 && e.jsx(se, { className: 'check-icon' }),
                              ],
                            }),
                          ],
                        }),
                      }),
                ],
              }),
          ],
        }),
      ],
    });
  },
  Ma = r.memo(ka),
  Na = () => {
    var J, x, h;
    const [g, a] = r.useState(null),
      {
        currentStep: z,
        formData: b,
        setFormData: n,
        nextStep: p,
        setFieldValid: A,
        userLang: y,
        getText: M,
      } = Pe(),
      H = (T, m) => M(T, m),
      N = r.useMemo(() => ['DE', 'AT', 'CZ', 'HU', 'PL', 'NL', 'BE', 'FR', 'IT', 'LU'], []),
      l = r.useMemo(
        () => ({
          en: {
            Sea: {
              name: 'Sea Freight',
              desc: 'Economical, 30-45 days',
              benefits: 'Best for large, heavy shipments',
            },
            Rail: {
              name: 'Rail Freight',
              desc: 'Cost-effective, 15-25 days',
              benefits: 'Eco-friendly option',
            },
            Air: {
              name: 'Air Freight',
              desc: 'Fast, 7-10 days',
              benefits: 'Ideal for urgent shipments',
            },
            Express: {
              name: 'Express',
              desc: 'Fastest, 3-5 days',
              benefits: 'Door-to-door service',
            },
          },
          fr: {
            Sea: {
              name: 'Fret maritime',
              desc: 'Économique, 30-45 jours',
              benefits: 'Idéal pour les expéditions volumineuses',
            },
            Rail: {
              name: 'Fret ferroviaire',
              desc: 'Rentable, 15-25 jours',
              benefits: 'Option écologique',
            },
            Air: {
              name: 'Fret aérien',
              desc: 'Rapide, 7-10 jours',
              benefits: 'Parfait pour les envois urgents',
            },
            Express: {
              name: 'Express',
              desc: 'Le plus rapide, 3-5 jours',
              benefits: 'Service porte-à-porte',
            },
          },
          de: {
            Sea: {
              name: 'Seefracht',
              desc: 'Wirtschaftlich, 30-45 Tage',
              benefits: 'Ideal für große, schwere Sendungen',
            },
            Rail: {
              name: 'Schienengüterverkehr',
              desc: 'Kosteneffektiv, 15-25 Tage',
              benefits: 'Umweltfreundliche Option',
            },
            Air: {
              name: 'Luftfracht',
              desc: 'Schnell, 7-10 Tage',
              benefits: 'Ideal für eilige Sendungen',
            },
            Express: {
              name: 'Express',
              desc: 'Am schnellsten, 3-5 Tage',
              benefits: 'Tür-zu-Tür-Service',
            },
          },
          es: {
            Sea: {
              name: 'Transporte marítimo',
              desc: 'Económico, 30-45 días',
              benefits: 'Mejor para cargas grandes y pesadas',
            },
            Rail: {
              name: 'Transporte ferroviario',
              desc: 'Rentable, 15-25 días',
              benefits: 'Opción ecológica',
            },
            Air: {
              name: 'Transporte aéreo',
              desc: 'Rápido, 7-10 días',
              benefits: 'Ideal para envíos urgentes',
            },
            Express: {
              name: 'Express',
              desc: 'El más rápido, 3-5 días',
              benefits: 'Servicio puerta a puerta',
            },
          },
          it: {
            Sea: {
              name: 'Trasporto marittimo',
              desc: 'Economico, 30-45 giorni',
              benefits: 'Ideale per spedizioni grandi e pesanti',
            },
            Rail: {
              name: 'Trasporto ferroviario',
              desc: 'Conveniente, 15-25 giorni',
              benefits: 'Opzione ecologica',
            },
            Air: {
              name: 'Trasporto aereo',
              desc: 'Veloce, 7-10 giorni',
              benefits: 'Ideale per spedizioni urgenti',
            },
            Express: {
              name: 'Express',
              desc: 'Il più veloce, 3-5 giorni',
              benefits: 'Servizio porta a porta',
            },
          },
          nl: {
            Sea: {
              name: 'Zeevracht',
              desc: 'Economisch, 30-45 dagen',
              benefits: 'Beste voor grote, zware zendingen',
            },
            Rail: {
              name: 'Goederentreinvervoer',
              desc: 'Kosteneffectief, 15-25 dagen',
              benefits: 'Milieuvriendelijke optie',
            },
            Air: {
              name: 'Luchtvracht',
              desc: 'Snel, 7-10 dagen',
              benefits: 'Ideaal voor spoedzendingen',
            },
            Express: {
              name: 'Express',
              desc: 'Snelst, 3-5 dagen',
              benefits: 'Deur-tot-deur service',
            },
          },
          zh: {
            Sea: { name: '海运', desc: '经济实惠，30-45天', benefits: '适合大型重货' },
            Rail: { name: '铁路运输', desc: '成本效益高，15-25天', benefits: '环保选项' },
            Air: { name: '空运', desc: '快速，7-10天', benefits: '适合紧急货物' },
            Express: { name: '快递', desc: '最快，3-5天', benefits: '门到门服务' },
          },
          ar: {
            Sea: {
              name: 'الشحن البحري',
              desc: 'اقتصادي، 30-45 يوماً',
              benefits: 'الأفضل للشحنات الكبيرة والثقيلة',
            },
            Rail: {
              name: 'الشحن بالقطار',
              desc: 'فعّال من حيث التكلفة، 15-25 يوماً',
              benefits: 'خيار صديق للبيئة',
            },
            Air: {
              name: 'الشحن الجوي',
              desc: 'سريع، 7-10 أيام',
              benefits: 'مثالي للشحنات العاجلة',
            },
            Express: {
              name: 'الشحن السريع',
              desc: 'الأسرع، 3-5 أيام',
              benefits: 'خدمة من الباب إلى الباب',
            },
          },
          pt: {
            Sea: {
              name: 'Transporte marítimo',
              desc: 'Econômico, 30-45 dias',
              benefits: 'Melhor para cargas grandes e pesadas',
            },
            Rail: {
              name: 'Transporte ferroviário',
              desc: 'Custo-efetivo, 15-25 dias',
              benefits: 'Opção ecológica',
            },
            Air: {
              name: 'Transporte aéreo',
              desc: 'Rápido, 7-10 dias',
              benefits: 'Ideal para envios urgentes',
            },
            Express: {
              name: 'Express',
              desc: 'O mais rápido, 3-5 dias',
              benefits: 'Serviço porta a porta',
            },
          },
          tr: {
            Sea: {
              name: 'Denizyolu taşımacılığı',
              desc: 'Ekonomik, 30-45 gün',
              benefits: 'Büyük, ağır yükler için en iyisi',
            },
            Rail: {
              name: 'Demiryolu taşımacılığı',
              desc: 'Maliyet etkin, 15-25 gün',
              benefits: 'Çevre dostu seçenek',
            },
            Air: {
              name: 'Havayolu taşımacılığı',
              desc: 'Hızlı, 7-10 gün',
              benefits: 'Acil gönderiler için ideal',
            },
            Express: {
              name: 'Ekspres',
              desc: 'En hızlı, 3-5 gün',
              benefits: 'Kapıdan kapıya hizmet',
            },
          },
          ru: {
            Sea: {
              name: 'Морские перевозки',
              desc: 'Экономично, 30-45 дней',
              benefits: 'Лучший выбор для крупных тяжёлых грузов',
            },
            Rail: {
              name: 'Железнодорожные перевозки',
              desc: 'Выгодно, 15-25 дней',
              benefits: 'Экологичный вариант',
            },
            Air: {
              name: 'Авиаперевозки',
              desc: 'Быстро, 7-10 дней',
              benefits: 'Идеально для срочных отправок',
            },
            Express: {
              name: 'Экспресс',
              desc: 'Самый быстрый, 3-5 дней',
              benefits: 'Доставка от двери до двери',
            },
          },
        }),
        []
      ),
      t = r.useCallback(
        (T) => {
          var m;
          return ((m = l[y]) == null ? void 0 : m[T]) || l.en[T];
        },
        [y, l]
      ),
      u = r.useMemo(
        () => [
          { id: 'Sea', ...t('Sea'), icon: Ve, condition: !0 },
          { id: 'Rail', ...t('Rail'), icon: ha, condition: N.includes(b.country) },
          { id: 'Air', ...t('Air'), icon: ma, condition: !0 },
          { id: 'Express', ...t('Express'), icon: fa, condition: !0 },
        ],
        [b.country, t, N]
      ),
      P = (T) => {
        (n((I) => ({ ...I, mode: T })),
          A((I) => ({ ...I, mode: !0 })),
          window.innerWidth <= 768 || p());
      },
      f = {
        en: {
          choose: 'Choose your preferred shipping method',
          desc: 'Different shipping modes offer various trade-offs between cost, speed, and reliability.',
          rail: 'Rail freight is available for your destination.',
        },
        fr: {
          choose: "Choisissez votre méthode d'expédition préférée",
          desc: "Les différents modes d'expédition offrent divers compromis entre coût, rapidité et fiabilité.",
          rail: 'Le fret ferroviaire est disponible pour votre destination.',
        },
        de: {
          choose: 'Wählen Sie Ihre bevorzugte Versandmethode',
          desc: 'Verschiedene Versandarten bieten unterschiedliche Kompromisse zwischen Kosten, Geschwindigkeit und Zuverlässigkeit.',
          rail: 'Schienengüterverkehr ist für Ihr Ziel verfügbar.',
        },
        es: {
          choose: 'Elija su método de envío preferido',
          desc: 'Los distintos modos de envío ofrecen diferentes compensaciones entre costo, rapidez y fiabilidad.',
          rail: 'El transporte ferroviario está disponible para su destino.',
        },
        it: {
          choose: 'Scegli il tuo metodo di spedizione preferito',
          desc: 'I diversi metodi di spedizione offrono vari compromessi tra costo, velocità e affidabilità.',
          rail: 'Il trasporto ferroviario è disponibile per la tua destinazione.',
        },
        nl: {
          choose: 'Kies uw voorkeur verzendmethode',
          desc: 'Verschillende verzendmethoden bieden verschillende afwegingen tussen kosten, snelheid en betrouwbaarheid.',
          rail: 'Goederentreinvervoer is beschikbaar voor uw bestemming.',
        },
        zh: {
          choose: '选择您偏好的运输方式',
          desc: '不同的运输方式在成本、速度和可靠性之间提供不同的权衡。',
          rail: '您的目的地可使用铁路运输。',
        },
        ar: {
          choose: 'اختر طريقة الشحن المفضلة لديك',
          desc: 'توفر طرق الشحن المختلفة موازنةً مختلفة بين التكلفة والسرعة والموثوقية.',
          rail: 'الشحن بالقطار متاح لوجهتك.',
        },
        pt: {
          choose: 'Escolha seu método de envio preferido',
          desc: 'Diferentes modos de envio oferecem diferentes compensações entre custo, velocidade e confiabilidade.',
          rail: 'O transporte ferroviário está disponível para o seu destino.',
        },
        tr: {
          choose: 'Tercih ettiğiniz gönderim yöntemini seçin',
          desc: 'Farklı gönderim yöntemleri maliyet, hız ve güvenilirlik arasında çeşitli dengeler sunar.',
          rail: 'Varış noktanız için demir yolu taşımacılığı mevcuttur.',
        },
        ru: {
          choose: 'Выберите предпочитаемый способ доставки',
          desc: 'Различные способы доставки предлагают разные компромиссы между стоимостью, скоростью и надежностью.',
          rail: 'Железнодорожные перевозки доступны для вашего направления.',
        },
      },
      O = () => {
        const T = window.innerWidth <= 768;
        if (!(T ? b.mode : g || b.mode)) return null;
        const I = T ? b.mode : g || b.mode,
          F = {
            Sea: {
              background: 'rgba(28, 100, 242, 0.15)',
              border: 'rgba(28, 100, 242, 0.3)',
              icon: '#1c64f2',
              text: '#1e40af',
            },
            Rail: {
              background: 'rgba(34, 197, 94, 0.15)',
              border: 'rgba(34, 197, 94, 0.3)',
              icon: '#22c55e',
              text: '#15803d',
            },
            Air: {
              background: 'rgba(79, 70, 229, 0.15)',
              border: 'rgba(79, 70, 229, 0.3)',
              icon: '#4f46e5',
              text: '#3730a3',
            },
            Express: {
              background: 'rgba(236, 72, 153, 0.15)',
              border: 'rgba(236, 72, 153, 0.3)',
              icon: '#ec4899',
              text: '#be185d',
            },
            Unsure: {
              background: 'rgba(107, 114, 128, 0.15)',
              border: 'rgba(107, 114, 128, 0.3)',
              icon: '#6b7280',
              text: '#374151',
            },
          },
          C = F[I] || F.Sea;
        return e.jsx('div', {
          className: 'selection-feedback',
          style: {
            margin: window.innerWidth <= 768 ? '1.5rem 0' : '0.5rem 0',
            padding: window.innerWidth <= 768 ? '1rem' : '0.75rem',
            background: C.background,
            borderRadius: '12px',
            border: `2px solid ${C.border}`,
            width: '100%',
            transition: 'all 0.3s ease',
            opacity: g && !T ? 0.9 : 1,
          },
          children: e.jsxs('div', {
            style: { display: 'flex', alignItems: 'center', gap: '0.5rem' },
            children: [
              e.jsx(se, { size: 20, style: { color: C.icon, flexShrink: 0 } }),
              e.jsxs('span', {
                style: {
                  fontSize: '0.9rem',
                  color: C.text,
                  fontWeight: 600,
                  lineHeight: '1.4',
                  flex: 1,
                },
                children: [
                  I === 'Sea' && H('seaFeedback', ''),
                  I === 'Rail' && H('railFeedback', ''),
                  I === 'Air' && H('airFeedback', ''),
                  I === 'Express' && H('expressFeedback', ''),
                  I === 'Unsure' && H('unsureShippingFeedback', ''),
                ],
              }),
            ],
          }),
        });
      },
      _ = () =>
        e.jsx('div', {
          className: 'beginner-option-section-bottom',
          children: e.jsxs('div', {
            className: `mode-option ${b.mode === 'Unsure' ? 'selected' : ''}`,
            onClick: () => P('Unsure'),
            'data-mode': 'Unsure',
            style: {
              transition: 'all 0.3s ease',
              background:
                b.mode === 'Unsure'
                  ? 'linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(255, 255, 255, 0.95))'
                  : 'linear-gradient(135deg, rgba(59, 130, 246, 0.08), rgba(255, 255, 255, 0.9))',
              borderColor: b.mode === 'Unsure' ? '#3b82f6' : 'rgba(59, 130, 246, 0.2)',
              opacity: b.mode === 'Unsure' ? 1 : 0.85,
            },
            onMouseEnter: () => a('Unsure'),
            onMouseLeave: () => a(null),
            children: [
              e.jsxs('svg', {
                width: '24',
                height: '24',
                viewBox: '0 0 24 24',
                fill: 'none',
                xmlns: 'http://www.w3.org/2000/svg',
                children: [
                  e.jsx('path', {
                    d: 'M9.09 9C9.3251 8.33167 9.78915 7.76811 10.4 7.40913C11.0108 7.05016 11.7289 6.91894 12.4272 7.03871C13.1255 7.15849 13.7588 7.52152 14.2151 8.06353C14.6713 8.60553 14.9211 9.29152 14.92 10C14.92 12 11.92 13 11.92 13M12 17H12.01',
                    stroke: 'currentColor',
                    strokeWidth: '2',
                    strokeLinecap: 'round',
                    strokeLinejoin: 'round',
                  }),
                  e.jsx('circle', {
                    cx: '12',
                    cy: '12',
                    r: '10',
                    stroke: 'currentColor',
                    strokeWidth: '2',
                  }),
                ],
              }),
              e.jsx('span', {
                className: 'mode-name',
                children: H('unsureShipping', "I'm not sure yet"),
              }),
              e.jsx('p', {
                className: 'mode-desc',
                children: H('unsureShippingDesc', 'Let the experts help'),
              }),
              e.jsx('div', {
                className: 'mode-additional-info',
                style: {
                  fontSize: '0.75rem',
                  color: '#3b82f6',
                  marginTop: '0.5rem',
                  fontWeight: '500',
                },
                children: H('unsureShippingBenefits', 'Professional guidance'),
              }),
            ],
          }),
        });
    return e.jsx(ze, {
      isVisible: z === 2,
      stepNumber: 2,
      title: H('step2Title', 'Shipping Mode'),
      emoji: '🚢',
      children: e.jsx('div', {
        className: 'step-2-container',
        children: e.jsx('div', {
          className: 'mode-layout',
          children: e.jsxs('div', {
            className: 'mode-main',
            children: [
              e.jsx('div', {
                className: 'shipping-options-guidance-phase',
                children: e.jsxs('div', {
                  className: 'phase-header',
                  children: [
                    e.jsx('h3', {
                      className: 'phase-header-title',
                      children:
                        ((J = f[y]) == null ? void 0 : J.choose) ||
                        'Choose your preferred shipping method',
                    }),
                    e.jsxs('p', {
                      className: 'phase-header-subtitle',
                      children: [
                        ((x = f[y]) == null ? void 0 : x.desc) ||
                          'Different modes offer various trade-offs between cost, speed, and reliability.',
                        N.includes(b.country) &&
                          e.jsxs('span', {
                            className: 'success-text',
                            children: [
                              ' ',
                              ((h = f[y]) == null ? void 0 : h.rail) ||
                                'Rail freight is available for your destination.',
                            ],
                          }),
                      ],
                    }),
                  ],
                }),
              }),
              e.jsx('div', {
                className: `shipping-modes ${N.includes(b.country) ? 'four-options' : 'three-options'}`,
                children: u
                  .filter((T) => T.id !== 'Rail' || T.condition)
                  .map((T) =>
                    e.jsxs(
                      'div',
                      {
                        className: `mode-option ${b.mode === T.id ? 'selected' : ''}`,
                        'data-mode': T.id,
                        onClick: () => P(T.id),
                        onMouseEnter: () => {
                          window.innerWidth <= 768 || a(T.id);
                        },
                        onMouseLeave: () => {
                          window.innerWidth <= 768 || a(null);
                        },
                        children: [
                          e.jsx(T.icon, { size: 28 }),
                          e.jsx('span', { className: 'mode-name', children: T.name }),
                          e.jsx('p', { className: 'mode-desc', children: T.desc }),
                          T.benefits &&
                            e.jsx('div', {
                              className: 'mode-additional-info',
                              children: T.benefits,
                            }),
                        ],
                      },
                      T.id
                    )
                  ),
              }),
              e.jsxs('div', {
                className: 'mobile-only',
                children: [
                  e.jsx(O, {}),
                  e.jsx('div', {
                    className: 'options-separator-bottom',
                    children: e.jsxs('div', {
                      style: {
                        display: 'flex',
                        alignItems: 'center',
                        margin: '1.5rem 0 1rem 0',
                        gap: '1rem',
                      },
                      children: [
                        e.jsx('div', {
                          style: {
                            flex: 1,
                            height: '1px',
                            background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)',
                          },
                        }),
                        e.jsx('span', {
                          style: {
                            fontSize: '0.8rem',
                            color: '#9ca3af',
                            fontWeight: '400',
                            backgroundColor: 'rgba(255, 255, 255, 0.7)',
                            padding: '0.4rem 0.8rem',
                            borderRadius: '16px',
                            border: '1px solid #e5e7eb',
                          },
                          children: H('unsureAboutChoice', 'Unsure about your choice?'),
                        }),
                        e.jsx('div', {
                          style: {
                            flex: 1,
                            height: '1px',
                            background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)',
                          },
                        }),
                      ],
                    }),
                  }),
                  e.jsx(_, {}),
                ],
              }),
              e.jsxs('div', {
                className: 'mode-second-row desktop-only',
                children: [
                  e.jsx('div', { className: 'second-row-item' }),
                  e.jsxs('div', {
                    className: 'second-row-item',
                    children: [
                      e.jsx(_, {}),
                      e.jsx('div', {
                        className: 'more-additional-info',
                        style: { marginTop: '8px' },
                        children: e.jsx(O, {}),
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
        }),
      }),
    });
  },
  Ha = r.memo(Na),
  Ta = () => {
    const {
        currentStep: g,
        formData: a,
        setFormData: z,
        setFieldValid: b,
        getText: n,
        userLang: p,
        getLocationTypeName: A,
        getLocationTypeDescription: y,
        getTranslatedPortNameLocal: M,
        getTranslatedCountryName: H,
        originPortSearch: N,
        setOriginPortSearch: l,
        isOriginPortListVisible: t,
        setIsOriginPortListVisible: u,
        getFilteredOriginPorts: P,
        handleOriginLocationTypeSelect: f,
        handleOriginPortSelect: O,
        step3SubStep: _,
        setStep3SubStep: J,
      } = Pe(),
      x = r.useRef(null),
      h = r.useRef(null),
      T = r.useRef(null),
      m = r.useRef(null),
      I = (i, k) => n(i, k);
    (r.useEffect(() => {
      const i = (k) => {
        var c, D;
        const w = k.target;
        !((c = x.current) != null && c.contains(w)) &&
          !((D = h.current) != null && D.contains(w)) &&
          u(!1);
      };
      return (
        document.addEventListener('mousedown', i),
        () => document.removeEventListener('mousedown', i)
      );
    }, [u]),
      r.useEffect(() => {
        const i = x.current;
        if (!i) return;
        const k = i.closest('.quote-form-container'),
          w = i.previousElementSibling,
          c = () => {
            if (!k || !w) return;
            if (!t) {
              (k.style.setProperty('--dropdown-safe-area', '0px'),
                i.classList.remove('show-above', 'adjust-left', 'adjust-right'));
              return;
            }
            const ee = w.getBoundingClientRect(),
              ne = k.getBoundingClientRect(),
              oe = document.querySelector('.form-footer'),
              q = oe ? oe.getBoundingClientRect().height : 0,
              v = window.innerHeight - q,
              E = Math.min(ne.bottom, v),
              W = Math.max(0, E - ee.bottom - 4),
              L = Math.max(0, ee.top - ne.top - 12),
              G = Math.max(0, ne.right - ee.left),
              Q = Math.max(0, ee.right - ne.left),
              Z = Math.min(300, i.scrollHeight || 300),
              ae = W < Z && L > W;
            (i.classList.toggle('show-above', ae),
              i.classList.toggle('adjust-right', G < 200),
              i.classList.toggle('adjust-left', Q < 200),
              i.style.setProperty('--dropdown-top', `${ee.bottom}px`),
              i.style.setProperty('--available-space-bottom', `${W}px`),
              i.style.setProperty('--available-space-top', `${L}px`),
              k.style.setProperty('--dropdown-safe-area', '0px'));
          },
          D = requestAnimationFrame(c),
          R = () => c(),
          V = () => c();
        return (
          window.addEventListener('resize', R, { passive: !0 }),
          window.addEventListener('scroll', V, { passive: !0, capture: !0 }),
          () => {
            (cancelAnimationFrame(D),
              window.removeEventListener('resize', R),
              window.removeEventListener('scroll', V, !0),
              k && k.style.setProperty('--dropdown-safe-area', '0px'),
              i.classList.remove('show-above', 'adjust-left', 'adjust-right'));
          }
        );
      }, [t, N, a.locationType]));
    const F = r.useMemo(() => P(), [P]),
      C = r.useCallback(
        (i) => {
          (f(i),
            J(2),
            setTimeout(() => {
              var k;
              return (k = m.current) == null
                ? void 0
                : k.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 50));
        },
        [f, J]
      ),
      j = r.useCallback(
        (i) => {
          O(i);
        },
        [O]
      ),
      K = r.useMemo(
        () => [
          { id: 'factory', icon: Ze },
          { id: 'port', icon: Ve },
          { id: 'business', icon: $e },
          { id: 'residential', icon: Ye },
        ],
        []
      ),
      S = a.locationType;
    r.useEffect(() => {
      var k, w;
      if (g !== 3) return;
      const i = { behavior: 'smooth', block: 'start' };
      (_ === 1 && ((k = T.current) == null || k.scrollIntoView(i)),
        _ === 2 && ((w = m.current) == null || w.scrollIntoView(i)));
    }, [_, g]);
    const B = r.useMemo(
      () => (S ? (S === 'port' ? !!a.origin : !!(a.city && a.zipCode)) : !1),
      [S, a.origin, a.city, a.zipCode]
    );
    return e.jsxs(ze, {
      isVisible: g === 3,
      stepNumber: 3,
      title: `${I('step3Title', 'Select pickup location in China')}`,
      emoji: '🇨🇳',
      children: [
        e.jsx('div', {
          style: {
            display: 'grid',
            gridTemplateColumns: 'repeat(2, minmax(0, 1fr))',
            alignItems: 'center',
            gap: '4px',
            background: 'rgba(243, 244, 246, 0.8)',
            borderRadius: '9999px',
            padding: '4px',
            border: '1px solid rgba(229, 231, 235, 0.7)',
            width: '100%',
            maxWidth: '480px',
            margin: '0 0 0.75rem 0',
          },
          children: [
            { n: 1, label: I('tabLocation', 'Location'), done: !!S, onClick: () => J(1) },
            {
              n: 2,
              label: I('tabDetails', 'Details'),
              done: !!B,
              onClick: () => S && J(2),
              disabled: !S,
            },
          ].map(({ n: i, label: k, done: w, onClick: c, disabled: D }) => {
            const R = _ === i;
            return e.jsxs(
              'button',
              {
                type: 'button',
                role: 'tab',
                'aria-selected': !!R,
                onClick: () => {
                  D || c();
                },
                style: {
                  width: '100%',
                  minWidth: 0,
                  padding: '6px 8px',
                  fontSize: '0.85rem',
                  borderRadius: '9999px',
                  background: R ? '#ffffff' : 'transparent',
                  color: R ? '#111827' : '#6b7280',
                  boxShadow: R ? '0 1px 3px rgba(0,0,0,0.08)' : 'none',
                  border: R ? '1px solid rgba(0,0,0,0.05)' : '1px solid transparent',
                  display: 'inline-flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '0.4rem',
                  transition: 'all 0.2s ease',
                  cursor: D ? 'not-allowed' : 'pointer',
                  opacity: D ? 0.5 : 1,
                },
                children: [
                  e.jsx('span', {
                    style: {
                      width: '16px',
                      height: '16px',
                      borderRadius: '50%',
                      background: w ? 'linear-gradient(135deg, #10b981, #059669)' : '#e5e7eb',
                      display: 'inline-flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#fff',
                      fontSize: '0.7rem',
                    },
                    children: w ? '✓' : i,
                  }),
                  e.jsx('span', {
                    style: { whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' },
                    children: k,
                  }),
                ],
              },
              i
            );
          }),
        }),
        e.jsxs('div', {
          className: 'step-3-container',
          children: [
            _ === 1 &&
              e.jsxs('div', {
                className: 'location-type-selection-phase',
                ref: T,
                style: { marginTop: '2rem', borderTop: '1px solid #e5e7eb', paddingTop: '2rem' },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: S ? 'step-indicator completed' : 'step-indicator',
                            children: '1',
                          }),
                          I(
                            'selectPickupLocationType',
                            'Sélectionnez votre type de lieu de collecte'
                          ),
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children: I(
                          'pickupLocationDescription',
                          'Choisissez où nous devons collecter vos marchandises en Chine'
                        ),
                      }),
                    ],
                  }),
                  e.jsx('div', {
                    className: 'location-types grid-2cols',
                    children: K.map((i) =>
                      e.jsxs(
                        'div',
                        {
                          role: 'button',
                          tabIndex: 0,
                          'data-id': i.id,
                          className: `location-type-option ${S === i.id ? 'selected' : ''}`,
                          onClick: () => C(i.id),
                          onKeyDown: (k) => k.key === 'Enter' && C(i.id),
                          children: [
                            e.jsx(i.icon, { size: 24 }),
                            e.jsx('span', { children: A(i.id, p) }),
                            e.jsx('p', { className: 'location-desc', children: y(i.id, p) }),
                          ],
                        },
                        i.id
                      )
                    ),
                  }),
                ],
              }),
            _ === 2 &&
              e.jsxs('div', {
                className: 'location-details-phase',
                ref: m,
                style: { marginTop: '2rem' },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: B ? 'step-indicator completed' : 'step-indicator',
                            children: '2',
                          }),
                          S === 'port'
                            ? I('selectOriginPort', 'Sélectionnez le port de collecte')
                            : I('enterPickupDetails', 'Entrez les détails de collecte'),
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children:
                          S === 'port'
                            ? I(
                                'selectDestinationPortDescription',
                                "Choisissez le port ou l'aéroport spécifique pour collecte"
                              )
                            : I(
                                'pickupCityPostalDescription',
                                'Fournissez la ville et le code postal pour une collecte précise'
                              ),
                      }),
                    ],
                  }),
                  S !== 'port'
                    ? e.jsxs('div', {
                        className: 'address-details',
                        style: { display: 'flex', gap: '1rem', flexWrap: 'wrap' },
                        children: [
                          e.jsx('input', {
                            type: 'text',
                            className: 'input glassmorphism',
                            style: { flex: '1 0 200px' },
                            placeholder: I('destinationCity', 'City'),
                            value: a.city,
                            onChange: (i) => {
                              const k = i.target.value;
                              (z((w) => ({ ...w, city: k })),
                                b((w) => ({ ...w, city: k.trim() ? !0 : null })));
                            },
                          }),
                          e.jsx('input', {
                            type: 'text',
                            className: 'input glassmorphism',
                            style: { flex: '1 0 200px' },
                            placeholder: I('destinationZipCode', 'ZIP Code'),
                            value: a.zipCode,
                            onChange: (i) => {
                              const k = i.target.value;
                              (z((w) => ({ ...w, zipCode: k })),
                                b((w) => ({ ...w, zipCode: k.trim() ? !0 : null })));
                            },
                          }),
                        ],
                      })
                    : e.jsxs('div', {
                        className: 'form-control port-select',
                        children: [
                          e.jsxs('div', {
                            className: 'search-input-wrapper',
                            style: { position: 'relative' },
                            children: [
                              e.jsx(qe, { className: 'search-icon', size: 18 }),
                              e.jsx('input', {
                                type: 'text',
                                ref: h,
                                placeholder: `${I('searchDestinationPorts', 'Search ports')}...`,
                                value: N,
                                onChange: (i) => {
                                  (l(i.target.value), u(!0));
                                },
                                onFocus: () => u(!0),
                                className: 'input glassmorphism search-input',
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.origin ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                              a.origin &&
                                e.jsx(Ke, {
                                  size: 18,
                                  className: 'clear-search-icon',
                                  style: {
                                    cursor: 'pointer',
                                    position: 'absolute',
                                    right: '0.75rem',
                                    top: '50%',
                                    transform: 'translateY(-50%)',
                                    color: '#94a3b8',
                                  },
                                  onClick: () => {
                                    (z((i) => ({ ...i, origin: '' })),
                                      l(''),
                                      b((i) => ({ ...i, origin: null })));
                                  },
                                }),
                            ],
                          }),
                          e.jsx('div', {
                            ref: x,
                            className: `port-list ${t ? 'show' : ''}`,
                            children: F.length
                              ? F.map((i) =>
                                  e.jsxs(
                                    'div',
                                    {
                                      className: `port-option ${a.origin === i.code ? 'selected' : ''}`,
                                      onClick: () => j(i.code),
                                      children: [
                                        e.jsx('span', { className: 'port-icon', children: i.flag }),
                                        e.jsxs('div', {
                                          className: 'port-info',
                                          children: [
                                            e.jsx('span', {
                                              className: 'port-name',
                                              children: M(i, p),
                                            }),
                                            e.jsx('span', {
                                              className: 'port-region',
                                              children: H('CN', p),
                                            }),
                                            i.volume &&
                                              e.jsxs('span', {
                                                className: 'port-volume',
                                                children: [
                                                  I('annualVolume', 'Annual Volume'),
                                                  ' : ',
                                                  i.volume,
                                                ],
                                              }),
                                          ],
                                        }),
                                        e.jsx('span', { className: 'port-code', children: i.code }),
                                      ],
                                    },
                                    i.code
                                  )
                                )
                              : e.jsx('div', {
                                  className: 'no-results',
                                  style: { padding: '0.75rem' },
                                  children: I('noPortsFoundFor', 'No ports found'),
                                }),
                          }),
                        ],
                      }),
                ],
              }),
            B &&
              e.jsx('div', {
                className: 'selection-feedback',
                style: {
                  marginTop: '1.5rem',
                  padding: '1rem',
                  background: 'rgba(16,185,129,0.15)',
                  border: '2px solid rgba(16,185,129,0.3)',
                  borderRadius: 12,
                },
                children: e.jsxs('div', {
                  style: { display: 'flex', alignItems: 'center', gap: '0.5rem' },
                  children: [
                    e.jsx(se, { size: 20, style: { color: '#10b981', flexShrink: 0 } }),
                    e.jsx('span', {
                      style: { color: '#047857', fontWeight: 600 },
                      children:
                        S === 'port'
                          ? (() => {
                              const i = F.find((w) => w.code === a.origin),
                                k = i ? M(i, p) : '';
                              return `${I('pickupPortFeedback', "Parfait ! Nous organiserons l'enlèvement depuis")} ${k}`;
                            })()
                          : `${I('pickupCityFeedback', "Parfait ! Nous organiserons l'enlèvement depuis")} ${a.city}, ${H('CN', p)}`,
                    }),
                  ],
                }),
              }),
          ],
        }),
      ],
    });
  },
  xe = [
    { name: 'Afghanistan', code: 'AF', flag: '🇦🇫', phonePrefix: '+93' },
    { name: 'Albania', code: 'AL', flag: '🇦🇱', phonePrefix: '+355' },
    { name: 'Algeria', code: 'DZ', flag: '🇩🇿', phonePrefix: '+213' },
    { name: 'American Samoa', code: 'AS', flag: '🇦🇸', phonePrefix: '+1684' },
    { name: 'Andorra', code: 'AD', flag: '🇦🇩', phonePrefix: '+376' },
    { name: 'Angola', code: 'AO', flag: '🇦🇴', phonePrefix: '+244' },
    { name: 'Anguilla', code: 'AI', flag: '🇦🇮', phonePrefix: '+1264' },
    { name: 'Antarctica', code: 'AQ', flag: '🇦🇶', phonePrefix: '+672' },
    { name: 'Antigua and Barbuda', code: 'AG', flag: '🇦🇬', phonePrefix: '+1268' },
    { name: 'Argentina', code: 'AR', flag: '🇦🇷', phonePrefix: '+54' },
    { name: 'Armenia', code: 'AM', flag: '🇦🇲', phonePrefix: '+374' },
    { name: 'Aruba', code: 'AW', flag: '🇦🇼', phonePrefix: '+297' },
    { name: 'Australia', code: 'AU', flag: '🇦🇺', phonePrefix: '+61' },
    { name: 'Austria', code: 'AT', flag: '🇦🇹', phonePrefix: '+43' },
    { name: 'Azerbaijan', code: 'AZ', flag: '🇦🇿', phonePrefix: '+994' },
    { name: 'Bahamas', code: 'BS', flag: '🇧🇸', phonePrefix: '+1242' },
    { name: 'Bahrain', code: 'BH', flag: '🇧🇭', phonePrefix: '+973' },
    { name: 'Bangladesh', code: 'BD', flag: '🇧🇩', phonePrefix: '+880' },
    { name: 'Barbados', code: 'BB', flag: '🇧🇧', phonePrefix: '+1246' },
    { name: 'Belarus', code: 'BY', flag: '🇧🇾', phonePrefix: '+375' },
    { name: 'Belgium', code: 'BE', flag: '🇧🇪', phonePrefix: '+32' },
    { name: 'Belize', code: 'BZ', flag: '🇧🇿', phonePrefix: '+501' },
    { name: 'Benin', code: 'BJ', flag: '🇧🇯', phonePrefix: '+229' },
    { name: 'Bermuda', code: 'BM', flag: '🇧🇲', phonePrefix: '+1441' },
    { name: 'Bhutan', code: 'BT', flag: '🇧🇹', phonePrefix: '+975' },
    { name: 'Bolivia', code: 'BO', flag: '🇧🇴', phonePrefix: '+591' },
    { name: 'Bosnia and Herzegovina', code: 'BA', flag: '🇧🇦', phonePrefix: '+387' },
    { name: 'Botswana', code: 'BW', flag: '🇧🇼', phonePrefix: '+267' },
    { name: 'Brazil', code: 'BR', flag: '🇧🇷', phonePrefix: '+55' },
    { name: 'British Indian Ocean Territory', code: 'IO', flag: '🇮🇴', phonePrefix: '+246' },
    { name: 'British Virgin Islands', code: 'VG', flag: '🇻🇬', phonePrefix: '+1284' },
    { name: 'Brunei', code: 'BN', flag: '🇧🇳', phonePrefix: '+673' },
    { name: 'Bulgaria', code: 'BG', flag: '🇧🇬', phonePrefix: '+359' },
    { name: 'Burkina Faso', code: 'BF', flag: '🇧🇫', phonePrefix: '+226' },
    { name: 'Burundi', code: 'BI', flag: '🇧🇮', phonePrefix: '+257' },
    { name: 'Cambodia', code: 'KH', flag: '🇰🇭', phonePrefix: '+855' },
    { name: 'Cameroon', code: 'CM', flag: '🇨🇲', phonePrefix: '+237' },
    { name: 'Canada', code: 'CA', flag: '🇨🇦', phonePrefix: '+1' },
    { name: 'Cape Verde', code: 'CV', flag: '🇨🇻', phonePrefix: '+238' },
    { name: 'Cayman Islands', code: 'KY', flag: '🇰🇾', phonePrefix: '+1345' },
    { name: 'Central African Republic', code: 'CF', flag: '🇨🇫', phonePrefix: '+236' },
    { name: 'Chad', code: 'TD', flag: '🇹🇩', phonePrefix: '+235' },
    { name: 'Chile', code: 'CL', flag: '🇨🇱', phonePrefix: '+56' },
    { name: 'China', code: 'CN', flag: '🇨🇳', phonePrefix: '+86' },
    { name: 'Christmas Island', code: 'CX', flag: '🇨🇽', phonePrefix: '+61' },
    { name: 'Cocos Islands', code: 'CC', flag: '🇨🇨', phonePrefix: '+61' },
    { name: 'Colombia', code: 'CO', flag: '🇨🇴', phonePrefix: '+57' },
    { name: 'Comoros', code: 'KM', flag: '🇰🇲', phonePrefix: '+269' },
    { name: 'Cook Islands', code: 'CK', flag: '🇨🇰', phonePrefix: '+682' },
    { name: 'Costa Rica', code: 'CR', flag: '🇨🇷', phonePrefix: '+506' },
    { name: 'Croatia', code: 'HR', flag: '🇭🇷', phonePrefix: '+385' },
    { name: 'Cuba', code: 'CU', flag: '🇨🇺', phonePrefix: '+53' },
    { name: 'Curacao', code: 'CW', flag: '🇨🇼', phonePrefix: '+599' },
    { name: 'Cyprus', code: 'CY', flag: '🇨🇾', phonePrefix: '+357' },
    { name: 'Czech Republic', code: 'CZ', flag: '🇨🇿', phonePrefix: '+420' },
    { name: 'Democratic Republic of the Congo', code: 'CD', flag: '🇨🇩', phonePrefix: '+243' },
    { name: 'Denmark', code: 'DK', flag: '🇩🇰', phonePrefix: '+45' },
    { name: 'Djibouti', code: 'DJ', flag: '🇩🇯', phonePrefix: '+253' },
    { name: 'Dominica', code: 'DM', flag: '🇩🇲', phonePrefix: '+1767' },
    { name: 'Dominican Republic', code: 'DO', flag: '🇩🇴', phonePrefix: '+1' },
    { name: 'East Timor', code: 'TL', flag: '🇹🇱', phonePrefix: '+670' },
    { name: 'Ecuador', code: 'EC', flag: '🇪🇨', phonePrefix: '+593' },
    { name: 'Egypt', code: 'EG', flag: '🇪🇬', phonePrefix: '+20' },
    { name: 'El Salvador', code: 'SV', flag: '🇸🇻', phonePrefix: '+503' },
    { name: 'Equatorial Guinea', code: 'GQ', flag: '🇬🇶', phonePrefix: '+240' },
    { name: 'Eritrea', code: 'ER', flag: '🇪🇷', phonePrefix: '+291' },
    { name: 'Estonia', code: 'EE', flag: '🇪🇪', phonePrefix: '+372' },
    { name: 'Eswatini', code: 'SZ', flag: '🇸🇿', phonePrefix: '+268' },
    { name: 'Ethiopia', code: 'ET', flag: '🇪🇹', phonePrefix: '+251' },
    { name: 'Falkland Islands', code: 'FK', flag: '🇫🇰', phonePrefix: '+500' },
    { name: 'Faroe Islands', code: 'FO', flag: '🇫🇴', phonePrefix: '+298' },
    { name: 'Fiji', code: 'FJ', flag: '🇫🇯', phonePrefix: '+679' },
    { name: 'Finland', code: 'FI', flag: '🇫🇮', phonePrefix: '+358' },
    { name: 'France', code: 'FR', flag: '🇫🇷', phonePrefix: '+33' },
    { name: 'French Polynesia', code: 'PF', flag: '🇵🇫', phonePrefix: '+689' },
    { name: 'Gabon', code: 'GA', flag: '🇬🇦', phonePrefix: '+241' },
    { name: 'Gambia', code: 'GM', flag: '🇬🇲', phonePrefix: '+220' },
    { name: 'Georgia', code: 'GE', flag: '🇬🇪', phonePrefix: '+995' },
    { name: 'Germany', code: 'DE', flag: '🇩🇪', phonePrefix: '+49' },
    { name: 'Ghana', code: 'GH', flag: '🇬🇭', phonePrefix: '+233' },
    { name: 'Gibraltar', code: 'GI', flag: '🇬🇮', phonePrefix: '+350' },
    { name: 'Greece', code: 'GR', flag: '🇬🇷', phonePrefix: '+30' },
    { name: 'Greenland', code: 'GL', flag: '🇬🇱', phonePrefix: '+299' },
    { name: 'Grenada', code: 'GD', flag: '🇬🇩', phonePrefix: '+1473' },
    { name: 'Guam', code: 'GU', flag: '🇬🇺', phonePrefix: '+1671' },
    { name: 'Guatemala', code: 'GT', flag: '🇬🇹', phonePrefix: '+502' },
    { name: 'Guernsey', code: 'GG', flag: '🇬🇬', phonePrefix: '+44' },
    { name: 'Guinea', code: 'GN', flag: '🇬🇳', phonePrefix: '+224' },
    { name: 'Guinea-Bissau', code: 'GW', flag: '🇬🇼', phonePrefix: '+245' },
    { name: 'Guyana', code: 'GY', flag: '🇬🇾', phonePrefix: '+592' },
    { name: 'Haiti', code: 'HT', flag: '🇭🇹', phonePrefix: '+509' },
    { name: 'Honduras', code: 'HN', flag: '🇭🇳', phonePrefix: '+504' },
    { name: 'Hong Kong', code: 'HK', flag: '🇭🇰', phonePrefix: '+852' },
    { name: 'Hungary', code: 'HU', flag: '🇭🇺', phonePrefix: '+36' },
    { name: 'Iceland', code: 'IS', flag: '🇮🇸', phonePrefix: '+354' },
    { name: 'India', code: 'IN', flag: '🇮🇳', phonePrefix: '+91' },
    { name: 'Indonesia', code: 'ID', flag: '🇮🇩', phonePrefix: '+62' },
    { name: 'Iran', code: 'IR', flag: '🇮🇷', phonePrefix: '+98' },
    { name: 'Iraq', code: 'IQ', flag: '🇮🇶', phonePrefix: '+964' },
    { name: 'Ireland', code: 'IE', flag: '🇮🇪', phonePrefix: '+353' },
    { name: 'Isle of Man', code: 'IM', flag: '🇮🇲', phonePrefix: '+44' },
    { name: 'Israel', code: 'IL', flag: '🇮🇱', phonePrefix: '+972' },
    { name: 'Italy', code: 'IT', flag: '🇮🇹', phonePrefix: '+39' },
    { name: 'Ivory Coast', code: 'CI', flag: '🇨🇮', phonePrefix: '+225' },
    { name: 'Jamaica', code: 'JM', flag: '🇯🇲', phonePrefix: '+1876' },
    { name: 'Japan', code: 'JP', flag: '🇯🇵', phonePrefix: '+81' },
    { name: 'Jersey', code: 'JE', flag: '🇯🇪', phonePrefix: '+44' },
    { name: 'Jordan', code: 'JO', flag: '🇯🇴', phonePrefix: '+962' },
    { name: 'Kazakhstan', code: 'KZ', flag: '🇰🇿', phonePrefix: '+7' },
    { name: 'Kenya', code: 'KE', flag: '🇰🇪', phonePrefix: '+254' },
    { name: 'Kiribati', code: 'KI', flag: '🇰🇮', phonePrefix: '+686' },
    { name: 'Kosovo', code: 'XK', flag: '🇽🇰', phonePrefix: '+383' },
    { name: 'Kuwait', code: 'KW', flag: '🇰🇼', phonePrefix: '+965' },
    { name: 'Kyrgyzstan', code: 'KG', flag: '🇰🇬', phonePrefix: '+996' },
    { name: 'Laos', code: 'LA', flag: '🇱🇦', phonePrefix: '+856' },
    { name: 'Latvia', code: 'LV', flag: '🇱🇻', phonePrefix: '+371' },
    { name: 'Lebanon', code: 'LB', flag: '🇱🇧', phonePrefix: '+961' },
    { name: 'Lesotho', code: 'LS', flag: '🇱🇸', phonePrefix: '+266' },
    { name: 'Liberia', code: 'LR', flag: '🇱🇷', phonePrefix: '+231' },
    { name: 'Libya', code: 'LY', flag: '🇱🇾', phonePrefix: '+218' },
    { name: 'Liechtenstein', code: 'LI', flag: '🇱🇮', phonePrefix: '+423' },
    { name: 'Lithuania', code: 'LT', flag: '🇱🇹', phonePrefix: '+370' },
    { name: 'Luxembourg', code: 'LU', flag: '🇱🇺', phonePrefix: '+352' },
    { name: 'Macau', code: 'MO', flag: '🇲🇴', phonePrefix: '+853' },
    { name: 'Madagascar', code: 'MG', flag: '🇲🇬', phonePrefix: '+261' },
    { name: 'Malawi', code: 'MW', flag: '🇲🇼', phonePrefix: '+265' },
    { name: 'Malaysia', code: 'MY', flag: '🇲🇾', phonePrefix: '+60' },
    { name: 'Maldives', code: 'MV', flag: '🇲🇻', phonePrefix: '+960' },
    { name: 'Mali', code: 'ML', flag: '🇲🇱', phonePrefix: '+223' },
    { name: 'Malta', code: 'MT', flag: '🇲🇹', phonePrefix: '+356' },
    { name: 'Marshall Islands', code: 'MH', flag: '🇲🇭', phonePrefix: '+692' },
    { name: 'Mauritania', code: 'MR', flag: '🇲🇷', phonePrefix: '+222' },
    { name: 'Mauritius', code: 'MU', flag: '🇲🇺', phonePrefix: '+230' },
    { name: 'Mayotte', code: 'YT', flag: '🇾🇹', phonePrefix: '+262' },
    { name: 'Mexico', code: 'MX', flag: '🇲🇽', phonePrefix: '+52' },
    { name: 'Micronesia', code: 'FM', flag: '🇫🇲', phonePrefix: '+691' },
    { name: 'Moldova', code: 'MD', flag: '🇲🇩', phonePrefix: '+373' },
    { name: 'Monaco', code: 'MC', flag: '🇲🇨', phonePrefix: '+377' },
    { name: 'Mongolia', code: 'MN', flag: '🇲🇳', phonePrefix: '+976' },
    { name: 'Montenegro', code: 'ME', flag: '🇲🇪', phonePrefix: '+382' },
    { name: 'Montserrat', code: 'MS', flag: '🇲🇸', phonePrefix: '+1664' },
    { name: 'Morocco', code: 'MA', flag: '🇲🇦', phonePrefix: '+212' },
    { name: 'Mozambique', code: 'MZ', flag: '🇲🇿', phonePrefix: '+258' },
    { name: 'Myanmar', code: 'MM', flag: '🇲🇲', phonePrefix: '+95' },
    { name: 'Namibia', code: 'NA', flag: '🇳🇦', phonePrefix: '+264' },
    { name: 'Nauru', code: 'NR', flag: '🇳🇷', phonePrefix: '+674' },
    { name: 'Nepal', code: 'NP', flag: '🇳🇵', phonePrefix: '+977' },
    { name: 'Netherlands', code: 'NL', flag: '🇳🇱', phonePrefix: '+31' },
    { name: 'New Caledonia', code: 'NC', flag: '🇳🇨', phonePrefix: '+687' },
    { name: 'New Zealand', code: 'NZ', flag: '🇳🇿', phonePrefix: '+64' },
    { name: 'Nicaragua', code: 'NI', flag: '🇳🇮', phonePrefix: '+505' },
    { name: 'Niger', code: 'NE', flag: '🇳🇪', phonePrefix: '+227' },
    { name: 'Nigeria', code: 'NG', flag: '🇳🇬', phonePrefix: '+234' },
    { name: 'Niue', code: 'NU', flag: '🇳🇺', phonePrefix: '+683' },
    { name: 'North Korea', code: 'KP', flag: '🇰🇵', phonePrefix: '+850' },
    { name: 'North Macedonia', code: 'MK', flag: '🇲🇰', phonePrefix: '+389' },
    { name: 'Northern Mariana Islands', code: 'MP', flag: '🇲🇵', phonePrefix: '+1670' },
    { name: 'Norway', code: 'NO', flag: '🇳🇴', phonePrefix: '+47' },
    { name: 'Oman', code: 'OM', flag: '🇴🇲', phonePrefix: '+968' },
    { name: 'Pakistan', code: 'PK', flag: '🇵🇰', phonePrefix: '+92' },
    { name: 'Palau', code: 'PW', flag: '🇵🇼', phonePrefix: '+680' },
    { name: 'Palestine', code: 'PS', flag: '🇵🇸', phonePrefix: '+970' },
    { name: 'Panama', code: 'PA', flag: '🇵🇦', phonePrefix: '+507' },
    { name: 'Papua New Guinea', code: 'PG', flag: '🇵🇬', phonePrefix: '+675' },
    { name: 'Paraguay', code: 'PY', flag: '🇵🇾', phonePrefix: '+595' },
    { name: 'Peru', code: 'PE', flag: '🇵🇪', phonePrefix: '+51' },
    { name: 'Philippines', code: 'PH', flag: '🇵🇭', phonePrefix: '+63' },
    { name: 'Pitcairn', code: 'PN', flag: '🇵🇳', phonePrefix: '+64' },
    { name: 'Poland', code: 'PL', flag: '🇵🇱', phonePrefix: '+48' },
    { name: 'Portugal', code: 'PT', flag: '🇵🇹', phonePrefix: '+351' },
    { name: 'Puerto Rico', code: 'PR', flag: '🇵🇷', phonePrefix: '+1' },
    { name: 'Qatar', code: 'QA', flag: '🇶🇦', phonePrefix: '+974' },
    { name: 'Republic of the Congo', code: 'CG', flag: '🇨🇬', phonePrefix: '+242' },
    { name: 'Reunion', code: 'RE', flag: '🇷🇪', phonePrefix: '+262' },
    { name: 'Romania', code: 'RO', flag: '🇷🇴', phonePrefix: '+40' },
    { name: 'Russia', code: 'RU', flag: '🇷🇺', phonePrefix: '+7' },
    { name: 'Rwanda', code: 'RW', flag: '🇷🇼', phonePrefix: '+250' },
    { name: 'Saint Barthelemy', code: 'BL', flag: '🇧🇱', phonePrefix: '+590' },
    { name: 'Saint Helena', code: 'SH', flag: '🇸🇭', phonePrefix: '+290' },
    { name: 'Saint Kitts and Nevis', code: 'KN', flag: '🇰🇳', phonePrefix: '+1869' },
    { name: 'Saint Lucia', code: 'LC', flag: '🇱🇨', phonePrefix: '+1758' },
    { name: 'Saint Martin', code: 'MF', flag: '🇲🇫', phonePrefix: '+590' },
    { name: 'Saint Pierre and Miquelon', code: 'PM', flag: '🇵🇲', phonePrefix: '+508' },
    { name: 'Saint Vincent and the Grenadines', code: 'VC', flag: '🇻🇨', phonePrefix: '+1784' },
    { name: 'Samoa', code: 'WS', flag: '🇼🇸', phonePrefix: '+685' },
    { name: 'San Marino', code: 'SM', flag: '🇸🇲', phonePrefix: '+378' },
    { name: 'Sao Tome and Principe', code: 'ST', flag: '🇸🇹', phonePrefix: '+239' },
    { name: 'Saudi Arabia', code: 'SA', flag: '🇸🇦', phonePrefix: '+966' },
    { name: 'Senegal', code: 'SN', flag: '🇸🇳', phonePrefix: '+221' },
    { name: 'Serbia', code: 'RS', flag: '🇷🇸', phonePrefix: '+381' },
    { name: 'Seychelles', code: 'SC', flag: '🇸🇨', phonePrefix: '+248' },
    { name: 'Sierra Leone', code: 'SL', flag: '🇸🇱', phonePrefix: '+232' },
    { name: 'Singapore', code: 'SG', flag: '🇸🇬', phonePrefix: '+65' },
    { name: 'Sint Maarten', code: 'SX', flag: '🇸🇽', phonePrefix: '+1721' },
    { name: 'Slovakia', code: 'SK', flag: '🇸🇰', phonePrefix: '+421' },
    { name: 'Slovenia', code: 'SI', flag: '🇸🇮', phonePrefix: '+386' },
    { name: 'Solomon Islands', code: 'SB', flag: '🇸🇧', phonePrefix: '+677' },
    { name: 'Somalia', code: 'SO', flag: '🇸🇴', phonePrefix: '+252' },
    { name: 'South Africa', code: 'ZA', flag: '🇿🇦', phonePrefix: '+27' },
    { name: 'South Korea', code: 'KR', flag: '🇰🇷', phonePrefix: '+82' },
    { name: 'South Sudan', code: 'SS', flag: '🇸🇸', phonePrefix: '+211' },
    { name: 'Spain', code: 'ES', flag: '🇪🇸', phonePrefix: '+34' },
    { name: 'Sri Lanka', code: 'LK', flag: '🇱🇰', phonePrefix: '+94' },
    { name: 'Sudan', code: 'SD', flag: '🇸🇩', phonePrefix: '+249' },
    { name: 'Suriname', code: 'SR', flag: '🇸🇷', phonePrefix: '+597' },
    { name: 'Svalbard and Jan Mayen', code: 'SJ', flag: '🇸🇯', phonePrefix: '+47' },
    { name: 'Sweden', code: 'SE', flag: '🇸🇪', phonePrefix: '+46' },
    { name: 'Switzerland', code: 'CH', flag: '🇨🇭', phonePrefix: '+41' },
    { name: 'Syria', code: 'SY', flag: '🇸🇾', phonePrefix: '+963' },
    { name: 'Taiwan', code: 'TW', flag: '🇹🇼', phonePrefix: '+886' },
    { name: 'Tajikistan', code: 'TJ', flag: '🇹🇯', phonePrefix: '+992' },
    { name: 'Tanzania', code: 'TZ', flag: '🇹🇿', phonePrefix: '+255' },
    { name: 'Thailand', code: 'TH', flag: '🇹🇭', phonePrefix: '+66' },
    { name: 'Togo', code: 'TG', flag: '🇹🇬', phonePrefix: '+228' },
    { name: 'Tokelau', code: 'TK', flag: '🇹🇰', phonePrefix: '+690' },
    { name: 'Tonga', code: 'TO', flag: '🇹🇴', phonePrefix: '+676' },
    { name: 'Trinidad and Tobago', code: 'TT', flag: '🇹🇹', phonePrefix: '+1868' },
    { name: 'Tunisia', code: 'TN', flag: '🇹🇳', phonePrefix: '+216' },
    { name: 'Turkey', code: 'TR', flag: '🇹🇷', phonePrefix: '+90' },
    { name: 'Turkmenistan', code: 'TM', flag: '🇹🇲', phonePrefix: '+993' },
    { name: 'Turks and Caicos Islands', code: 'TC', flag: '🇹🇨', phonePrefix: '+1649' },
    { name: 'Tuvalu', code: 'TV', flag: '🇹🇻', phonePrefix: '+688' },
    { name: 'U.S. Virgin Islands', code: 'VI', flag: '🇻🇮', phonePrefix: '+1340' },
    { name: 'Uganda', code: 'UG', flag: '🇺🇬', phonePrefix: '+256' },
    { name: 'Ukraine', code: 'UA', flag: '🇺🇦', phonePrefix: '+380' },
    { name: 'United Arab Emirates', code: 'AE', flag: '🇦🇪', phonePrefix: '+971' },
    { name: 'United Kingdom', code: 'GB', flag: '🇬🇧', phonePrefix: '+44' },
    { name: 'United States', code: 'US', flag: '🇺🇸', phonePrefix: '+1' },
    { name: 'Uruguay', code: 'UY', flag: '🇺🇾', phonePrefix: '+598' },
    { name: 'Uzbekistan', code: 'UZ', flag: '🇺🇿', phonePrefix: '+998' },
    { name: 'Vanuatu', code: 'VU', flag: '🇻🇺', phonePrefix: '+678' },
    { name: 'Vatican', code: 'VA', flag: '🇻🇦', phonePrefix: '+379' },
    { name: 'Venezuela', code: 'VE', flag: '🇻🇪', phonePrefix: '+58' },
    { name: 'Vietnam', code: 'VN', flag: '🇻🇳', phonePrefix: '+84' },
    { name: 'Wallis and Futuna', code: 'WF', flag: '🇼🇫', phonePrefix: '+681' },
    { name: 'Western Sahara', code: 'EH', flag: '🇪🇭', phonePrefix: '+212' },
    { name: 'Yemen', code: 'YE', flag: '🇾🇪', phonePrefix: '+967' },
    { name: 'Zambia', code: 'ZM', flag: '🇿🇲', phonePrefix: '+260' },
    { name: 'Zimbabwe', code: 'ZW', flag: '🇿🇼', phonePrefix: '+263' },
  ].sort((g, a) => g.name.localeCompare(a.name)),
  Ba = () => {
    const {
        currentStep: g,
        formData: a,
        setFormData: z,
        fieldValid: b,
        userLang: n,
        getText: p,
        handleInputChange: A,
        phonePrefixSearch: y,
        setPhonePrefixSearch: M,
        getTranslatedCountryName: H,
        step6SubStep: N,
        setStep6SubStep: l,
      } = Pe(),
      t = (S, B) => p(S, B),
      [u, P] = r.useState(''),
      [f, O] = r.useState(!1),
      [_, J] = r.useState(!1),
      x = r.useRef(null),
      h = r.useRef(null),
      T = r.useRef(null),
      m = [
        { code: 'first-time', icon: '🌟' },
        { code: 'up-to-10x', icon: '📦' },
        { code: 'more-than-10x', icon: '🚀' },
        { code: 'regular', icon: '🏆' },
      ],
      I = (S) => (S ?? '').replace(new RegExp('^\\p{Extended_Pictographic}+\\s*', 'u'), '').trim(),
      F = xe.find((S) => S.phonePrefix === a.phoneCountryCode),
      C = F ? `${F.flag} ${F.phonePrefix}` : y;
    r.useEffect(() => {
      a.customerType !== 'company' && N > 4 && l(4);
    }, [a.customerType, N, l]);
    const j = (S) => {
        var k;
        z({ ...a, shipperType: S });
        let B = '';
        switch (S) {
          case 'first-time':
            B = I(t('firstTimeShipper', 'First international shipment'));
            break;
          case 'up-to-10x':
            B = I(t('upTo10Times', 'Limited experience'));
            break;
          case 'more-than-10x':
            B = I(t('moreThan10Times', 'Experienced shipper'));
            break;
          case 'regular':
            B = I(t('regularShipper', 'Regular shipper'));
            break;
        }
        const i = ((k = m.find((w) => w.code === S)) == null ? void 0 : k.icon) ?? '';
        (P(`${i}  ${B}`), O(!1), a.customerType, l(4));
      },
      K = (S) => {
        (z({ ...a, phoneCountryCode: S }), M(''), J(!1));
      };
    return (
      r.useEffect(() => {
        const S = (B) => {
          (x.current && !x.current.contains(B.target) && O(!1),
            h.current &&
              !h.current.contains(B.target) &&
              T.current &&
              !T.current.contains(B.target) &&
              J(!1));
        };
        return (
          document.addEventListener('mousedown', S),
          () => document.removeEventListener('mousedown', S)
        );
      }, []),
      r.useEffect(() => {
        const S = (B, i) => {
          if (!B || !i) return;
          const k = i.getBoundingClientRect(),
            w = window.innerHeight,
            c = window.innerWidth,
            D = 300,
            R = w - k.bottom - 20,
            V = k.top - 20,
            ee = c - k.left,
            ne = k.right;
          (B.classList.remove('show-above', 'adjust-right', 'adjust-left'),
            R < D && V > R && B.classList.add('show-above'),
            ee < 300 ? B.classList.add('adjust-right') : ne < 300 && B.classList.add('adjust-left'),
            B.style.setProperty('--dropdown-top', `${k.bottom}px`));
        };
        if (f && x.current) {
          const B = x.current.previousElementSibling;
          S(x.current, B);
        }
        _ && h.current && T.current && S(h.current, T.current);
      }, [f, _]),
      e.jsx(ze, {
        isVisible: g === 6,
        stepNumber: 6,
        title: t('step6Title', 'Contact details'),
        emoji: '📱',
        children: e.jsxs('div', {
          className: 'step-6-container',
          style: { width: 'calc(100% - 16px)', padding: '0 8px' },
          children: [
            e.jsx('div', {
              style: {
                display: 'flex',
                justifyContent: 'flex-start',
                alignItems: 'center',
                gap: '0.5rem',
                margin: '0.25rem 0 1rem',
              },
              children: e.jsx('div', {
                style: {
                  display: 'grid',
                  gridTemplateColumns: `repeat(${a.customerType === 'company' ? 5 : 4}, minmax(0, 1fr))`,
                  alignItems: 'center',
                  gap: '4px',
                  background: 'rgba(243, 244, 246, 0.8)',
                  borderRadius: '9999px',
                  padding: '4px',
                  border: '1px solid rgba(229, 231, 235, 0.7)',
                  width: '100%',
                  maxWidth: '640px',
                },
                children: [
                  {
                    n: 1,
                    label: p('tabContactType', 'Type'),
                    done: !!a.customerType,
                    onClick: () => l(1),
                  },
                  {
                    n: 2,
                    label: p('tabIdentity', 'Identity'),
                    done: !!(a.firstName && a.lastName),
                    onClick: () => l(2),
                    disabled: !1,
                  },
                  {
                    n: 3,
                    label: p('tabExperience', 'Experience'),
                    done: !!a.shipperType,
                    onClick: () => l(3),
                    disabled: !1,
                  },
                  ...(a.customerType === 'company'
                    ? [
                        {
                          n: 4,
                          label: p('tabCompany', 'Company'),
                          done: !!a.companyName,
                          onClick: () => l(4),
                          disabled: !1,
                        },
                      ]
                    : []),
                  {
                    n: a.customerType === 'company' ? 5 : 4,
                    label: p('tabContact', 'Contact'),
                    done: !!(a.email && a.phone),
                    onClick: () => l(a.customerType === 'company' ? 5 : 4),
                    disabled: !1,
                  },
                ].map(({ n: S, label: B, onClick: i, done: k, disabled: w }) => {
                  const c = N === S;
                  return e.jsxs(
                    'button',
                    {
                      type: 'button',
                      role: 'tab',
                      'aria-selected': c,
                      onClick: () => !w && i(),
                      disabled: w,
                      style: {
                        width: '100%',
                        minWidth: 0,
                        padding: '6px 8px',
                        fontSize: '0.85rem',
                        borderRadius: '9999px',
                        background: c ? '#ffffff' : 'transparent',
                        color: c ? '#111827' : '#6b7280',
                        boxShadow: c ? '0 1px 3px rgba(0,0,0,0.08)' : 'none',
                        border: c ? '1px solid rgba(0,0,0,0.05)' : '1px solid transparent',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '6px',
                        cursor: w ? 'not-allowed' : 'pointer',
                        transition: 'all 0.2s ease',
                        opacity: w ? 0.5 : 1,
                      },
                      children: [
                        e.jsx('span', {
                          style: {
                            width: 18,
                            height: 18,
                            borderRadius: '9999px',
                            background: k ? 'linear-gradient(135deg, #10b981, #059669)' : '#e5e7eb',
                            color: 'white',
                            fontSize: 12,
                            display: 'inline-flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontWeight: 700,
                          },
                          children: k ? '✓' : S,
                        }),
                        e.jsx('span', {
                          style: {
                            whiteSpace: 'nowrap',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                          },
                          children: B,
                        }),
                      ],
                    },
                    S
                  );
                }),
              }),
            }),
            e.jsx('div', {
              style: {
                height: '1px',
                background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)',
                margin: '0.75rem 0 1rem',
              },
            }),
            N === 1 &&
              e.jsxs('div', {
                className: 'customer-type-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: a.customerType ? '#10b981' : '#6b7280',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: '1',
                          }),
                          t(
                            'customerTypeQuestion',
                            'Are you shipping as an individual or for a company?'
                          ),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t(
                          'customerTypeDescription',
                          'This helps us provide the most relevant information fields'
                        ),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'customer-type-selection',
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                      gap: '1rem',
                      marginBottom: '2rem',
                    },
                    children: [
                      e.jsxs('div', {
                        className: `customer-type-option ${a.customerType === 'individual' ? 'selected' : ''}`,
                        onClick: () => {
                          (z({ ...a, customerType: 'individual' }), l(2));
                        },
                        style: {
                          padding: '1.5rem',
                          border:
                            a.customerType === 'individual'
                              ? '2px solid #10b981'
                              : '2px solid #e5e7eb',
                          borderRadius: '0.75rem',
                          backgroundColor:
                            a.customerType === 'individual'
                              ? 'rgba(16, 185, 129, 0.05)'
                              : 'rgba(255, 255, 255, 0.9)',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'center',
                          textAlign: 'center',
                          gap: '0.75rem',
                          transform: a.customerType === 'individual' ? 'scale(1.02)' : 'scale(1)',
                          boxShadow:
                            a.customerType === 'individual'
                              ? '0 4px 12px rgba(16, 185, 129, 0.15)'
                              : '0 2px 4px rgba(0, 0, 0, 0.1)',
                        },
                        children: [
                          e.jsx('div', { style: { fontSize: '2rem' }, children: '👤' }),
                          e.jsx('h4', {
                            style: { margin: 0, color: '#1f2937', fontWeight: '600' },
                            children: t('individualCustomer', 'Private individual'),
                          }),
                          e.jsx('p', {
                            style: { margin: 0, fontSize: '0.9rem', color: '#6b7280' },
                            children: t(
                              'individualDescription',
                              'For personal shipments and small volumes'
                            ),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: `customer-type-option ${a.customerType === 'company' ? 'selected' : ''}`,
                        onClick: () => {
                          (z({ ...a, customerType: 'company' }), l(2));
                        },
                        style: {
                          padding: '1.5rem',
                          border:
                            a.customerType === 'company'
                              ? '2px solid #10b981'
                              : '2px solid #e5e7eb',
                          borderRadius: '0.75rem',
                          backgroundColor:
                            a.customerType === 'company'
                              ? 'rgba(16, 185, 129, 0.05)'
                              : 'rgba(255, 255, 255, 0.9)',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'center',
                          textAlign: 'center',
                          gap: '0.75rem',
                          transform: a.customerType === 'company' ? 'scale(1.02)' : 'scale(1)',
                          boxShadow:
                            a.customerType === 'company'
                              ? '0 4px 12px rgba(16, 185, 129, 0.15)'
                              : '0 2px 4px rgba(0, 0, 0, 0.1)',
                        },
                        children: [
                          e.jsx('div', { style: { fontSize: '2rem' }, children: '🏢' }),
                          e.jsx('h4', {
                            style: { margin: 0, color: '#1f2937', fontWeight: '600' },
                            children: t('companyCustomer', 'Company'),
                          }),
                          e.jsx('p', {
                            style: { margin: 0, fontSize: '0.9rem', color: '#6b7280' },
                            children: t(
                              'companyDescription',
                              'For business shipments and regular operations'
                            ),
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            (a.customerType || N === 2) &&
              N === 2 &&
              e.jsxs('div', {
                className: 'personal-info-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: a.firstName && a.lastName ? '#10b981' : '#6b7280',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: '2',
                          }),
                          t('personalInformation', 'Personal Information'),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t('personalInfoDescription', 'Tell us who you are'),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'personal-details',
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                      gap: '1rem',
                      marginBottom: '2rem',
                    },
                    children: [
                      e.jsxs('div', {
                        className: 'form-control',
                        children: [
                          e.jsx('label', {
                            htmlFor: 'firstName',
                            className: 'label-text',
                            children: t('firstName', 'First Name'),
                          }),
                          e.jsxs('div', {
                            className: 'input-wrapper',
                            children: [
                              e.jsx('input', {
                                type: 'text',
                                name: 'firstName',
                                id: 'firstName',
                                placeholder: t('firstNamePlaceholder', 'Enter your first name'),
                                value: a.firstName,
                                onChange: A,
                                className: `input glassmorphism ${b.firstName === !1 ? 'input-error' : ''}`,
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.firstName ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                              b.firstName === !0 && e.jsx(se, { className: 'check-icon' }),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: 'form-control',
                        children: [
                          e.jsx('label', {
                            htmlFor: 'lastName',
                            className: 'label-text',
                            children: t('lastName', 'Last Name'),
                          }),
                          e.jsxs('div', {
                            className: 'input-wrapper',
                            children: [
                              e.jsx('input', {
                                type: 'text',
                                name: 'lastName',
                                id: 'lastName',
                                placeholder: t('lastNamePlaceholder', 'Enter your last name'),
                                value: a.lastName,
                                onChange: A,
                                className: `input glassmorphism ${b.lastName === !1 ? 'input-error' : ''}`,
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.lastName ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                              b.lastName === !0 && e.jsx(se, { className: 'check-icon' }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            a.firstName &&
              a.lastName &&
              N === 3 &&
              e.jsxs('div', {
                className: 'shipping-experience-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: a.shipperType ? '#10b981' : '#6b7280',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: '3',
                          }),
                          t('shippingExperience', 'Shipping Experience'),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t('selectExperience', 'Select your level of experience'),
                      }),
                    ],
                  }),
                  e.jsx('div', {
                    className: 'experience-details',
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                      gap: '1rem',
                      marginBottom: '2rem',
                    },
                    children: e.jsxs('div', {
                      className: 'form-control',
                      children: [
                        e.jsx('label', {
                          htmlFor: 'shipperType',
                          className: 'label-text',
                          children: t('shippingExperience', 'Shipping Experience'),
                        }),
                        e.jsxs('div', {
                          className: 'timing-select input-wrapper',
                          style: { position: 'relative' },
                          children: [
                            e.jsx('input', {
                              type: 'text',
                              value: u || t('selectExperience', 'Select your level of experience'),
                              onClick: () => O(!0),
                              onFocus: () => O(!0),
                              readOnly: !0,
                              className: `input glassmorphism timing-input ${b.shipperType === !1 ? 'input-error' : ''}`,
                              style: {
                                cursor: 'pointer',
                                transition: 'all 0.3s ease',
                                transform: a.shipperType ? 'scale(1.02)' : 'scale(1)',
                              },
                              placeholder: t('selectExperience', 'Select your level of experience'),
                            }),
                            e.jsx('div', {
                              ref: x,
                              className: `port-list ${f ? 'show' : ''}`,
                              style: { zIndex: 1e3 },
                              children: m.map((S) =>
                                e.jsxs(
                                  'div',
                                  {
                                    className: 'port-option',
                                    onClick: () => j(S.code),
                                    children: [
                                      e.jsx('span', { className: 'port-icon', children: S.icon }),
                                      e.jsx('div', {
                                        className: 'port-info',
                                        children: e.jsxs('span', {
                                          className: 'port-name',
                                          children: [
                                            S.code === 'first-time' &&
                                              t('firstTimeShipper', 'First international shipment'),
                                            S.code === 'up-to-10x' &&
                                              t('upTo10Times', 'Limited experience'),
                                            S.code === 'more-than-10x' &&
                                              t('moreThan10Times', 'Experienced shipper'),
                                            S.code === 'regular' &&
                                              t('regularShipper', 'Regular shipper'),
                                          ],
                                        }),
                                      }),
                                    ],
                                  },
                                  S.code
                                )
                              ),
                            }),
                            b.shipperType === !0 && e.jsx(se, { className: 'check-icon' }),
                          ],
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            a.customerType === 'company' &&
              N === 4 &&
              e.jsxs('div', {
                className: 'business-info-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: a.companyName ? '#10b981' : '#6b7280',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: a.customerType === 'company' ? 4 : '',
                          }),
                          t('businessInformation', 'Business Information'),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t('businessInfoDescription', 'Tell us about your company'),
                      }),
                    ],
                  }),
                  e.jsx('div', {
                    className: 'business-details',
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                      gap: '1rem',
                      marginBottom: '2rem',
                    },
                    children: e.jsxs('div', {
                      className: 'form-control',
                      children: [
                        e.jsx('label', {
                          htmlFor: 'companyName',
                          className: 'label-text',
                          children: t('companyName', 'Company Name'),
                        }),
                        e.jsxs('div', {
                          className: 'input-wrapper',
                          children: [
                            e.jsx('input', {
                              type: 'text',
                              name: 'companyName',
                              id: 'companyName',
                              placeholder: t(
                                'companyNamePlaceholder',
                                'Your company name (optional)'
                              ),
                              value: a.companyName,
                              onChange: A,
                              className: `input glassmorphism ${b.companyName === !1 ? 'input-error' : ''}`,
                              style: {
                                transition: 'all 0.3s ease',
                                transform: a.companyName ? 'scale(1.02)' : 'scale(1)',
                              },
                            }),
                            b.companyName === !0 && e.jsx(se, { className: 'check-icon' }),
                          ],
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            a.firstName &&
              a.lastName &&
              a.shipperType &&
              N === (a.customerType === 'company' ? 5 : 4) &&
              e.jsxs('div', {
                className: 'contact-info-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: a.email && a.phone ? '#10b981' : '#6b7280',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: a.customerType === 'company' ? 5 : 4,
                          }),
                          t('contactInformation', 'Contact Information'),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t('contactInfoDescription', 'How can we reach you?'),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'contact-details',
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                      gap: '1rem',
                      marginBottom: '2rem',
                    },
                    children: [
                      e.jsxs('div', {
                        className: 'form-control',
                        children: [
                          e.jsx('label', {
                            htmlFor: 'email',
                            className: 'label-text',
                            children: t('emailAddress', 'Email Address'),
                          }),
                          e.jsxs('div', {
                            className: 'input-wrapper',
                            children: [
                              e.jsx('input', {
                                type: 'email',
                                name: 'email',
                                id: 'email',
                                placeholder: t('emailPlaceholder', 'your.email@company.com'),
                                value: a.email,
                                onChange: A,
                                className: `input glassmorphism ${b.email === !1 ? 'input-error' : ''}`,
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.email ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                              b.email === !0 && e.jsx(se, { className: 'check-icon' }),
                            ],
                          }),
                          e.jsxs('div', {
                            className: 'help-text',
                            style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                            children: [
                              '📧 ',
                              t('emailHelp', 'We will send your quote and updates to this address'),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: 'form-control',
                        children: [
                          e.jsx('label', {
                            htmlFor: 'phone',
                            className: 'label-text',
                            children: t('phoneNumber', 'Phone Number'),
                          }),
                          e.jsxs('div', {
                            className: 'phone-input-wrapper',
                            style: {
                              display: 'grid',
                              gridTemplateColumns: '105px 1fr',
                              gap: '0.5rem',
                            },
                            children: [
                              e.jsxs('div', {
                                className: 'phone-prefix-select',
                                style: { position: 'relative' },
                                children: [
                                  e.jsx('div', {
                                    className: 'search-input-wrapper',
                                    style: { position: 'relative' },
                                    children: e.jsx('input', {
                                      type: 'text',
                                      value: C,
                                      onClick: () => {
                                        (J(!0), M(''));
                                      },
                                      onFocus: () => {
                                        (J(!0), M(''));
                                      },
                                      readOnly: !0,
                                      placeholder: '+1',
                                      ref: T,
                                      className: 'input glassmorphism search-input',
                                      style: { cursor: 'pointer', fontSize: '0.9rem' },
                                    }),
                                  }),
                                  e.jsxs('div', {
                                    ref: h,
                                    className: `port-list ${_ ? 'show' : ''}`,
                                    style: { zIndex: 1e3 },
                                    children: [
                                      e.jsx('div', {
                                        style: { padding: '0.5rem' },
                                        children: e.jsx('div', {
                                          className: 'search-input-wrapper',
                                          style: { position: 'relative' },
                                          children: e.jsx('input', {
                                            type: 'text',
                                            value: y,
                                            onChange: (S) => M(S.target.value),
                                            placeholder: `${t('search', 'Search')} (+33, France)`,
                                            className: 'input glassmorphism search-input',
                                            style: { fontSize: '0.9rem' },
                                          }),
                                        }),
                                      }),
                                      xe
                                        .filter((S) => {
                                          if (!S.phonePrefix) return !1;
                                          const B = (y || '').toLowerCase(),
                                            i = B.normalize('NFD').replace(/[\u0300-\u036f]/g, ''),
                                            k = (S.name || '').toLowerCase(),
                                            w = k.normalize('NFD').replace(/[\u0300-\u036f]/g, ''),
                                            c = (H(S.code, n) || '').toLowerCase(),
                                            D = c.normalize('NFD').replace(/[\u0300-\u036f]/g, ''),
                                            R = (y || '').replace(/[^\d+]/g, ''),
                                            V = B.length > 0,
                                            ee = R.length > 0,
                                            ne =
                                              V &&
                                              (k.includes(B) ||
                                                c.includes(B) ||
                                                w.includes(i) ||
                                                D.includes(i)),
                                            oe = ee && S.phonePrefix.includes(R);
                                          return !V && !ee ? !0 : ne || oe;
                                        })
                                        .slice(0, 10)
                                        .map((S) =>
                                          e.jsxs(
                                            'div',
                                            {
                                              className: 'port-option',
                                              onClick: () => K(S.phonePrefix),
                                              children: [
                                                e.jsx('span', {
                                                  className: 'port-icon',
                                                  children: S.flag,
                                                }),
                                                e.jsxs('div', {
                                                  className: 'port-info',
                                                  children: [
                                                    e.jsx('span', {
                                                      className: 'port-name',
                                                      children: S.phonePrefix,
                                                    }),
                                                    e.jsx('span', {
                                                      className: 'port-region',
                                                      children: H(S.code, n),
                                                    }),
                                                  ],
                                                }),
                                              ],
                                            },
                                            S.code
                                          )
                                        ),
                                    ],
                                  }),
                                ],
                              }),
                              e.jsx('input', {
                                type: 'tel',
                                name: 'phone',
                                id: 'phone',
                                placeholder: t('phonePlaceholder', 'Your phone number'),
                                value: a.phone,
                                onChange: A,
                                className: `input glassmorphism ${b.phone === !1 ? 'input-error' : ''}`,
                                style: {
                                  transition: 'all 0.3s ease',
                                  transform: a.phone ? 'scale(1.02)' : 'scale(1)',
                                },
                              }),
                            ],
                          }),
                          b.phone === !0 && e.jsx(se, { className: 'check-icon' }),
                          e.jsxs('div', {
                            className: 'help-text',
                            style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                            children: [
                              '📱 ',
                              t('phoneHelp', 'For urgent updates and clarifications'),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            a.email &&
              a.phone &&
              e.jsxs('div', {
                className: 'additional-notes-phase animate-slide-in',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        style: {
                          fontSize: '1.1rem',
                          fontWeight: '600',
                          color: '#1f2937',
                          marginBottom: '0.5rem',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                        },
                        children: [
                          e.jsx('span', {
                            style: {
                              backgroundColor: '#10b981',
                              color: 'white',
                              width: '24px',
                              height: '24px',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontSize: '0.8rem',
                              fontWeight: '600',
                              transition: 'background-color 0.3s ease',
                            },
                            children: '✓',
                          }),
                          t('additionalNotes', 'Additional Notes'),
                        ],
                      }),
                      e.jsx('p', {
                        style: { fontSize: '0.9rem', color: '#6b7280', margin: '0 0 1.5rem 0' },
                        children: t(
                          'additionalNotesDescription',
                          'Is there anything else we should know?'
                        ),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'form-control',
                    children: [
                      e.jsx('label', {
                        htmlFor: 'remarks',
                        className: 'label-text',
                        children: t('remarks', 'Special Remarks'),
                      }),
                      e.jsx('textarea', {
                        name: 'remarks',
                        id: 'remarks',
                        placeholder: t(
                          'remarksPlaceholder',
                          'Any special instructions, requirements, or questions...'
                        ),
                        value: a.remarks || '',
                        onChange: A,
                        className: 'input glassmorphism',
                        rows: 4,
                        style: {
                          minHeight: '120px',
                          resize: 'vertical',
                          transition: 'all 0.3s ease',
                        },
                      }),
                      e.jsxs('div', {
                        className: 'help-text',
                        style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                        children: [
                          '💬 ',
                          t('remarksHelp', 'Extra context helps us assist you better'),
                        ],
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'contact-summary-banner',
                    style: {
                      marginTop: '2rem',
                      padding: '1.5rem',
                      backgroundColor: 'rgba(16, 185, 129, 0.1)',
                      border: '2px solid rgba(16, 185, 129, 0.2)',
                      borderRadius: '12px',
                      display: 'flex',
                      alignItems: 'flex-start',
                      gap: '1rem',
                    },
                    children: [
                      e.jsx('div', {
                        style: {
                          backgroundColor: '#10b981',
                          borderRadius: '50%',
                          padding: '8px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          minWidth: '40px',
                          height: '40px',
                        },
                        children: e.jsx(se, { size: 24, style: { color: 'white' } }),
                      }),
                      e.jsxs('div', {
                        children: [
                          e.jsx('h4', {
                            style: {
                              fontSize: '1.1rem',
                              fontWeight: '600',
                              color: '#047857',
                              margin: '0 0 0.5rem 0',
                            },
                            children: t('readyToSubmit', 'You are ready to get your quote!'),
                          }),
                          e.jsx('p', {
                            style: {
                              fontSize: '0.9rem',
                              color: '#065f46',
                              margin: '0',
                              lineHeight: '1.5',
                            },
                            children: t(
                              'submitDescription',
                              'Click the Get My Quote button below to submit your request. We will respond within 24 hours.'
                            ),
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            e.jsxs('div', {
              className: 'security-badge glassmorphism',
              style: {
                marginTop: '2rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '0.5rem',
                padding: '1rem',
              },
              children: [
                e.jsx('span', { style: { fontSize: '1.1rem' }, children: '🔒' }),
                e.jsx('span', {
                  style: { fontWeight: '500' },
                  children: t('securityBadge', 'Secure and GDPR compliant'),
                }),
              ],
            }),
          ],
        }),
      })
    );
  },
  Ra = r.memo(Ba),
  ja = () => {
    const {
        currentStep: g,
        formData: a,
        setFormData: z,
        getText: b,
        activeLoadIndex: n,
        step4SubStep: p,
        setStep4SubStep: A,
        nextStep: y,
        setCurrentStep: M,
      } = Pe(),
      [H, N] = r.useState(null),
      l = (P, f) => b(P, f),
      t = (P) => {
        const f = [...a.loads];
        ((f[n] = { ...f[n], ...P }), z((O) => ({ ...O, loads: f })));
      },
      u = a.loads[n] || Le;
    return e.jsxs(ze, {
      isVisible: g === 4,
      stepNumber: 4,
      title: l('step4Title', 'What are you shipping?'),
      emoji: '📦',
      children: [
        e.jsx('div', {
          style: {
            display: 'grid',
            gridTemplateColumns: 'repeat(2, minmax(0, 1fr))',
            alignItems: 'center',
            gap: '4px',
            background: 'rgba(243, 244, 246, 0.8)',
            borderRadius: '9999px',
            padding: '4px',
            border: '1px solid rgba(229, 231, 235, 0.7)',
            width: '100%',
            maxWidth: '520px',
            margin: '0 0 0.75rem 0',
          },
          children: [
            {
              n: 1,
              label: b('tabType', 'Type'),
              onClick: () => A(1),
              done: !!u.shippingType,
              disabled: !1,
            },
            {
              n: 2,
              label: b('tabDetails', 'Details'),
              onClick: () => u.shippingType && A(2),
              done: p === 2,
              disabled: !u.shippingType,
            },
          ].map(({ n: P, label: f, onClick: O, done: _, disabled: J }) => {
            const x = p === P;
            return e.jsxs(
              'button',
              {
                type: 'button',
                role: 'tab',
                'aria-selected': x,
                onClick: () => {
                  J || O();
                },
                style: {
                  width: '100%',
                  minWidth: 0,
                  padding: '6px 8px',
                  fontSize: '0.85rem',
                  borderRadius: '9999px',
                  background: x ? '#ffffff' : 'transparent',
                  color: x ? '#111827' : '#6b7280',
                  boxShadow: x ? '0 1px 3px rgba(0,0,0,0.08)' : 'none',
                  border: x ? '1px solid rgba(0,0,0,0.05)' : '1px solid transparent',
                  display: 'inline-flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '0.4rem',
                  transition: 'all 0.2s ease',
                  cursor: J ? 'not-allowed' : 'pointer',
                  opacity: J ? 0.5 : 1,
                },
                children: [
                  e.jsx('span', {
                    style: {
                      width: '16px',
                      height: '16px',
                      borderRadius: '50%',
                      background: _ ? 'linear-gradient(135deg, #10b981, #059669)' : '#e5e7eb',
                      display: 'inline-flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#fff',
                      fontSize: '0.7rem',
                    },
                    children: _ ? '✓' : P,
                  }),
                  e.jsx('span', {
                    style: { whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' },
                    children: f,
                  }),
                ],
              },
              P
            );
          }),
        }),
        e.jsxs('div', {
          className: 'step-4-container',
          children: [
            p === 1 &&
              e.jsxs('div', {
                className: 'cargo-type-guidance-phase',
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        children: [
                          e.jsx('span', {
                            className: `step-indicator ${u.shippingType ? 'completed' : ''}`,
                            children: '1',
                          }),
                          l('chooseShippingType', 'Choose your shipping type'),
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children: l(
                          'selectPackagingMethod',
                          'Select how your goods are packaged for shipping'
                        ),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className:
                      'step4-choice-option-group-extended shipping-type-selector mx-auto my-6',
                    children: [
                      e.jsxs('div', {
                        className: `step4-choice-option ${u.shippingType === 'loose' ? 'selected' : ''}`,
                        'data-choice-theme': 'loose-cargo',
                        onClick: () => {
                          (t({ shippingType: 'loose' }), window.innerWidth <= 768 || A(2));
                        },
                        onMouseEnter: () => {
                          window.innerWidth <= 768 || N('loose');
                        },
                        onMouseLeave: () => {
                          window.innerWidth <= 768 || N(null);
                        },
                        style: { cursor: 'pointer' },
                        children: [
                          e.jsx(ga, { size: 48, strokeWidth: 2.25 }),
                          e.jsx('span', { children: l('looseCargo', 'Loose Cargo') }),
                          e.jsx('div', {
                            className: 'location-desc',
                            children: l('looseCargoDesc', 'Pallets, boxes, or individual items'),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: `step4-choice-option ${u.shippingType === 'container' ? 'selected' : ''}`,
                        'data-choice-theme': 'container',
                        onClick: () => {
                          (t({ shippingType: 'container' }), window.innerWidth <= 768 || A(2));
                        },
                        onMouseEnter: () => {
                          window.innerWidth <= 768 || N('container');
                        },
                        onMouseLeave: () => {
                          window.innerWidth <= 768 || N(null);
                        },
                        style: { cursor: 'pointer' },
                        children: [
                          e.jsx(ba, { size: 48, strokeWidth: 2.25 }),
                          e.jsx('span', { children: l('fullContainer', 'Full Container') }),
                          e.jsx('div', {
                            className: 'location-desc',
                            children: l('fullContainerDesc', 'Complete container (FCL)'),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: `step4-choice-option ${u.shippingType === 'unsure' ? 'selected' : ''}`,
                        'data-choice-theme': 'unsure',
                        onClick: () => {
                          (t({ shippingType: 'unsure' }), window.innerWidth <= 768 || M(5));
                        },
                        onMouseEnter: () => {
                          window.innerWidth <= 768 || N('unsure');
                        },
                        onMouseLeave: () => {
                          window.innerWidth <= 768 || N(null);
                        },
                        style: { cursor: 'pointer' },
                        children: [
                          e.jsx(va, { size: 48, strokeWidth: 2.25 }),
                          e.jsx('span', { children: l('imNotSure', "I'm not sure") }),
                          e.jsx('div', {
                            className: 'location-desc',
                            children: l(
                              'teamWillHelp',
                              'Our team will help you choose the best option'
                            ),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (window.innerWidth <= 768 ? u.shippingType === 'loose' : H === 'loose') &&
                    e.jsx('div', {
                      className: 'selection-feedback',
                      style: {
                        marginTop: '1.5rem',
                        padding: '1rem',
                        background: 'rgba(16, 185, 129, 0.15)',
                        borderRadius: '12px',
                        border: '2px solid rgba(16, 185, 129, 0.3)',
                      },
                      children: e.jsxs('div', {
                        style: { display: 'flex', alignItems: 'center', gap: '0.5rem' },
                        children: [
                          e.jsx(se, { size: 20, style: { color: '#10b981', flexShrink: 0 } }),
                          e.jsx('span', {
                            style: {
                              fontSize: '0.9rem',
                              color: '#047857',
                              fontWeight: 600,
                              lineHeight: '1.4',
                            },
                            children: l(
                              'looseCargoFeedback',
                              'Perfect for mixed goods, small to medium quantities, or when you need flexible packaging'
                            ),
                          }),
                        ],
                      }),
                    }),
                  (window.innerWidth <= 768 ? u.shippingType === 'container' : H === 'container') &&
                    e.jsx('div', {
                      className: 'selection-feedback',
                      style: {
                        marginTop: '1.5rem',
                        padding: '1rem',
                        background: 'rgba(139, 92, 246, 0.15)',
                        borderRadius: '12px',
                        border: '2px solid rgba(139, 92, 246, 0.3)',
                      },
                      children: e.jsxs('div', {
                        style: { display: 'flex', alignItems: 'center', gap: '0.5rem' },
                        children: [
                          e.jsx(se, { size: 20, style: { color: '#8b5cf6', flexShrink: 0 } }),
                          e.jsx('span', {
                            style: {
                              fontSize: '0.9rem',
                              color: '#581c87',
                              fontWeight: 600,
                              lineHeight: '1.4',
                            },
                            children: l(
                              'containerFeedback',
                              'Great choice for large volumes, complete product lines, or when you have enough goods to fill a container'
                            ),
                          }),
                        ],
                      }),
                    }),
                  (window.innerWidth <= 768 ? u.shippingType === 'unsure' : H === 'unsure') &&
                    e.jsxs('div', {
                      className: 'selection-feedback',
                      style: {
                        marginTop: '1.5rem',
                        padding: '1rem',
                        background: 'rgba(59, 130, 246, 0.15)',
                        borderRadius: '12px',
                        border: '2px solid rgba(59, 130, 246, 0.3)',
                      },
                      children: [
                        e.jsxs('div', {
                          style: { display: 'flex', alignItems: 'center', gap: '0.5rem' },
                          children: [
                            e.jsx(se, { size: 20, style: { color: '#3b82f6', flexShrink: 0 } }),
                            e.jsx('span', {
                              style: {
                                fontSize: '0.9rem',
                                color: '#1e40af',
                                fontWeight: 600,
                                lineHeight: '1.4',
                              },
                              children: l(
                                'unsureFeedback',
                                "No worries! Our experienced team will guide you through the process and recommend the best shipping solution for your specific needs. We'll handle all the technical details."
                              ),
                            }),
                          ],
                        }),
                        e.jsx('div', {
                          style: {
                            marginTop: '1rem',
                            padding: '0.75rem',
                            background: 'rgba(255, 255, 255, 0.8)',
                            borderRadius: '8px',
                            border: '1px solid rgba(59, 130, 246, 0.2)',
                          },
                          children: e.jsxs('div', {
                            style: { fontSize: '0.85rem', color: '#374151', lineHeight: 1.5 },
                            children: [
                              e.jsx('span', { role: 'img', 'aria-label': 'phone', children: '📞' }),
                              ' ',
                              e.jsx('strong', {
                                children: l('whatHappensNextTitle', 'What happens next:'),
                              }),
                              e.jsx('br', {}),
                              '•',
                              ' ',
                              l(
                                'contactWithin24h',
                                'Our shipping experts will contact you within 24 hours'
                              ),
                              e.jsx('br', {}),
                              '•',
                              ' ',
                              l(
                                'discussCargoDetails',
                                "We'll discuss your cargo details and requirements"
                              ),
                              e.jsx('br', {}),
                              '•',
                              ' ',
                              l(
                                'personalizedRecommendations',
                                "You'll receive personalized recommendations and pricing"
                              ),
                              e.jsx('br', {}),
                              '• ',
                              l('noCommitment', 'No commitment required - just expert guidance!'),
                            ],
                          }),
                        }),
                      ],
                    }),
                ],
              }),
            p === 2 &&
              u.shippingType === 'loose' &&
              e.jsxs('div', {
                className: 'cargo-details-phase',
                style: { marginTop: '2rem' },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          marginBottom: '0.5rem',
                        },
                        children: [
                          e.jsx('span', { className: 'step-indicator', children: '2' }),
                          l('describeLooseCargo', 'Describe your loose cargo'),
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children: l(
                          'provideDimensionsWeight',
                          'Provide dimensions and weight details for accurate pricing'
                        ),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'loose-cargo-section',
                    style: {
                      background: 'rgba(255,255,255,0.35)',
                      borderRadius: '16px',
                      boxShadow: '0 8px 24px rgba(0,0,0,0.06)',
                      padding: '1rem',
                    },
                    children: [
                      e.jsxs('div', {
                        className: 'calculation-type-selector button-group-horizontal',
                        style: { margin: '1rem 0' },
                        children: [
                          e.jsxs('label', {
                            className: `radio-label ${u.calculationType === 'unit' ? 'selected' : ''}`,
                            children: [
                              e.jsx('input', {
                                type: 'radio',
                                name: 'calculationType-0',
                                value: 'unit',
                                checked: u.calculationType === 'unit',
                                onChange: () => t({ calculationType: 'unit' }),
                              }),
                              l('calcPerUnit', 'Calculate by unit type'),
                            ],
                          }),
                          e.jsxs('label', {
                            className: `radio-label ${u.calculationType === 'total' ? 'selected' : ''}`,
                            children: [
                              e.jsx('input', {
                                type: 'radio',
                                name: 'calculationType-0',
                                value: 'total',
                                checked: u.calculationType === 'total',
                                onChange: () => t({ calculationType: 'total' }),
                              }),
                              l('calcTotal', 'Calculate by total shipment'),
                            ],
                          }),
                        ],
                      }),
                      u.calculationType === 'unit' &&
                        e.jsxs('div', {
                          className: 'unit-details sub-section-card',
                          children: [
                            e.jsxs('div', {
                              className: 'info-banner',
                              style: {
                                display: 'flex',
                                gap: '0.5rem',
                                alignItems: 'center',
                                marginBottom: '0.75rem',
                              },
                              children: [
                                e.jsx(Ne, { size: 20, className: 'info-icon' }),
                                e.jsx('span', {
                                  children: l(
                                    'unitInfo',
                                    'Provide details about each individual item or pallet for accurate calculation.'
                                  ),
                                }),
                              ],
                            }),
                            e.jsxs('div', {
                              className: 'package-selection-row',
                              style: {
                                display: 'flex',
                                gap: '1rem',
                                flexWrap: 'wrap',
                                alignItems: 'flex-end',
                              },
                              children: [
                                e.jsxs('div', {
                                  className: 'package-type-section',
                                  style: { minWidth: 220 },
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text',
                                      children: l('packageType', 'Package type'),
                                    }),
                                    e.jsxs('div', {
                                      className: 'button-group-horizontal',
                                      children: [
                                        e.jsx('button', {
                                          type: 'button',
                                          className: `btn-tab-compact ${u.packageType === 'pallets' ? 'active' : ''}`,
                                          onClick: () =>
                                            t({
                                              packageType: 'pallets',
                                              palletType: u.palletType || 'non_specified',
                                            }),
                                          children: l('pallets', 'Pallets'),
                                        }),
                                        e.jsx('button', {
                                          type: 'button',
                                          className: `btn-tab-compact ${u.packageType === 'boxes' ? 'active' : ''}`,
                                          onClick: () => t({ packageType: 'boxes' }),
                                          children: l('boxes', 'Boxes/Crates'),
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                                e.jsxs('div', {
                                  className: 'units-counter-section',
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text',
                                      children: l('numUnits', '# of units'),
                                    }),
                                    e.jsxs('div', {
                                      className: 'input-number-wrapper-compact',
                                      style: {
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '0.25rem',
                                      },
                                      children: [
                                        e.jsx('button', {
                                          type: 'button',
                                          className: 'btn-number-control-compact',
                                          onClick: () =>
                                            t({
                                              numberOfUnits: Math.max(
                                                1,
                                                (u.numberOfUnits || 1) - 1
                                              ),
                                            }),
                                          children: e.jsx(Ee, { size: 14 }),
                                        }),
                                        e.jsx('input', {
                                          type: 'number',
                                          className: 'input-number-compact',
                                          min: 1,
                                          value: u.numberOfUnits || 1,
                                          onChange: (P) =>
                                            t({
                                              numberOfUnits: Math.max(
                                                1,
                                                parseInt(P.target.value || '1', 10)
                                              ),
                                            }),
                                        }),
                                        e.jsx('button', {
                                          type: 'button',
                                          className: 'btn-number-control-compact',
                                          onClick: () =>
                                            t({ numberOfUnits: (u.numberOfUnits || 1) + 1 }),
                                          children: e.jsx(we, { size: 14 }),
                                        }),
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                            u.packageType === 'pallets' &&
                              e.jsxs('div', {
                                className: 'form-control',
                                style: { marginTop: '0.75rem' },
                                children: [
                                  e.jsx('label', {
                                    className: 'label-text',
                                    children: l('palletType', 'Pallet type'),
                                  }),
                                  e.jsx(ye, {
                                    value: u.palletType || 'non_specified',
                                    onChange: (P) => t({ palletType: P }),
                                    options: [
                                      {
                                        value: 'non_specified',
                                        label: l('palletNonSpecified', 'Non-specified'),
                                      },
                                      {
                                        value: 'eur1',
                                        label: l('euroPallet', 'Euro Pallet (120x80 cm)'),
                                      },
                                      {
                                        value: 'std120x100',
                                        label: l('stdPallet', 'Standard Pallet (120x100 cm)'),
                                      },
                                      { value: 'custom', label: l('customSize', 'Custom Size') },
                                    ],
                                  }),
                                ],
                              }),
                            e.jsxs('div', {
                              className: 'dimensions-weight-compact',
                              style: { display: 'grid', gap: '1rem', marginTop: '0.75rem' },
                              children: [
                                e.jsxs('div', {
                                  className: 'dimensions-section-compact',
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text-compact',
                                      children: l(
                                        'dimensionsPerUnit',
                                        'Dimensions (L×W×H per unit)'
                                      ),
                                    }),
                                    e.jsxs('div', {
                                      className: 'dimensions-input-row',
                                      children: [
                                        e.jsx('input', {
                                          type: 'number',
                                          placeholder: 'L',
                                          className: 'dimension-input-compact',
                                          value: u.dimensions.length,
                                          onChange: (P) =>
                                            t({
                                              dimensions: {
                                                ...u.dimensions,
                                                length: P.target.value,
                                              },
                                            }),
                                        }),
                                        e.jsx('span', {
                                          className: 'dimension-separator',
                                          children: '×',
                                        }),
                                        e.jsx('input', {
                                          type: 'number',
                                          placeholder: 'W',
                                          className: 'dimension-input-compact',
                                          value: u.dimensions.width,
                                          onChange: (P) =>
                                            t({
                                              dimensions: {
                                                ...u.dimensions,
                                                width: P.target.value,
                                              },
                                            }),
                                        }),
                                        e.jsx('span', {
                                          className: 'dimension-separator',
                                          children: '×',
                                        }),
                                        e.jsx('input', {
                                          type: 'number',
                                          placeholder: 'H',
                                          className: 'dimension-input-compact',
                                          value: u.dimensions.height,
                                          onChange: (P) =>
                                            t({
                                              dimensions: {
                                                ...u.dimensions,
                                                height: P.target.value,
                                              },
                                            }),
                                        }),
                                        e.jsx(ye, {
                                          value: u.dimensionUnit || 'CM',
                                          onChange: (P) => t({ dimensionUnit: P }),
                                          options: [
                                            { value: 'CM', label: 'CM' },
                                            { value: 'M', label: 'M' },
                                            { value: 'IN', label: 'IN' },
                                          ],
                                          compact: !0,
                                          unitSelector: !0,
                                        }),
                                      ],
                                    }),
                                    !(
                                      u.dimensions.length &&
                                      u.dimensions.width &&
                                      u.dimensions.height
                                    ) &&
                                      e.jsx('div', {
                                        className: 'validation-message',
                                        children: l('required', 'Required'),
                                      }),
                                  ],
                                }),
                                e.jsxs('div', {
                                  className: 'weight-section-compact',
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text-compact',
                                      children: l('weightPerUnit', 'Weight (Per unit)'),
                                    }),
                                    e.jsxs('div', {
                                      className: 'weight-input-row',
                                      children: [
                                        e.jsx('input', {
                                          type: 'number',
                                          placeholder: l('weight', 'Weight'),
                                          className: 'weight-input-compact',
                                          value: u.weightPerUnit,
                                          onChange: (P) => t({ weightPerUnit: P.target.value }),
                                        }),
                                        e.jsx(ye, {
                                          value: u.weightUnit || 'KG',
                                          onChange: (P) => t({ weightUnit: P }),
                                          options: [
                                            { value: 'KG', label: 'KG' },
                                            { value: 'LB', label: 'LB' },
                                            { value: 'T', label: 'T' },
                                          ],
                                          compact: !0,
                                          unitSelector: !0,
                                        }),
                                      ],
                                    }),
                                    !u.weightPerUnit &&
                                      e.jsx('div', {
                                        className: 'validation-message',
                                        children: l('required', 'Required'),
                                      }),
                                  ],
                                }),
                              ],
                            }),
                          ],
                        }),
                      u.calculationType === 'total' &&
                        e.jsxs('div', {
                          className: 'total-shipment-details',
                          children: [
                            e.jsxs('div', {
                              className: 'info-banner-total',
                              style: {
                                display: 'flex',
                                gap: '0.5rem',
                                alignItems: 'center',
                                marginBottom: '0.75rem',
                              },
                              children: [
                                e.jsx(Ne, { size: 20, className: 'info-icon' }),
                                e.jsx('span', {
                                  children: l(
                                    'totalInfo',
                                    'Providing total shipment figures can be less precise. Inaccurate or oversized dimensions may lead to additional charges.'
                                  ),
                                }),
                              ],
                            }),
                            e.jsx('div', {
                              className: 'total-description',
                              style: {
                                fontSize: '0.9rem',
                                color: '#6b7280',
                                marginBottom: '0.75rem',
                              },
                              children: l(
                                'enterTotalDimWeight',
                                'Enter the total dimensions and weight of your shipment.'
                              ),
                            }),
                            e.jsxs('div', {
                              className: 'total-units-section',
                              style: { marginBottom: '0.75rem' },
                              children: [
                                e.jsx('label', {
                                  className: 'label-text-compact',
                                  children: l('numUnits', '# of units'),
                                }),
                                e.jsxs('div', {
                                  className: 'input-number-wrapper-compact',
                                  style: { display: 'flex', alignItems: 'center', gap: '0.25rem' },
                                  children: [
                                    e.jsx('button', {
                                      type: 'button',
                                      className: 'btn-number-control-compact',
                                      onClick: () =>
                                        t({
                                          numberOfUnits: Math.max(1, (u.numberOfUnits || 1) - 1),
                                        }),
                                      children: e.jsx(Ee, { size: 14 }),
                                    }),
                                    e.jsx('input', {
                                      type: 'number',
                                      className: 'input-number-compact',
                                      min: 1,
                                      value: u.numberOfUnits || 1,
                                      onChange: (P) =>
                                        t({
                                          numberOfUnits: Math.max(
                                            1,
                                            parseInt(P.target.value || '1', 10)
                                          ),
                                        }),
                                    }),
                                    e.jsx('button', {
                                      type: 'button',
                                      className: 'btn-number-control-compact',
                                      onClick: () =>
                                        t({ numberOfUnits: (u.numberOfUnits || 1) + 1 }),
                                      children: e.jsx(we, { size: 14 }),
                                    }),
                                  ],
                                }),
                                e.jsx('div', {
                                  className: 'field-help',
                                  style: {
                                    fontSize: '0.8rem',
                                    color: '#6b7280',
                                    marginTop: '0.25rem',
                                  },
                                  children: l(
                                    'numUnitsHelp',
                                    'How many logical units does this total volume/weight represent?'
                                  ),
                                }),
                              ],
                            }),
                            e.jsxs('div', {
                              className: 'total-inputs-row',
                              style: {
                                display: 'grid',
                                gridTemplateColumns: '1fr 1fr',
                                gap: '1rem',
                              },
                              children: [
                                e.jsxs('div', {
                                  className: 'total-volume-section',
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text-compact',
                                      children: l('totalVolume', 'Total Volume'),
                                    }),
                                    e.jsxs('div', {
                                      className: 'total-input-group',
                                      style: {
                                        display: 'flex',
                                        gap: '0.5rem',
                                        alignItems: 'center',
                                      },
                                      children: [
                                        e.jsx('input', {
                                          type: 'number',
                                          className: 'total-input-compact',
                                          value: u.totalVolume,
                                          onChange: (P) => t({ totalVolume: P.target.value }),
                                        }),
                                        e.jsx(ye, {
                                          value: u.totalVolumeUnit || 'CBM',
                                          onChange: (P) => t({ totalVolumeUnit: P }),
                                          options: [
                                            { value: 'CBM', label: 'CBM (m³)' },
                                            { value: 'CFT', label: 'CFT (ft³)' },
                                          ],
                                          compact: !0,
                                          unitSelector: !0,
                                        }),
                                      ],
                                    }),
                                    !u.totalVolume &&
                                      e.jsx('div', {
                                        className: 'validation-message',
                                        children: l('required', 'Required'),
                                      }),
                                  ],
                                }),
                                e.jsxs('div', {
                                  className: 'total-weight-section',
                                  children: [
                                    e.jsx('label', {
                                      className: 'label-text-compact',
                                      children: l('totalWeight', 'Total Weight'),
                                    }),
                                    e.jsxs('div', {
                                      className: 'total-input-group',
                                      style: {
                                        display: 'flex',
                                        gap: '0.5rem',
                                        alignItems: 'center',
                                      },
                                      children: [
                                        e.jsx('input', {
                                          type: 'number',
                                          className: 'total-input-compact',
                                          value: u.totalWeight,
                                          onChange: (P) => t({ totalWeight: P.target.value }),
                                        }),
                                        e.jsx(ye, {
                                          value: u.totalWeightUnit || 'KG',
                                          onChange: (P) => t({ totalWeightUnit: P }),
                                          options: [
                                            { value: 'KG', label: 'KG' },
                                            { value: 'LB', label: 'LB' },
                                            { value: 'T', label: 'T' },
                                          ],
                                          compact: !0,
                                          unitSelector: !0,
                                        }),
                                      ],
                                    }),
                                    !u.totalWeight &&
                                      e.jsx('div', {
                                        className: 'validation-message',
                                        children: l('required', 'Required'),
                                      }),
                                  ],
                                }),
                              ],
                            }),
                          ],
                        }),
                    ],
                  }),
                ],
              }),
            p === 2 &&
              u.shippingType === 'container' &&
              e.jsxs('div', {
                className: 'cargo-details-phase',
                style: { marginTop: '2rem' },
                children: [
                  e.jsxs('div', {
                    className: 'phase-header',
                    children: [
                      e.jsxs('h3', {
                        className: 'phase-header-title',
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          marginBottom: '0.5rem',
                        },
                        children: [
                          e.jsx('span', { className: 'step-indicator', children: '2' }),
                          l('configureContainer', 'Configure your container'),
                        ],
                      }),
                      e.jsx('p', {
                        className: 'phase-header-subtitle',
                        children: l(
                          'selectContainerTypeQty',
                          'Select container type and quantity for your shipment'
                        ),
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    className: 'container-details',
                    style: {
                      background: 'rgba(255,255,255,0.35)',
                      borderRadius: '16px',
                      boxShadow: '0 8px 24px rgba(0,0,0,0.06)',
                      padding: '1rem',
                    },
                    children: [
                      e.jsxs('div', {
                        className: 'info-banner',
                        style: {
                          display: 'flex',
                          gap: '0.5rem',
                          alignItems: 'center',
                          marginBottom: '0.75rem',
                        },
                        children: [
                          e.jsx(Ne, { size: 20, className: 'info-icon' }),
                          e.jsx('span', {
                            children: l(
                              'containerInfo',
                              'Select the container type and quantity that best fits your cargo volume.'
                            ),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        className: 'flex flex-col md:flex-row md:items-baseline md:gap-x-6 mb-6',
                        style: {
                          display: 'flex',
                          gap: '1rem',
                          flexWrap: 'wrap',
                          alignItems: 'flex-end',
                          marginBottom: '1rem',
                        },
                        children: [
                          e.jsxs('div', {
                            className: 'form-control items-center flex-grow md:flex-1',
                            style: { flex: 1, minWidth: 240 },
                            children: [
                              e.jsx('label', {
                                className: 'label-text',
                                style: { marginBottom: '0.5rem' },
                                children: l('containerType', 'Container type'),
                              }),
                              e.jsx(ye, {
                                value: u.containerType || "20'",
                                onChange: (P) => t({ containerType: P }),
                                options: [
                                  { value: "20'", label: "20' Standard (33 CBM)" },
                                  { value: "40'", label: "40' Standard (67 CBM)" },
                                  { value: "40'HC", label: "40' High Cube (76 CBM)" },
                                  { value: "45'HC", label: "45' High Cube (86 CBM)" },
                                ],
                              }),
                            ],
                          }),
                          e.jsxs('div', {
                            className: 'form-control items-center',
                            style: { minWidth: 220 },
                            children: [
                              e.jsx('label', {
                                className: 'label-text',
                                style: { marginBottom: '0.5rem' },
                                children: l('numContainers', 'Number of containers'),
                              }),
                              e.jsxs('div', {
                                className: 'input-number-wrapper',
                                style: { display: 'flex', alignItems: 'center', gap: '0.25rem' },
                                children: [
                                  e.jsx('button', {
                                    type: 'button',
                                    className: 'btn-number-control',
                                    onClick: () =>
                                      t({ numberOfUnits: Math.max(1, (u.numberOfUnits || 1) - 1) }),
                                    children: e.jsx(Ee, { size: 16 }),
                                  }),
                                  e.jsx('input', {
                                    type: 'number',
                                    className: 'input glassmorphism',
                                    min: 1,
                                    value: u.numberOfUnits || 1,
                                    onChange: (P) =>
                                      t({
                                        numberOfUnits: Math.max(
                                          1,
                                          parseInt(P.target.value || '1', 10)
                                        ),
                                      }),
                                  }),
                                  e.jsx('button', {
                                    type: 'button',
                                    className: 'btn-number-control',
                                    onClick: () => t({ numberOfUnits: (u.numberOfUnits || 1) + 1 }),
                                    children: e.jsx(we, { size: 16 }),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                      e.jsx('div', {
                        className: 'form-control',
                        children: e.jsxs('label', {
                          className: 'checkbox-label',
                          children: [
                            e.jsx('input', {
                              type: 'checkbox',
                              checked: !!u.isOverweight,
                              onChange: (P) => t({ isOverweight: P.target.checked }),
                            }),
                            e.jsx('span', {
                              children: l('overweightContainer', 'Overweight container (>25 tons)'),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                ],
              }),
          ],
        }),
      ],
    });
  },
  Ea = r.memo(ja);
function wa() {
  if (typeof window > 'u') return !1;
  try {
    if (
      window.location.search.includes('dropdownDebug=1') ||
      localStorage.getItem('dropdownDebug') === '1'
    )
      return !0;
  } catch {}
  return !1;
}
function Fe(g) {
  if (!wa()) return () => {};
  const { listEl: a, triggerEl: z, containerEl: b, type: n } = g,
    p = [];
  let A = null;
  try {
    if (
      ((a.style.outline = '2px dashed #10b981'),
      (a.style.outlineOffset = '2px'),
      n && (a.dataset.debugType = n),
      p.push(() => {
        ((a.style.outline = ''), (a.style.outlineOffset = ''), delete a.dataset.debugType);
      }),
      z)
    ) {
      const H = z.style.outline;
      ((z.style.outline = '2px solid #3b82f6'),
        p.push(() => {
          z.style.outline = H;
        }));
    }
    if (b) {
      const H = b.style.outline;
      ((b.style.outline = '1px dashed rgba(0,0,0,0.3)'),
        p.push(() => {
          b.style.outline = H;
        }));
    }
    const y = () => {
        const H = document.querySelector('.form-footer'),
          N = H ? Math.max(0, H.getBoundingClientRect().height) : 0;
        (A ||
          ((A = document.createElement('div')),
          (A.style.position = 'fixed'),
          (A.style.left = '0'),
          (A.style.right = '0'),
          (A.style.height = '2px'),
          (A.style.background = 'rgba(59,130,246,0.5)'),
          (A.style.pointerEvents = 'none'),
          (A.style.zIndex = '9999'),
          document.body.appendChild(A),
          p.push(() => {
            (A && A.parentNode && A.parentNode.removeChild(A), (A = null));
          })),
          (A.style.bottom = `${N}px`));
      },
      M = () => y();
    (y(),
      window.addEventListener('resize', M, { passive: !0 }),
      window.addEventListener('scroll', M, { passive: !0, capture: !0 }),
      p.push(() => {
        (window.removeEventListener('resize', M), window.removeEventListener('scroll', M, !0));
      }));
  } catch {}
  return () => {
    p.forEach((y) => {
      try {
        y();
      } catch {}
    });
  };
}
const Da = () => {
    const {
        currentStep: g,
        formData: a,
        setFormData: z,
        fieldValid: b,
        userLang: n,
        getText: p,
        handleInputChange: A,
        step5SubStep: y,
        setStep5SubStep: M,
        nextStep: H,
        currencySearch: N,
        setCurrencySearch: l,
        isCurrencyListVisible: t,
        setIsCurrencyListVisible: u,
        handleCurrencySelect: P,
      } = Pe(),
      f = r.useCallback((c, D) => p(c, D), [p]),
      [O, _] = r.useState(''),
      [J, x] = r.useState(!1),
      [h, T] = r.useState(''),
      [m, I] = r.useState(!1),
      F = r.useRef(null),
      C = r.useRef(null),
      j = r.useRef(null),
      K = r.useMemo(
        () => [
          { code: 'USD', name: 'US Dollar', flag: '🇺🇸' },
          { code: 'EUR', name: 'Euro', flag: '🇪🇺' },
          { code: 'GBP', name: 'British Pound', flag: '🇬🇧' },
          { code: 'CNY', name: 'Chinese Yuan', flag: '🇨🇳' },
          { code: 'CAD', name: 'Canadian Dollar', flag: '🇨🇦' },
          { code: 'AUD', name: 'Australian Dollar', flag: '🇦🇺' },
          { code: 'JPY', name: 'Japanese Yen', flag: '🇯🇵' },
        ],
        []
      ),
      S = r.useMemo(
        () => [
          {
            code: 'yes',
            name: 'Ready now',
            description: 'goods are available for immediate pickup',
            icon: '🟢',
          },
          {
            code: 'no_in_1_week',
            name: 'Within 1 week',
            description: 'currently preparing',
            icon: '🗓️',
          },
          {
            code: 'no_in_2_weeks',
            name: 'Within 2 weeks',
            description: 'production in progress',
            icon: '🗓️',
          },
          {
            code: 'no_in_1_month',
            name: 'Within 1 month',
            description: 'planning ahead',
            icon: '🗓️',
          },
          { code: 'no_date_set', name: 'Date not determined yet', description: '', icon: '❔' },
        ],
        []
      ),
      B = r.useMemo(
        () => [
          { code: '', name: 'No special requirements', description: '', icon: '🟢' },
          { code: 'fragile', name: 'Fragile goods', description: 'handle with care', icon: '📦' },
          { code: 'temperature', name: 'Temperature controlled', description: '', icon: '🧊' },
          { code: 'urgent', name: 'Urgent/time-sensitive', description: '', icon: '🚀' },
          { code: 'insurance', name: 'High-value insurance required', description: '', icon: '💎' },
          {
            code: 'other',
            name: 'Other',
            description: f('pleaseSpecifyInRemarks', 'Please specify in remarks'),
            icon: '➕',
          },
        ],
        [f]
      ),
      i = r.useCallback(
        (c) => (c ?? '').replace(new RegExp('^\\p{Extended_Pictographic}+\\s*', 'u'), '').trim(),
        []
      ),
      k = (c) => {
        const D = S.find((V) => V.code === c);
        z({ ...a, areGoodsReady: c });
        let R = '';
        switch (c) {
          case 'yes':
            R = i(f('readyNow', 'Ready now - goods are available for immediate pickup'));
            break;
          case 'no_in_1_week':
            R = i(f('readyIn1Week', 'Within 1 week - currently preparing'));
            break;
          case 'no_in_2_weeks':
            R = i(f('readyIn2Weeks', 'Within 2 weeks - production in progress'));
            break;
          case 'no_in_1_month':
            R = i(f('readyIn1Month', 'Within 1 month - planning ahead'));
            break;
          case 'no_date_set':
            R = i(f('dateNotSet', 'Date not determined yet'));
            break;
        }
        (_(D ? `${D.icon}  ${R}` : c), x(!1), M(3));
      },
      w = (c) => {
        const D = B.find((V) => V.code === c);
        z({ ...a, specialRequirements: c });
        let R = '';
        switch (c) {
          case '':
            R = f('noSpecialRequirements', 'No special requirements');
            break;
          case 'fragile':
            R = i(f('fragileGoods', 'Fragile goods - handle with care'));
            break;
          case 'temperature':
            R = i(f('temperatureControlled', 'Temperature controlled'));
            break;
          case 'urgent':
            R = i(f('urgentTimeSensitive', 'Urgent/time-sensitive'));
            break;
          case 'insurance':
            R = i(f('highValueInsurance', 'High-value insurance required'));
            break;
          case 'other':
            R = i(f('otherSpecify', 'Other (please specify)'));
            break;
        }
        (T(D ? `${D.icon}  ${R}` : f('noSpecialRequirements', 'No special requirements')), I(!1));
      };
    return (
      r.useEffect(() => {
        const c = K.find((V) => V.code === a.goodsCurrency);
        c && l(`${c.flag} ${c.code}`);
        const D = S.find((V) => V.code === a.areGoodsReady);
        if (D) {
          let V = '';
          switch (D.code) {
            case 'yes':
              V = i(f('readyNow', 'Ready now - goods are available for immediate pickup'));
              break;
            case 'no_in_1_week':
              V = i(f('readyIn1Week', 'Within 1 week - currently preparing'));
              break;
            case 'no_in_2_weeks':
              V = i(f('readyIn2Weeks', 'Within 2 weeks - production in progress'));
              break;
            case 'no_in_1_month':
              V = i(f('readyIn1Month', 'Within 1 month - planning ahead'));
              break;
            case 'no_date_set':
              V = i(f('dateNotSet', 'Date not determined yet'));
              break;
          }
          _(`${D.icon}  ${V}`);
        }
        const R = B.find((V) => V.code === a.specialRequirements);
        if (R) {
          let V = '';
          switch (R.code) {
            case '':
              V = f('noSpecialRequirements', 'No special requirements');
              break;
            case 'fragile':
              V = i(f('fragileGoods', 'Fragile goods - handle with care'));
              break;
            case 'temperature':
              V = i(f('temperatureControlled', 'Temperature controlled'));
              break;
            case 'urgent':
              V = i(f('urgentTimeSensitive', 'Urgent/time-sensitive'));
              break;
            case 'insurance':
              V = i(f('highValueInsurance', 'High-value insurance required'));
              break;
            case 'other':
              V = i(f('otherSpecify', 'Other (please specify)'));
              break;
          }
          T(`${R.icon}  ${V}`);
        }
      }, [a.goodsCurrency, a.areGoodsReady, a.specialRequirements, n, f, i, K, S, B, l]),
      r.useEffect(() => {
        const c = (D) => {
          (F.current && !F.current.contains(D.target) && u(!1),
            C.current && !C.current.contains(D.target) && x(!1),
            j.current && !j.current.contains(D.target) && I(!1));
        };
        return (
          document.addEventListener('mousedown', c),
          () => document.removeEventListener('mousedown', c)
        );
      }, [u, x, I]),
      r.useEffect(() => {
        var ne, oe, q, v, E, W;
        const c = (L, G) => {
          if (!L || !G) return;
          const Q = G.closest('.quote-form-container'),
            Z = Q
              ? Q.getBoundingClientRect()
              : { top: 0, left: 0, right: window.innerWidth, bottom: window.innerHeight },
            ae = G.getBoundingClientRect(),
            X = document.querySelector('.form-footer'),
            te = X ? X.getBoundingClientRect().height : 0,
            le = window.innerHeight - te,
            de = Math.min(Z.bottom, le),
            ce = Math.max(0, de - ae.bottom - 6),
            be = Math.max(0, ae.top - Z.top - 12),
            Se = Math.max(0, Z.right - ae.left),
            pe = Math.max(0, ae.right - Z.left);
          L.classList.remove('show-above', 'adjust-right', 'adjust-left');
          const ve = Math.min(300, L.scrollHeight || 300);
          (ce < ve && be > ce && L.classList.add('show-above'),
            Se < 200 ? L.classList.add('adjust-right') : pe < 200 && L.classList.add('adjust-left'),
            L.style.setProperty('--dropdown-top', `${ae.bottom}px`),
            L.style.setProperty('--available-space-bottom', `${ce}px`),
            L.style.setProperty('--available-space-top', `${be}px`),
            Q && Q.style.setProperty('--dropdown-safe-area', '0px'));
        };
        if (t && F.current) {
          F.current.dataset.debugAdjustLogged ||
            (console.log('[dropdown-debug] adjust run - port-list (currency)'),
            (F.current.dataset.debugAdjustLogged = '1'));
          const L = F.current.previousElementSibling;
          (c(F.current, L),
            console.log('[dropdown-debug] vars on element', {
              onElement: {
                '--available-space-bottom':
                  F.current.style.getPropertyValue('--available-space-bottom') || null,
                '--dropdown-top': F.current.style.getPropertyValue('--dropdown-top') || null,
              },
              onParent: {
                '--available-space-bottom':
                  ((ne = F.current.parentElement) == null
                    ? void 0
                    : ne.style.getPropertyValue('--available-space-bottom')) || null,
                '--dropdown-top':
                  ((oe = F.current.parentElement) == null
                    ? void 0
                    : oe.style.getPropertyValue('--dropdown-top')) || null,
              },
            }));
        }
        if (J && C.current) {
          C.current.dataset.debugAdjustLogged ||
            (console.log('[dropdown-debug] adjust run - port-list (timing)'),
            (C.current.dataset.debugAdjustLogged = '1'));
          const L = C.current.previousElementSibling;
          (c(C.current, L),
            console.log('[dropdown-debug] vars on element', {
              onElement: {
                '--available-space-bottom':
                  C.current.style.getPropertyValue('--available-space-bottom') || null,
                '--dropdown-top': C.current.style.getPropertyValue('--dropdown-top') || null,
              },
              onParent: {
                '--available-space-bottom':
                  ((q = C.current.parentElement) == null
                    ? void 0
                    : q.style.getPropertyValue('--available-space-bottom')) || null,
                '--dropdown-top':
                  ((v = C.current.parentElement) == null
                    ? void 0
                    : v.style.getPropertyValue('--dropdown-top')) || null,
              },
            }));
        }
        if (m && j.current) {
          j.current.dataset.debugAdjustLogged ||
            (console.log('[dropdown-debug] adjust run - port-list (requirements)'),
            (j.current.dataset.debugAdjustLogged = '1'));
          const L = j.current.previousElementSibling;
          (c(j.current, L),
            console.log('[dropdown-debug] vars on element', {
              onElement: {
                '--available-space-bottom':
                  j.current.style.getPropertyValue('--available-space-bottom') || null,
                '--dropdown-top': j.current.style.getPropertyValue('--dropdown-top') || null,
              },
              onParent: {
                '--available-space-bottom':
                  ((E = j.current.parentElement) == null
                    ? void 0
                    : E.style.getPropertyValue('--available-space-bottom')) || null,
                '--dropdown-top':
                  ((W = j.current.parentElement) == null
                    ? void 0
                    : W.style.getPropertyValue('--dropdown-top')) || null,
              },
            }));
        }
        const D = () => {
          if (t && F.current) {
            const L = F.current.previousElementSibling;
            c(F.current, L);
          }
          if (J && C.current) {
            const L = C.current.previousElementSibling;
            c(C.current, L);
          }
          if (m && j.current) {
            const L = j.current.previousElementSibling;
            c(j.current, L);
          }
        };
        (window.addEventListener('resize', D, { passive: !0 }),
          window.addEventListener('scroll', D, { passive: !0, capture: !0 }));
        const R =
            t && F.current
              ? Fe({
                  listEl: F.current,
                  triggerEl: F.current.previousElementSibling,
                  containerEl: F.current.closest('.quote-form-container'),
                  type: 'port-list',
                })
              : () => {},
          V =
            J && C.current
              ? Fe({
                  listEl: C.current,
                  triggerEl: C.current.previousElementSibling,
                  containerEl: C.current.closest('.quote-form-container'),
                  type: 'port-list',
                })
              : () => {},
          ee =
            m && j.current
              ? Fe({
                  listEl: j.current,
                  triggerEl: j.current.previousElementSibling,
                  containerEl: j.current.closest('.quote-form-container'),
                  type: 'port-list',
                })
              : () => {};
        return () => {
          (window.removeEventListener('resize', D), window.removeEventListener('scroll', D, !0));
          const L = document.querySelector('.quote-form-container');
          (L && L.style.setProperty('--dropdown-safe-area', '0px'), R(), V(), ee());
        };
      }, [t, J, m]),
      e.jsxs(ze, {
        isVisible: g === 5,
        stepNumber: 5,
        title: f('step5Title', 'Tell us about your goods'),
        emoji: '📝',
        children: [
          e.jsx('div', {
            style: {
              display: 'grid',
              gridTemplateColumns: 'repeat(3, minmax(0, 1fr))',
              alignItems: 'center',
              gap: '4px',
              background: 'rgba(243, 244, 246, 0.8)',
              borderRadius: '9999px',
              padding: '4px',
              border: '1px solid rgba(229, 231, 235, 0.7)',
              width: 'calc(100% - 16px)',
              paddingLeft: '8px',
              paddingRight: '8px',
              maxWidth: '640px',
              margin: '0 0 0.75rem 0',
            },
            children: [
              { n: 1, label: p('tabValue', 'Value') },
              { n: 2, label: p('tabTiming', 'Timing') },
              { n: 3, label: p('tabDetails', 'Details') },
            ].map(({ n: c, label: D }) => {
              const R = y === c;
              return e.jsxs(
                'button',
                {
                  type: 'button',
                  role: 'tab',
                  'aria-selected': R,
                  onClick: () => M(c),
                  style: {
                    width: '100%',
                    minWidth: 0,
                    padding: '6px 8px',
                    fontSize: '0.85rem',
                    borderRadius: '9999px',
                    background: R ? '#ffffff' : 'transparent',
                    color: R ? '#111827' : '#6b7280',
                    boxShadow: R ? '0 1px 3px rgba(0,0,0,0.08)' : 'none',
                    border: R ? '1px solid rgba(0,0,0,0.05)' : '1px solid transparent',
                    display: 'inline-flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '0.4rem',
                    transition: 'all 0.2s ease',
                  },
                  children: [
                    e.jsx('span', {
                      style: {
                        width: '16px',
                        height: '16px',
                        borderRadius: '50%',
                        background:
                          y >= c ? 'linear-gradient(135deg, #10b981, #059669)' : '#e5e7eb',
                        display: 'inline-flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: '#fff',
                        fontSize: '0.7rem',
                      },
                      children: y > c ? '✓' : c,
                    }),
                    e.jsx('span', {
                      style: { whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' },
                      children: D,
                    }),
                  ],
                },
                c
              );
            }),
          }),
          e.jsx('div', {
            style: {
              height: '1px',
              background: 'linear-gradient(90deg, transparent, #e5e7eb, transparent)',
              margin: '0.75rem 0 1rem',
            },
          }),
          y === 1 &&
            e.jsxs('div', {
              className: 'goods-value-phase animate-slide-in',
              style: { width: 'calc(100% - 16px)', padding: '0 8px' },
              children: [
                e.jsxs('div', {
                  className: 'phase-header',
                  children: [
                    e.jsxs('h3', {
                      className: 'phase-header-title',
                      style: {
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        marginBottom: '0.25rem',
                      },
                      children: [
                        e.jsx('span', { className: 'step-indicator', children: '1' }),
                        f('goodsValueDeclaration', 'Goods Value & Declaration'),
                      ],
                    }),
                    e.jsx('p', {
                      className: 'phase-header-subtitle',
                      children: f(
                        'goodsValueDescription',
                        'Provide the commercial value for customs declaration and insurance purposes'
                      ),
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'form-control',
                  children: [
                    e.jsx('label', {
                      htmlFor: 'goodsValue',
                      className: 'label-text',
                      children: f('commercialValue', 'Commercial value of goods'),
                    }),
                    e.jsxs('div', {
                      className: 'flex items-center gap-2',
                      children: [
                        e.jsx('input', {
                          type: 'number',
                          name: 'goodsValue',
                          id: 'goodsValue',
                          placeholder: '1000',
                          value: a.goodsValue,
                          onChange: A,
                          className: `input glassmorphism ${b.goodsValue === !1 ? 'input-error' : ''} flex-grow`,
                          style: {
                            minWidth: '0',
                            background: 'rgba(255, 255, 255, 0.95)',
                            backdropFilter: 'blur(16px)',
                            border: '1px solid rgba(255, 255, 255, 0.2)',
                            borderRadius: '12px',
                            fontSize: '0.9rem',
                            padding: '0.75rem 1rem',
                            transition: 'all 0.3s ease',
                          },
                        }),
                        e.jsxs('div', {
                          className: 'currency-select',
                          style: { minWidth: '120px', margin: 0, position: 'relative' },
                          children: [
                            e.jsx('div', {
                              className: 'search-input-wrapper',
                              style: { position: 'relative' },
                              children: e.jsx('input', {
                                type: 'text',
                                value: N,
                                readOnly: !0,
                                onClick: () => u(!0),
                                onFocus: () => u(!0),
                                className: 'input glassmorphism search-input',
                                style: { cursor: 'pointer' },
                              }),
                            }),
                            e.jsx('div', {
                              ref: F,
                              className: `port-list ${t ? 'show' : ''}`,
                              style: { zIndex: 1e3 },
                              children: K.map((c) =>
                                e.jsxs(
                                  'div',
                                  {
                                    className: `port-option ${a.goodsCurrency === c.code ? 'selected' : ''}`,
                                    onClick: () => P(c.code),
                                    children: [
                                      e.jsx('span', { className: 'port-icon', children: c.flag }),
                                      e.jsxs('div', {
                                        className: 'port-info',
                                        children: [
                                          e.jsx('span', {
                                            className: 'port-name',
                                            children: c.code,
                                          }),
                                          e.jsx('span', {
                                            className: 'port-region',
                                            children: c.name,
                                          }),
                                        ],
                                      }),
                                    ],
                                  },
                                  c.code
                                )
                              ),
                            }),
                          ],
                        }),
                      ],
                    }),
                    b.goodsValue === !0 && e.jsx(se, { className: 'check-icon' }),
                    e.jsxs('div', {
                      className: 'help-text',
                      style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                      children: [
                        '💡',
                        ' ',
                        f(
                          'goodsValueHelp',
                          'This value is used for customs declaration and insurance calculations'
                        ),
                      ],
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'form-control',
                  children: [
                    e.jsxs('label', {
                      className: 'checkbox-label',
                      children: [
                        e.jsx('input', {
                          type: 'checkbox',
                          name: 'isPersonalOrHazardous',
                          checked: a.isPersonalOrHazardous,
                          onChange: (c) => z({ ...a, isPersonalOrHazardous: c.target.checked }),
                        }),
                        e.jsx('span', {
                          children: f(
                            'personalOrHazardous',
                            'Personal effects or contains hazardous/restricted materials'
                          ),
                        }),
                      ],
                    }),
                    e.jsxs('div', {
                      className: 'help-text',
                      style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                      children: [
                        '⚠️',
                        ' ',
                        f(
                          'personalHazardousHelp',
                          'Check this if shipping personal belongings or goods requiring special handling'
                        ),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          y === 2 &&
            e.jsxs('div', {
              className: 'shipment-timing-phase animate-slide-in',
              style: { width: 'calc(100% - 16px)', padding: '0 8px' },
              children: [
                e.jsxs('div', {
                  className: 'phase-header',
                  children: [
                    e.jsxs('h3', {
                      className: 'phase-header-title',
                      style: {
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        marginBottom: '0.25rem',
                      },
                      children: [
                        e.jsx('span', { className: 'step-indicator', children: '2' }),
                        f('shipmentReadiness', 'Shipment Readiness'),
                      ],
                    }),
                    e.jsx('p', {
                      className: 'phase-header-subtitle',
                      children: f(
                        'shipmentTimingDescription',
                        'Help us plan your shipment timeline and provide accurate rates'
                      ),
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'form-control',
                  children: [
                    e.jsx('label', {
                      htmlFor: 'areGoodsReady',
                      className: 'label-text',
                      children: f(
                        'goodsReadyQuestion',
                        'When will your goods be ready for pickup?'
                      ),
                    }),
                    e.jsxs('div', {
                      className: 'timing-select',
                      style: { position: 'relative' },
                      children: [
                        e.jsx('div', {
                          className: 'search-input-wrapper',
                          style: { position: 'relative' },
                          children: e.jsx('input', {
                            type: 'text',
                            value: O || f('selectOption', 'Select an option...'),
                            readOnly: !0,
                            onClick: () => x(!0),
                            onFocus: () => x(!0),
                            className: `input glassmorphism search-input ${a.areGoodsReady ? '' : 'input-pending'}`,
                            style: { cursor: 'pointer' },
                          }),
                        }),
                        e.jsx('div', {
                          ref: C,
                          className: `port-list ${J ? 'show' : ''}`,
                          style: { zIndex: 1e3 },
                          children: S.map((c) =>
                            e.jsxs(
                              'div',
                              {
                                className: `port-option ${a.areGoodsReady === c.code ? 'selected' : ''}`,
                                onClick: () => k(c.code),
                                children: [
                                  e.jsx('span', { className: 'port-icon', children: c.icon }),
                                  e.jsx('div', {
                                    className: 'port-info',
                                    children: e.jsxs('span', {
                                      className: 'port-name',
                                      children: [
                                        c.code === 'yes' &&
                                          i(
                                            f(
                                              'readyNow',
                                              'Ready now - goods are available for immediate pickup'
                                            )
                                          ),
                                        c.code === 'no_in_1_week' &&
                                          i(
                                            f('readyIn1Week', 'Within 1 week - currently preparing')
                                          ),
                                        c.code === 'no_in_2_weeks' &&
                                          i(
                                            f(
                                              'readyIn2Weeks',
                                              'Within 2 weeks - production in progress'
                                            )
                                          ),
                                        c.code === 'no_in_1_month' &&
                                          i(f('readyIn1Month', 'Within 1 month - planning ahead')),
                                        c.code === 'no_date_set' &&
                                          i(f('dateNotSet', 'Date not determined yet')),
                                      ],
                                    }),
                                  }),
                                ],
                              },
                              c.code
                            )
                          ),
                        }),
                      ],
                    }),
                    a.areGoodsReady && e.jsx(se, { className: 'check-icon' }),
                    e.jsxs('div', {
                      className: 'help-text',
                      style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                      children: [
                        '⏰ ',
                        f(
                          'timingHelp',
                          'Accurate timing helps us provide the most competitive rates'
                        ),
                      ],
                    }),
                  ],
                }),
              ],
            }),
          y === 3 &&
            e.jsxs('div', {
              className: 'additional-info-phase animate-slide-in',
              style: { width: 'calc(100% - 16px)', padding: '0 8px' },
              children: [
                e.jsxs('div', {
                  className: 'phase-header',
                  children: [
                    e.jsxs('h3', {
                      className: 'phase-header-title',
                      style: {
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        marginBottom: '0.25rem',
                      },
                      children: [
                        e.jsx('span', { className: 'step-indicator', children: '3' }),
                        f('additionalDetails', 'Additional Details'),
                      ],
                    }),
                    e.jsx('p', {
                      className: 'phase-header-subtitle',
                      children: f(
                        'additionalDetailsDescription',
                        'Provide any special requirements or additional information'
                      ),
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'form-control',
                  children: [
                    e.jsx('label', {
                      htmlFor: 'goodsDescription',
                      className: 'label-text',
                      children: f('goodsDescription', 'Brief description of goods'),
                    }),
                    e.jsx('input', {
                      type: 'text',
                      name: 'goodsDescription',
                      id: 'goodsDescription',
                      placeholder: f(
                        'goodsDescriptionPlaceholder',
                        'e.g., Electronics, Furniture, Clothing, Machinery...'
                      ),
                      value: a.goodsDescription || '',
                      onChange: A,
                      className: 'input glassmorphism',
                    }),
                    e.jsxs('div', {
                      className: 'help-text',
                      style: { fontSize: '0.8rem', color: '#6b7280', marginTop: '0.5rem' },
                      children: [
                        '💡 ',
                        f(
                          'goodsDescriptionHelp',
                          'Helps us ensure proper handling and documentation'
                        ),
                      ],
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'form-control',
                  children: [
                    e.jsx('label', {
                      htmlFor: 'specialRequirements',
                      className: 'label-text',
                      children: f('specialRequirements', 'Special handling requirements'),
                    }),
                    e.jsxs('div', {
                      className: 'requirements-select',
                      style: { position: 'relative' },
                      children: [
                        e.jsx('div', {
                          className: 'search-input-wrapper',
                          style: { position: 'relative' },
                          children: e.jsx('input', {
                            type: 'text',
                            value: h || f('noSpecialRequirements', 'No special requirements'),
                            readOnly: !0,
                            onClick: () => I(!0),
                            onFocus: () => I(!0),
                            className: 'input glassmorphism search-input',
                            style: { cursor: 'pointer' },
                          }),
                        }),
                        e.jsx('div', {
                          ref: j,
                          className: `port-list ${m ? 'show' : ''}`,
                          style: { zIndex: 1e3 },
                          children: B.map((c) =>
                            e.jsxs(
                              'div',
                              {
                                className: `port-option ${a.specialRequirements === c.code ? 'selected' : ''}`,
                                onClick: () => w(c.code),
                                children: [
                                  e.jsx('span', { className: 'port-icon', children: c.icon }),
                                  e.jsx('div', {
                                    className: 'port-info',
                                    children: e.jsxs('span', {
                                      className: 'port-name',
                                      children: [
                                        c.code === '' &&
                                          f('noSpecialRequirements', 'No special requirements'),
                                        c.code === 'fragile' &&
                                          i(f('fragileGoods', 'Fragile goods - handle with care')),
                                        c.code === 'temperature' &&
                                          i(f('temperatureControlled', 'Temperature controlled')),
                                        c.code === 'urgent' &&
                                          i(f('urgentTimeSensitive', 'Urgent/time-sensitive')),
                                        c.code === 'insurance' &&
                                          i(
                                            f('highValueInsurance', 'High-value insurance required')
                                          ),
                                        c.code === 'other' &&
                                          i(f('otherSpecify', 'Other (please specify)')),
                                      ],
                                    }),
                                  }),
                                ],
                              },
                              c.code
                            )
                          ),
                        }),
                      ],
                    }),
                  ],
                }),
                e.jsxs('div', {
                  className: 'info-banner',
                  style: {
                    marginTop: '2rem',
                    padding: '1rem',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    border: '1px solid rgba(59, 130, 246, 0.2)',
                    borderRadius: '0.5rem',
                    display: 'flex',
                    alignItems: 'flex-start',
                    gap: '0.75rem',
                  },
                  children: [
                    e.jsx(Ne, {
                      size: 20,
                      style: { color: '#3b82f6', marginTop: '0.1rem', flexShrink: 0 },
                    }),
                    e.jsxs('div', {
                      style: { fontSize: '0.9rem', color: '#1f2937' },
                      children: [
                        e.jsx('strong', {
                          style: { color: '#3b82f6' },
                          children: f('rateValidityTitle', 'Rate Validity Notice:'),
                        }),
                        e.jsx('br', {}),
                        f(
                          'rateValidityText',
                          'Quoted rates are valid until the expiry date shown on each quote. If your goods are not ready for pickup by this date, rates may be subject to change based on current market conditions.'
                        ),
                      ],
                    }),
                  ],
                }),
              ],
            }),
        ],
      })
    );
  },
  Ga = r.memo(Da),
  Fa = ({ submissionId: g, setSubmissionId: a, showToast: z }) => {
    var T;
    const {
        currentStep: b,
        userLang: n,
        formData: p,
        setFormData: A,
        setFieldValid: y,
        setCurrentStep: M,
        getText: H,
      } = Pe(),
      N = {
        confirmationTitle: H('confirmationTitle', 'Quote Request Confirmed'),
        confirmationSubtitle: H(
          'confirmationSubtitle',
          'Your request has been successfully submitted'
        ),
        referenceNumber: 'Reference Number',
        yourRequest: 'Your Request Summary',
        shipmentDetails: 'Shipment Details',
        contactDetails: 'Contact Details',
        nextSteps: 'Next Steps',
        step1: 'Request received',
        step1Time: 'Now',
        step2: 'Analysis & pricing',
        step2Time: 'Within 4 business hours',
        step3: 'Sales contact',
        step3Time: 'Within 24 hours',
        step4: 'Detailed quote',
        step4Time: 'Within 48 hours',
        mode: 'Mode',
        shipment: 'shipment',
        shipments: 'shipments',
        aboutSino: 'About SINO Shipping & FS International',
        aboutSubtitle: 'Your request is in expert hands',
        sinoDescription:
          'SINO Shipping, launched in 2018 by French entrepreneurs, became part of FS International in 2021. This partnership combines Western customer-focused approach with deep Chinese local expertise.',
        fsDescription:
          'FS International, founded in Hong Kong in September 1989, is one of the most trusted names in global logistics and transportation in the region.',
        ourExpertise: 'Our Expertise',
        expertise1: 'Maritime, air, rail & multimodal transport',
        expertise2: 'E-commerce solutions (Amazon FBA, dropshipping)',
        expertise3: 'Sourcing & quality control',
        expertise4: 'Complete logistics services',
        impactInNumbers: 'Our Impact in Numbers',
        impactDescription:
          'Delivering excellence across China with proven results and trusted service',
        satisfiedCustomers: 'Satisfied Customers',
        customerSatisfaction: 'Customer Satisfaction',
        teamMembers: 'Team Members',
        oceanVolume: 'TEU Ocean Volume',
        officesInChina: 'Offices in China',
        cfsFacilities: 'M² CFS Facilities',
        globalNetwork: 'Global Network',
        networkDescription: 'Strategic offices in key logistics hubs:',
        chinaOffices: 'China: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hong Kong: 1/F, Block C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Websites',
        needHelp: 'Need Help?',
        community: 'Community',
        contactEmail: 'Contact email',
        available: 'available',
        businessHours: '9am-6pm (China time)',
        actions: 'Quick Actions',
        newRequest: 'Make another request',
        thankYouTitle: 'Thank you for your trust!',
        thankYouMessage:
          'Your request will be handled with the utmost care by our international transport experts.',
      },
      l = {
        confirmationTitle: 'Angebotsanfrage Bestätigt',
        confirmationSubtitle: 'Ihre Anfrage wurde erfolgreich übermittelt',
        referenceNumber: 'Referenznummer',
        yourRequest: 'Ihre Anfragezusammenfassung',
        shipmentDetails: 'Sendungsdetails',
        contactDetails: 'Kontaktdaten',
        nextSteps: 'Nächste Schritte',
        step1: 'Anfrage erhalten',
        step1Time: 'Jetzt',
        step2: 'Analyse und Kalkulation',
        step2Time: 'Innerhalb von 4 Geschäftsstunden',
        step3: 'Vertriebskontakt',
        step3Time: 'Innerhalb von 24 Stunden',
        step4: 'Detailliertes Angebot',
        step4Time: 'Innerhalb von 48 Stunden',
        mode: 'Modus',
        shipment: 'Sendung',
        shipments: 'Sendungen',
        aboutSino: 'Über SINO Shipping & FS International',
        aboutSubtitle: 'Ihre Anfrage ist in Expertenhänden',
        sinoDescription:
          'SINO Shipping, 2018 von französischen Unternehmern gegründet, wurde 2021 Teil von FS International. Diese Partnerschaft verbindet einen westlich kundenorientierten Ansatz mit tiefgehender lokaler China-Expertise.',
        fsDescription:
          'FS International, gegründet in Hongkong im September 1989, ist einer der vertrauenswürdigsten Namen für globale Logistik und Transport in der Region.',
        ourExpertise: 'Unsere Expertise',
        expertise1: 'See-, Luft-, Bahn- und multimodaler Transport',
        expertise2: 'E‑Commerce‑Lösungen (Amazon FBA, Dropshipping)',
        expertise3: 'Beschaffung & Qualitätskontrolle',
        expertise4: 'Umfassende Logistikservices',
        impactInNumbers: 'Unser Einfluss in Zahlen',
        impactDescription:
          'Exzellenz in China mit nachweisbaren Ergebnissen und verlässlichem Service',
        satisfiedCustomers: 'Zufriedene Kunden',
        customerSatisfaction: 'Kundenzufriedenheit',
        teamMembers: 'Teammitglieder',
        oceanVolume: 'TEU Seefrachtvolumen',
        officesInChina: 'Büros in China',
        cfsFacilities: 'm² CFS‑Anlagen',
        globalNetwork: 'Globales Netzwerk',
        networkDescription: 'Strategische Büros in wichtigen Logistikhubs:',
        chinaOffices: 'China: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hongkong: 1. Stock, Block C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Websites',
        needHelp: 'Benötigen Sie Hilfe?',
        community: 'Community',
        contactEmail: 'Kontakt‑E‑Mail',
        available: 'erreichbar',
        businessHours: '9–18 Uhr (China‑Zeit)',
        actions: 'Schnellaktionen',
        newRequest: 'Weitere Anfrage stellen',
        thankYouTitle: 'Vielen Dank für Ihr Vertrauen!',
        thankYouMessage:
          'Ihre Anfrage wird von unseren internationalen Transportexperten mit größter Sorgfalt bearbeitet.',
      },
      t = {
        confirmationTitle: 'Solicitud de Cotización Confirmada',
        confirmationSubtitle: 'Su solicitud ha sido enviada exitosamente',
        referenceNumber: 'Número de Referencia',
        yourRequest: 'Resumen de Su Solicitud',
        shipmentDetails: 'Detalles del Envío',
        contactDetails: 'Detalles de Contacto',
        nextSteps: 'Próximos Pasos',
        step1: 'Solicitud recibida',
        step1Time: 'Ahora',
        step2: 'Análisis y cotización',
        step2Time: 'En 4 horas laborales',
        step3: 'Contacto comercial',
        step3Time: 'En 24 horas',
        step4: 'Cotización detallada',
        step4Time: 'En 48 horas',
        mode: 'Modo',
        shipment: 'envío',
        shipments: 'envíos',
        aboutSino: 'Acerca de SINO Shipping & FS International',
        aboutSubtitle: 'Su solicitud está en manos expertas',
        sinoDescription:
          'SINO Shipping, lanzado en 2018 por emprendedores franceses, se convirtió en parte de FS International en 2021. Esta asociación combina el enfoque occidental centrado en el cliente con una profunda experiencia local en China.',
        fsDescription:
          'FS International, fundada en Hong Kong en septiembre de 1989, es uno de los nombres más confiables en logística y transporte global de la región.',
        ourExpertise: 'Nuestra Experiencia',
        expertise1: 'Transporte marítimo, aéreo, ferroviario y multimodal',
        expertise2: 'Soluciones de comercio electrónico (Amazon FBA, dropshipping)',
        expertise3: 'Abastecimiento y control de calidad',
        expertise4: 'Servicios logísticos completos',
        impactInNumbers: 'Nuestro Impacto en Números',
        impactDescription:
          'Ofreciendo excelencia en China con resultados probados y servicio confiable',
        satisfiedCustomers: 'Clientes Satisfechos',
        customerSatisfaction: 'Satisfacción del Cliente',
        teamMembers: 'Miembros del Equipo',
        oceanVolume: 'Volumen Oceánico TEU',
        officesInChina: 'Oficinas en China',
        cfsFacilities: 'Instalaciones CFS M²',
        globalNetwork: 'Red Global',
        networkDescription: 'Oficinas estratégicas en centros logísticos clave:',
        chinaOffices: 'China: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hong Kong: 1.º piso, Bloque C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Sitios web',
        needHelp: '¿Necesita Ayuda?',
        community: 'Comunidad',
        contactEmail: 'Correo electrónico de contacto',
        available: 'disponible',
        businessHours: '9:00–18:00 (hora de China)',
        actions: 'Acciones Rápidas',
        newRequest: 'Hacer otra solicitud',
        thankYouTitle: '¡Gracias por su confianza!',
        thankYouMessage:
          'Su solicitud será manejada con el máximo cuidado por nuestros expertos en transporte internacional.',
      },
      u = {
        confirmationTitle: 'Richiesta di Preventivo Confermata',
        confirmationSubtitle: 'La vostra richiesta è stata inviata con successo',
        referenceNumber: 'Numero di Riferimento',
        yourRequest: 'Riepilogo della Vostra Richiesta',
        shipmentDetails: 'Dettagli della Spedizione',
        contactDetails: 'Dettagli di Contatto',
        nextSteps: 'Prossimi Passi',
        step1: 'Richiesta ricevuta',
        step1Time: 'Ora',
        step2: 'Analisi e quotazione',
        step2Time: 'Entro 4 ore lavorative',
        step3: 'Contatto commerciale',
        step3Time: 'Entro 24 ore',
        step4: 'Preventivo dettagliato',
        step4Time: 'Entro 48 ore',
        mode: 'Modalità',
        shipment: 'spedizione',
        shipments: 'spedizioni',
        aboutSino: 'Su SINO Shipping & FS International',
        aboutSubtitle: 'La vostra richiesta è in mani esperte',
        sinoDescription:
          'SINO Shipping, lanciata nel 2018 da imprenditori francesi, è diventata parte di FS International nel 2021. Questa partnership combina l’approccio occidentale orientato al cliente con una profonda expertise locale in Cina.',
        fsDescription:
          'FS International, fondata a Hong Kong nel settembre 1989, è uno dei nomi più affidabili nella logistica e nel trasporto globale nella regione.',
        ourExpertise: 'La Nostra Esperienza',
        expertise1: 'Trasporto marittimo, aereo, ferroviario e multimodale',
        expertise2: 'Soluzioni e‑commerce (Amazon FBA, dropshipping)',
        expertise3: 'Sourcing e controllo qualità',
        expertise4: 'Servizi logistici completi',
        impactInNumbers: 'Il Nostro Impatto in Numeri',
        impactDescription:
          'Offrendo eccellenza in Cina con risultati comprovati e servizio affidabile',
        satisfiedCustomers: 'Clienti Soddisfatti',
        customerSatisfaction: 'Soddisfazione del Cliente',
        teamMembers: 'Membri del Team',
        oceanVolume: 'Volume Marittimo TEU',
        officesInChina: 'Uffici in Cina',
        cfsFacilities: 'M² Strutture CFS',
        globalNetwork: 'Rete Globale',
        networkDescription: 'Uffici strategici nei principali hub logistici:',
        chinaOffices: 'Cina: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hong Kong: 1º piano, Blocco C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Siti web',
        needHelp: 'Serve Aiuto?',
        community: 'Comunità',
        contactEmail: 'Email di contatto',
        available: 'disponibile',
        businessHours: '9:00–18:00 (ora della Cina)',
        actions: 'Azioni Rapide',
        newRequest: "Fare un'altra richiesta",
        thankYouTitle: 'Grazie per la vostra fiducia!',
        thankYouMessage:
          'La vostra richiesta sarà gestita con la massima cura dai nostri esperti di trasporto internazionale.',
      },
      P = {
        confirmationTitle: 'Offerteaanvraag Bevestigd',
        confirmationSubtitle: 'Uw aanvraag is succesvol verzonden',
        referenceNumber: 'Referentienummer',
        yourRequest: 'Samenvatting van Uw Aanvraag',
        shipmentDetails: 'Zendingdetails',
        contactDetails: 'Contactgegevens',
        nextSteps: 'Volgende Stappen',
        step1: 'Aanvraag ontvangen',
        step1Time: 'Nu',
        step2: 'Analyse en prijsopgave',
        step2Time: 'Binnen 4 werkuren',
        step3: 'Salescontact',
        step3Time: 'Binnen 24 uur',
        step4: 'Gedetailleerde offerte',
        step4Time: 'Binnen 48 uur',
        mode: 'Vervoerswijze',
        shipment: 'zending',
        shipments: 'zendingen',
        aboutSino: 'Over SINO Shipping & FS International',
        aboutSubtitle: 'Uw aanvraag wordt afgehandeld door experts',
        sinoDescription:
          'SINO Shipping werd opgericht in 2018 door Franse ondernemers en werd in 2021 onderdeel van FS International. Deze samenwerking combineert een westerse klantgerichte benadering met diepe lokale expertise in China.',
        fsDescription:
          'FS International werd opgericht in september 1989 in Hongkong en is een van de meest vertrouwde namen voor wereldwijde logistiek en transport in de regio.',
        ourExpertise: 'Onze Expertise',
        expertise1: 'Zee-, lucht-, spoor- en multimodaal transport',
        expertise2: 'E‑commerceoplossingen (Amazon FBA, dropshipping)',
        expertise3: 'Sourcing en kwaliteitscontrole',
        expertise4: 'Volledige logistieke diensten',
        impactInNumbers: 'Onze Impact in Cijfers',
        impactDescription:
          'Excellentie leveren in China met bewezen resultaten en betrouwbare service',
        satisfiedCustomers: 'Tevreden Klanten',
        customerSatisfaction: 'Klanttevredenheid',
        teamMembers: 'Teamleden',
        oceanVolume: 'TEU Zeevracht Volume',
        officesInChina: 'Kantoren in China',
        cfsFacilities: 'M² CFS Faciliteiten',
        globalNetwork: 'Wereldwijd Netwerk',
        networkDescription:
          'Met strategische kantoren in China en Hongkong zijn we ideaal gepositioneerd om uw zendingen efficiënt af te handelen.',
        chinaOffices: 'China: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hongkong: 1e verdieping, Blok C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Websites',
        needHelp: 'Hulp Nodig?',
        community: 'Community',
        contactEmail: 'Contact e‑mail',
        available: 'bereikbaar',
        businessHours: '09:00–18:00 (Chinese tijd)',
        actions: 'Snelle Acties',
        newRequest: 'Nieuwe Aanvraag Indienen',
        thankYouTitle: 'Dank u voor uw vertrouwen!',
        thankYouMessage:
          'Uw verzoek wordt met de grootste zorg behandeld door onze internationale transportexperts.',
      },
      f = {
        confirmationTitle: '报价申请已确认',
        confirmationSubtitle: '您的申请已成功提交',
        referenceNumber: '参考编号',
        yourRequest: '您的申请摘要',
        shipmentDetails: '货运详情',
        contactDetails: '联系方式',
        nextSteps: '后续步骤',
        step1: '申请已接收',
        step1Time: '现在',
        step2: '分析与报价',
        step2Time: '4个工作小时内',
        step3: '商务联系',
        step3Time: '24小时内',
        step4: '详细报价',
        step4Time: '48小时内',
        mode: '运输方式',
        shipment: '货运',
        shipments: '货运',
        aboutSino: '关于SINO Shipping & FS International',
        aboutSubtitle: '您的申请由专家处理',
        sinoDescription:
          'SINO Shipping由法国企业家于2018年创立，2021年成为FS International的一部分。这种合作结合了西方以客户为中心的方法和深厚的中国本地专业知识。',
        fsDescription:
          'FS International成立于1989年9月在香港，是该地区全球物流和运输最值得信赖的品牌之一。',
        ourExpertise: '我们的专业能力',
        expertise1: '海运、空运、铁路和多式联运',
        expertise2: '电子商务解决方案（亚马逊FBA、代发货）',
        expertise3: '采购和质量控制',
        expertise4: '完整的物流服务',
        impactInNumbers: '我们的数字影响力',
        impactDescription: '在中国提供卓越服务，拥有经过验证的结果和可信赖的服务',
        satisfiedCustomers: '满意客户',
        customerSatisfaction: '客户满意度',
        teamMembers: '团队成员',
        oceanVolume: 'TEU海运量',
        officesInChina: '中国办公室',
        cfsFacilities: 'CFS设施平方米',
        globalNetwork: '全球网络',
        networkDescription: '在主要物流枢纽的战略办事处：',
        chinaOffices: '中国：上海、深圳、广州、宁波、天津、青岛、厦门',
        hkOffice: '香港：北角华森道8号 Sea View Estate C座 1楼',
        websites: '网站',
        needHelp: '需要帮助?',
        community: '社区',
        contactEmail: '联系邮箱',
        available: '在线时间',
        businessHours: '9:00–18:00（中国时间）',
        actions: '快速操作',
        newRequest: '提交新申请',
        thankYouTitle: '感谢您的信任！',
        thankYouMessage: '您的请求将由我们的国际运输专家精心处理。',
      },
      O = {
        confirmationTitle: 'تأكيد طلب عرض السعر',
        confirmationSubtitle: 'تم إرسال طلبكم بنجاح',
        referenceNumber: 'رقم المرجع',
        yourRequest: 'ملخص طلبكم',
        shipmentDetails: 'تفاصيل الشحنة',
        contactDetails: 'تفاصيل الاتصال',
        nextSteps: 'الخطوات التالية',
        step1: 'تم استلام الطلب',
        step1Time: 'الآن',
        step2: 'التحليل والتسعير',
        step2Time: 'خلال 4 ساعات عمل',
        step3: 'التواصل التجاري',
        step3Time: 'خلال 24 ساعة',
        step4: 'عرض سعر مفصل',
        step4Time: 'خلال 48 ساعة',
        mode: 'طريقة النقل',
        shipment: 'شحنة',
        shipments: 'شحنات',
        aboutSino: 'حول SINO Shipping & FS International',
        aboutSubtitle: 'طلبكم بيد خبراء',
        sinoDescription:
          'تأسست SINO Shipping عام 2018 على يد رواد أعمال فرنسيين، وأصبحت جزءًا من FS International في 2021. يجمع هذا التعاون بين نهج غربي متمحور حول العميل وخبرة محلية صينية عميقة.',
        fsDescription:
          'تأسست FS International في هونغ كونغ في سبتمبر 1989، وهي من الأسماء الأكثر موثوقية في مجال الخدمات اللوجستية والنقل العالمي في المنطقة.',
        ourExpertise: 'خبرتنا',
        expertise1: 'الشحن البحري والجوي والسككي والمتعدد الوسائط',
        expertise2: 'حلول التجارة الإلكترونية (Amazon FBA، دروبشيبينغ)',
        expertise3: 'التوريد ومراقبة الجودة',
        expertise4: 'خدمات لوجستية متكاملة',
        impactInNumbers: 'تأثيرنا بالأرقام',
        impactDescription: 'تقديم التميز في الصين بنتائج مثبتة وخدمة موثوقة',
        satisfiedCustomers: 'عملاء راضون',
        customerSatisfaction: 'رضا العملاء',
        teamMembers: 'أعضاء الفريق',
        oceanVolume: 'حجم الشحن البحري TEU',
        officesInChina: 'مكاتب في الصين',
        cfsFacilities: 'مرافق CFS بالمتر المربع',
        globalNetwork: 'الشبكة العالمية',
        networkDescription: 'مكاتب استراتيجية في أهم مراكز الخدمات اللوجستية:',
        chinaOffices: 'الصين: شنغهاي، شينزين، غوانزو، نينغبو، تيانجين، تشينغداو، شيامن',
        hkOffice: 'هونغ كونغ: الطابق الأول، المبنى C، Sea View Estate، 8 Watson Road، نورث بوينت',
        websites: 'المواقع',
        needHelp: 'تحتاجون مساعدة؟',
        community: 'المجتمع',
        contactEmail: 'البريد الإلكتروني للتواصل',
        available: 'ساعات العمل',
        businessHours: '9:00–18:00 (بتوقيت الصين)',
        actions: 'إجراءات سريعة',
        newRequest: 'تقديم طلب جديد',
        thankYouTitle: 'شكراً لثقتكم!',
        thankYouMessage:
          'سيتم التعامل مع طلبكم بأقصى درجات العناية من قبل خبراء النقل الدولي لدينا.',
      },
      _ = {
        confirmationTitle: 'Solicitação de Cotação Confirmada',
        confirmationSubtitle: 'Sua solicitação foi enviada com sucesso',
        referenceNumber: 'Número de Referência',
        yourRequest: 'Resumo da Sua Solicitação',
        shipmentDetails: 'Detalhes da Remessa',
        contactDetails: 'Detalhes de Contato',
        nextSteps: 'Próximos Passos',
        step1: 'Solicitação recebida',
        step1Time: 'Agora',
        step2: 'Análise e cotação',
        step2Time: 'Em 4 horas úteis',
        step3: 'Contato comercial',
        step3Time: 'Em 24 horas',
        step4: 'Cotação detalhada',
        step4Time: 'Em 48 horas',
        mode: 'Modalidade',
        shipment: 'remessa',
        shipments: 'remessas',
        aboutSino: 'Sobre a SINO Shipping & FS International',
        aboutSubtitle: 'Sua solicitação é tratada por especialistas',
        sinoDescription:
          'A SINO Shipping foi fundada em 2018 por empreendedores franceses e tornou-se parte da FS International em 2021. Esta colaboração combina uma abordagem ocidental centrada no cliente com profunda expertise local na China.',
        fsDescription:
          'A FS International foi fundada em setembro de 1989 em Hong Kong, sendo uma das marcas mais confiáveis para logística e transporte global na região.',
        ourExpertise: 'Nossa Expertise',
        expertise1: 'Frete marítimo, aéreo, ferroviário e multimodal',
        expertise2: 'Soluções de e-commerce (Amazon FBA, dropshipping)',
        expertise3: 'Sourcing e controle de qualidade',
        expertise4: 'Serviços logísticos completos',
        impactInNumbers: 'Nosso Impacto em Números',
        impactDescription:
          'Entregando excelência na China com resultados comprovados e serviço confiável',
        satisfiedCustomers: 'Clientes Satisfeitos',
        customerSatisfaction: 'Satisfação do Cliente',
        teamMembers: 'Membros da Equipe',
        oceanVolume: 'Volume Marítimo TEU',
        officesInChina: 'Escritórios na China',
        cfsFacilities: 'M² Instalações CFS',
        globalNetwork: 'Rede Global',
        networkDescription:
          'Com escritórios estratégicos na China e Hong Kong, estamos idealmente posicionados para atender suas remessas com eficiência.',
        chinaOffices: 'China: Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hong Kong: 1º andar, Bloco C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Sites',
        needHelp: 'Precisa de Ajuda?',
        community: 'Comunidade',
        contactEmail: 'E-mail de contato',
        available: 'disponível',
        businessHours: '9h–18h (horário da China)',
        actions: 'Ações Rápidas',
        newRequest: 'Enviar Nova Solicitação',
        thankYouTitle: 'Obrigado pela sua confiança!',
        thankYouMessage:
          'Sua solicitação será tratada com o máximo cuidado por nossos especialistas em transporte internacional.',
      },
      J = {
        confirmationTitle: 'Teklif Talebi Onaylandı',
        confirmationSubtitle: 'Talebiniz başarıyla gönderildi',
        referenceNumber: 'Referans Numarası',
        yourRequest: 'Talebinizin Özeti',
        shipmentDetails: 'Gönderi Detayları',
        contactDetails: 'İletişim Bilgileri',
        nextSteps: 'Sonraki Adımlar',
        step1: 'Talep alındı',
        step1Time: 'Şimdi',
        step2: 'Analiz ve fiyatlandırma',
        step2Time: '4 iş saati içinde',
        step3: 'Satış iletişimi',
        step3Time: '24 saat içinde',
        step4: 'Ayrıntılı teklif',
        step4Time: '48 saat içinde',
        mode: 'Taşıma Şekli',
        shipment: 'gönderi',
        shipments: 'gönderiler',
        aboutSino: 'SINO Shipping & FS International Hakkında',
        aboutSubtitle: 'Talebiniz uzmanlarımız tarafından işleniyor',
        sinoDescription:
          "SINO Shipping 2018 yılında Fransız girişimciler tarafından kuruldu ve 2021'de FS International'ın bir parçası oldu. Bu iş birliği, müşteri odaklı Batılı yaklaşımı derin yerel Çin uzmanlığıyla birleştirir.",
        fsDescription:
          "FS International, Eylül 1989'da Hong Kong'da kuruldu ve bölgede küresel lojistik ve taşımacılığın en güvenilir isimlerinden biridir.",
        ourExpertise: 'Uzmanlığımız',
        expertise1: 'Deniz, hava, demiryolu ve multimodal taşımacılık',
        expertise2: 'E-ticaret çözümleri (Amazon FBA, dropshipping)',
        expertise3: 'Tedarik ve kalite kontrol',
        expertise4: 'Kapsamlı lojistik hizmetleri',
        impactInNumbers: 'Rakamlarla Etkimiz',
        impactDescription:
          "Kanıtlanmış sonuçlar ve güvenilir hizmetle Çin'de mükemmellik sunuyoruz",
        satisfiedCustomers: 'Memnun Müşteriler',
        customerSatisfaction: 'Müşteri Memnuniyeti',
        teamMembers: 'Takım Üyeleri',
        oceanVolume: 'TEU Deniz Hacmi',
        officesInChina: "Çin'deki Ofisler",
        cfsFacilities: 'M² CFS Tesisleri',
        globalNetwork: 'Küresel Ağ',
        networkDescription:
          "Çin ve Hong Kong'daki stratejik ofislerimizle, gönderilerinizi verimli şekilde ele almak için ideal konumdayız.",
        chinaOffices: 'Çin: Şanghay, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen',
        hkOffice: 'Hong Kong: 1. kat, C Blok, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Web Siteleri',
        needHelp: 'Yardıma İhtiyacınız Var?',
        community: 'Topluluk',
        contactEmail: 'İletişim e-postası',
        available: 'çalışma saatleri',
        businessHours: '09:00–18:00 (Çin saati)',
        actions: 'Hızlı İşlemler',
        newRequest: 'Yeni Talep Gönder',
        thankYouTitle: 'Güveniniz için teşekkürler!',
        thankYouMessage:
          'Talebiniz uluslararası taşımacılık uzmanlarımız tarafından en büyük özenle işlenecektir.',
      },
      x = {
        confirmationTitle: 'Запрос на Расчёт Стоимости Подтверждён',
        confirmationSubtitle: 'Ваш запрос был успешно отправлен',
        referenceNumber: 'Номер Заявки',
        yourRequest: 'Краткое Описание Вашего Запроса',
        shipmentDetails: 'Детали Груза',
        contactDetails: 'Контактные Данные',
        nextSteps: 'Следующие Шаги',
        step1: 'Запрос получен',
        step1Time: 'Сейчас',
        step2: 'Анализ и расчёт',
        step2Time: 'В течение 4 рабочих часов',
        step3: 'Связь с отделом продаж',
        step3Time: 'В течение 24 часов',
        step4: 'Детализированное коммерческое предложение',
        step4Time: 'В течение 48 часов',
        mode: 'Способ Доставки',
        shipment: 'отправление',
        shipments: 'отправления',
        aboutSino: 'О SINO Shipping & FS International',
        aboutSubtitle: 'Ваш запрос обрабатывается экспертами',
        sinoDescription:
          'SINO Shipping была основана в 2018 году французскими предпринимателями и в 2021 году стала частью FS International. Это сотрудничество объединяет западный клиентоориентированный подход и глубокую локальную экспертизу в Китае.',
        fsDescription:
          'FS International была основана в сентябре 1989 года в Гонконге и является одним из самых надёжных брендов глобальной логистики и транспорта в регионе.',
        ourExpertise: 'Наша Экспертиза',
        expertise1: 'Морские, авиационные, железнодорожные и мультимодальные перевозки',
        expertise2: 'Решения для e‑commerce (Amazon FBA, дропшиппинг)',
        expertise3: 'Закупки и контроль качества',
        expertise4: 'Полный комплекс логистических услуг',
        impactInNumbers: 'Наше Влияние в Цифрах',
        impactDescription:
          'Обеспечиваем превосходство в Китае с проверенными результатами и надёжным сервисом',
        satisfiedCustomers: 'Довольных Клиентов',
        customerSatisfaction: 'Удовлетворённость Клиентов',
        teamMembers: 'Члены Команды',
        oceanVolume: 'Объём Морских Перевозок TEU',
        officesInChina: 'Офисы в Китае',
        cfsFacilities: 'М² Объекты CFS',
        globalNetwork: 'Глобальная Сеть',
        networkDescription:
          'Со стратегическими офисами в Китае и Гонконге мы идеально позиционированы для эффективной обработки ваших грузов.',
        chinaOffices: 'Китай: Шанхай, Шэньчжэнь, Гуанчжоу, Нинбо, Тяньцзинь, Циндао, Сямэнь',
        hkOffice: 'Гонконг: 1 этаж, блок C, Sea View Estate, 8 Watson Road, North Point',
        websites: 'Сайты',
        needHelp: 'Нужна Помощь?',
        community: 'Сообщество',
        contactEmail: 'Эл. почта для связи',
        available: 'доступны',
        businessHours: '9:00–18:00 (по времени Китая)',
        actions: 'Быстрые Действия',
        newRequest: 'Отправить Новый Запрос',
        thankYouTitle: 'Спасибо за ваше доверие!',
        thankYouMessage:
          'Ваш запрос будет обработан с максимальной заботой нашими экспертами по международным перевозкам.',
      },
      h = (m) => {
        const I =
          (n === 'de' && l[m]) ||
          (n === 'es' && t[m]) ||
          (n === 'it' && u[m]) ||
          (n === 'nl' && P[m]) ||
          (n === 'zh' && f[m]) ||
          (n === 'ar' && O[m]) ||
          (n === 'pt' && _[m]) ||
          (n === 'tr' && J[m]) ||
          (n === 'ru' && x[m]) ||
          N[m] ||
          m;
        return H(m, I);
      };
    return e.jsx(ze, {
      isVisible: b === 7,
      stepNumber: 7,
      title: n === 'fr' ? 'Demande de Devis Confirmée' : h('confirmationTitle'),
      emoji: '✅',
      hideStepNumber: !0,
      children: e.jsxs('div', {
        className: 'confirmation-container',
        style: {
          background:
            'linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(59, 130, 246, 0.05) 100%)',
          borderRadius: '2rem',
          padding: '0',
          margin: '2rem 0',
          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
          overflow: 'hidden',
          position: 'relative',
        },
        children: [
          e.jsx('div', {
            style: {
              position: 'absolute',
              top: '-50%',
              left: '-50%',
              width: '200%',
              height: '200%',
              background: 'radial-gradient(circle, rgba(16, 185, 129, 0.1) 0%, transparent 70%)',
              animation: 'float 6s ease-in-out infinite',
              zIndex: 0,
            },
          }),
          e.jsx('div', {
            style: {
              position: 'absolute',
              top: '10%',
              right: '10%',
              width: '100px',
              height: '100px',
              background: 'radial-gradient(circle, rgba(59, 130, 246, 0.15) 0%, transparent 70%)',
              borderRadius: '50%',
              animation: 'pulse 4s ease-in-out infinite',
              zIndex: 0,
            },
          }),
          e.jsx('div', {
            style: { position: 'relative', zIndex: 10 },
            children: e.jsxs('div', {
              style: {
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                padding: '4rem 2rem',
                textAlign: 'center',
                color: 'white',
                position: 'relative',
                overflow: 'hidden',
              },
              children: [
                e.jsx('div', {
                  style: {
                    position: 'absolute',
                    top: '20%',
                    left: '10%',
                    width: '8px',
                    height: '8px',
                    backgroundColor: 'rgba(255, 255, 255, 0.6)',
                    borderRadius: '50%',
                    animation: 'float 3s ease-in-out infinite',
                  },
                }),
                e.jsx('div', {
                  style: {
                    position: 'absolute',
                    top: '60%',
                    right: '15%',
                    width: '6px',
                    height: '6px',
                    backgroundColor: 'rgba(255, 255, 255, 0.4)',
                    borderRadius: '50%',
                    animation: 'float 4s ease-in-out infinite reverse',
                  },
                }),
                e.jsx('div', {
                  style: {
                    position: 'absolute',
                    top: '30%',
                    right: '30%',
                    width: '10px',
                    height: '10px',
                    backgroundColor: 'rgba(255, 255, 255, 0.3)',
                    borderRadius: '50%',
                    animation: 'float 5s ease-in-out infinite',
                  },
                }),
                e.jsx('div', {
                  style: {
                    position: 'absolute',
                    bottom: '25%',
                    left: '20%',
                    width: '4px',
                    height: '4px',
                    backgroundColor: 'rgba(255, 255, 255, 0.5)',
                    borderRadius: '50%',
                    animation: 'sparkle 2s ease-in-out infinite',
                  },
                }),
                e.jsx('div', {
                  style: {
                    fontSize: '6rem',
                    marginBottom: '1.5rem',
                    animation: 'bounceIn 1s ease-out',
                    filter: 'drop-shadow(0 10px 20px rgba(0, 0, 0, 0.2))',
                  },
                  children: '🎉',
                }),
                e.jsxs('div', {
                  style: {
                    display: 'inline-block',
                    padding: '1rem 2.5rem',
                    backgroundColor: 'rgba(255, 255, 255, 0.2)',
                    borderRadius: '50px',
                    border: '2px solid rgba(255, 255, 255, 0.3)',
                    fontSize: '1rem',
                    fontWeight: '700',
                    marginBottom: '2rem',
                    backdropFilter: 'blur(10px)',
                    animation: 'slideInDown 0.8s ease-out 0.3s both',
                    textTransform: 'uppercase',
                    letterSpacing: '1px',
                  },
                  children: [
                    '✨',
                    ' ',
                    n === 'fr'
                      ? 'Processus Terminé avec Succès'
                      : n === 'de'
                        ? 'Vorgang Erfolgreich Abgeschlossen'
                        : n === 'es'
                          ? 'Proceso Completado con Éxito'
                          : n === 'it'
                            ? 'Processo Completato con Successo'
                            : n === 'nl'
                              ? 'Proces Succesvol Voltooid'
                              : n === 'ar'
                                ? 'تم إنجاز العملية بنجاح'
                                : n === 'pt'
                                  ? 'Processo Concluído com Sucesso'
                                  : n === 'tr'
                                    ? 'Süreç Başarıyla Tamamlandı'
                                    : n === 'ru'
                                      ? 'Процесс Успешно Завершён'
                                      : n === 'zh'
                                        ? '流程成功完成'
                                        : 'Process Successfully Completed',
                  ],
                }),
                e.jsx('h1', {
                  style: {
                    fontSize: '3rem',
                    fontWeight: '800',
                    marginBottom: '1.5rem',
                    textShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
                    animation: 'slideInUp 0.8s ease-out 0.1s both',
                    background: 'linear-gradient(45deg, #ffffff 0%, #f0fdf4 100%)',
                    WebkitBackgroundClip: 'text',
                    WebkitTextFillColor: 'transparent',
                    backgroundClip: 'text',
                  },
                  children: n === 'fr' ? 'Merci pour votre confiance !' : h('thankYouTitle'),
                }),
                e.jsx('p', {
                  style: {
                    fontSize: '1.3rem',
                    opacity: '0.95',
                    marginBottom: '2.5rem',
                    maxWidth: '700px',
                    margin: '0 auto 2.5rem auto',
                    lineHeight: '1.7',
                    animation: 'slideInUp 0.8s ease-out 0.2s both',
                    fontWeight: '300',
                  },
                  children:
                    n === 'fr'
                      ? 'Votre demande a été soumise avec succès'
                      : h('confirmationSubtitle'),
                }),
                e.jsxs('div', {
                  onClick: () => {
                    var m;
                    try {
                      g &&
                        ((m = navigator.clipboard) == null || m.writeText(g),
                        z(n === 'fr' ? 'Référence copiée' : 'Reference copied'));
                    } catch {}
                  },
                  title: n === 'fr' ? 'Cliquer pour copier' : 'Click to copy',
                  role: 'button',
                  tabIndex: 0,
                  onKeyDown: (m) => {
                    var I;
                    if (m.key === 'Enter' || m.key === ' ')
                      try {
                        g &&
                          ((I = navigator.clipboard) == null || I.writeText(g),
                          z(n === 'fr' ? 'Référence copiée' : 'Reference copied'));
                      } catch {}
                  },
                  style: {
                    background:
                      'linear-gradient(135deg, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0.1) 100%)',
                    padding: '1.5rem 3rem',
                    borderRadius: '20px',
                    border: '2px solid rgba(255, 255, 255, 0.3)',
                    display: 'inline-block',
                    backdropFilter: 'blur(15px)',
                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                    animation: 'slideInUp 0.8s ease-out 0.4s both',
                    minWidth: '300px',
                    cursor: 'pointer',
                  },
                  children: [
                    e.jsx('div', {
                      style: {
                        fontSize: '0.9rem',
                        opacity: '0.8',
                        marginBottom: '0.5rem',
                        fontWeight: '500',
                      },
                      children: n === 'fr' ? 'Numéro de Référence' : h('referenceNumber'),
                    }),
                    e.jsx('div', {
                      style: {
                        fontSize: '1.3rem',
                        fontWeight: '700',
                        fontFamily: 'monospace',
                        letterSpacing: '2px',
                        color: '#ffffff',
                        textShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',
                      },
                      children: g,
                    }),
                  ],
                }),
              ],
            }),
          }),
          e.jsxs('div', {
            className: 'request-summary',
            style: {
              marginBottom: '2rem',
              padding: '2rem',
              background:
                'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(249, 250, 251, 0.95) 100%)',
              borderRadius: '1.5rem',
              border: '2px solid rgba(16, 185, 129, 0.1)',
              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',
              animation: 'slideInUp 0.8s ease-out 0.6s both',
            },
            children: [
              e.jsxs('div', {
                style: { display: 'flex', alignItems: 'center', marginBottom: '1.5rem' },
                children: [
                  e.jsx('div', {
                    style: {
                      width: '40px',
                      height: '40px',
                      background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                      borderRadius: '12px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      marginRight: '1rem',
                      fontSize: '1.2rem',
                    },
                    children: '📋',
                  }),
                  e.jsx('h3', {
                    style: { fontSize: '1.5rem', fontWeight: '700', color: '#1f2937', margin: 0 },
                    children: n === 'fr' ? 'Récapitulatif de Votre Demande' : h('yourRequest'),
                  }),
                ],
              }),
              e.jsxs('div', {
                style: {
                  display: 'grid',
                  gridTemplateColumns: 'repeat(auto-fit, minmax(320px, 1fr))',
                  gap: '2rem',
                },
                children: [
                  e.jsxs('div', {
                    style: {
                      padding: '1.5rem',
                      background:
                        'linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(16, 185, 129, 0.02) 100%)',
                      borderRadius: '1rem',
                      border: '1px solid rgba(16, 185, 129, 0.15)',
                    },
                    children: [
                      e.jsxs('div', {
                        style: { display: 'flex', alignItems: 'center', marginBottom: '1rem' },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '32px',
                              height: '32px',
                              background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                              borderRadius: '8px',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              marginRight: '0.75rem',
                              fontSize: '1rem',
                            },
                            children: '🚢',
                          }),
                          e.jsx('h4', {
                            style: {
                              color: '#1f2937',
                              fontSize: '1.1rem',
                              fontWeight: '600',
                              margin: 0,
                            },
                            children: n === 'fr' ? "Détails de l'Expédition" : h('shipmentDetails'),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: { color: '#374151', lineHeight: '1.6', fontSize: '0.95rem' },
                        children: [
                          e.jsxs('p', {
                            style: { margin: '0rem 0', display: 'flex', alignItems: 'center' },
                            children: [
                              e.jsx('span', {
                                style: { fontSize: '1rem', marginRight: '0.5rem' },
                                children: '📍',
                              }),
                              e.jsx('strong', { children: p.city || p.origin }),
                              ' →',
                              ' ',
                              e.jsxs('strong', {
                                children: [
                                  p.destCity || p.country,
                                  ',',
                                  ' ',
                                  (T = xe.find((m) => m.code === p.country)) == null
                                    ? void 0
                                    : T.name,
                                ],
                              }),
                            ],
                          }),
                          e.jsxs('p', {
                            style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                            children: [
                              e.jsx('span', {
                                style: { fontSize: '1rem', marginRight: '0.5rem' },
                                children: '🚛',
                              }),
                              n === 'fr' ? 'Mode' : h('mode'),
                              ': ',
                              e.jsx('strong', {
                                children: h(
                                  p.mode === 'Unsure'
                                    ? 'unsureShipping'
                                    : p.mode === 'Sea Freight'
                                      ? 'seaFreight'
                                      : p.mode === 'Air Freight'
                                        ? 'airFreight'
                                        : p.mode === 'Rail Freight'
                                          ? 'railFreight'
                                          : p.mode === 'Express'
                                            ? 'express'
                                            : 'mode'
                                ),
                              }),
                            ],
                          }),
                          e.jsxs('p', {
                            style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                            children: [
                              e.jsx('span', {
                                style: { fontSize: '1rem', marginRight: '0.5rem' },
                                children: '📦',
                              }),
                              e.jsx('strong', { children: p.loads.length }),
                              ' ',
                              p.loads.length === 1
                                ? n === 'fr'
                                  ? 'expédition'
                                  : h('shipment')
                                : n === 'fr'
                                  ? 'expéditions'
                                  : h('shipments'),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    style: {
                      padding: '1.5rem',
                      background:
                        'linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(59, 130, 246, 0.02) 100%)',
                      borderRadius: '1rem',
                      border: '1px solid rgba(59, 130, 246, 0.15)',
                    },
                    children: [
                      e.jsxs('div', {
                        style: { display: 'flex', alignItems: 'center', marginBottom: '1rem' },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '32px',
                              height: '32px',
                              background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
                              borderRadius: '8px',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              marginRight: '0.75rem',
                              fontSize: '1rem',
                            },
                            children: '👤',
                          }),
                          e.jsx('h4', {
                            style: {
                              color: '#1f2937',
                              fontSize: '1.1rem',
                              fontWeight: '600',
                              margin: 0,
                            },
                            children: n === 'fr' ? 'Coordonnées' : h('contactDetails'),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: { color: '#374151', lineHeight: '1.6', fontSize: '0.95rem' },
                        children: [
                          e.jsxs('p', {
                            style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                            children: [
                              e.jsx('span', {
                                style: { fontSize: '1rem', marginRight: '0.5rem' },
                                children: '👨‍💼',
                              }),
                              e.jsxs('strong', { children: [p.firstName, ' ', p.lastName] }),
                            ],
                          }),
                          p.companyName &&
                            e.jsxs('p', {
                              style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                              children: [
                                e.jsx('span', {
                                  style: { fontSize: '1rem', marginRight: '0.5rem' },
                                  children: '🏢',
                                }),
                                e.jsx('strong', { children: p.companyName }),
                              ],
                            }),
                          e.jsxs('p', {
                            style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                            children: [
                              e.jsx('span', {
                                style: { fontSize: '1rem', marginRight: '0.5rem' },
                                children: '📧',
                              }),
                              e.jsx('strong', { children: p.email }),
                            ],
                          }),
                          p.phone &&
                            e.jsxs('p', {
                              style: { margin: '0.5rem 0', display: 'flex', alignItems: 'center' },
                              children: [
                                e.jsx('span', {
                                  style: { fontSize: '1rem', marginRight: '0.5rem' },
                                  children: '📱',
                                }),
                                e.jsxs('strong', { children: [p.phoneCountryCode, ' ', p.phone] }),
                              ],
                            }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
          e.jsxs('div', {
            className: 'next-steps',
            style: {
              marginBottom: '3rem',
              padding: '2.5rem',
              background:
                'linear-gradient(135deg, rgba(59, 130, 246, 0.08) 0%, rgba(99, 102, 241, 0.05) 100%)',
              borderRadius: '1.5rem',
              border: '2px solid rgba(59, 130, 246, 0.15)',
              boxShadow: '0 10px 25px rgba(59, 130, 246, 0.1)',
              animation: 'slideInUp 0.8s ease-out 0.8s both',
              position: 'relative',
              overflow: 'hidden',
            },
            children: [
              e.jsx('div', {
                style: {
                  position: 'absolute',
                  top: '-20px',
                  right: '-20px',
                  width: '80px',
                  height: '80px',
                  background:
                    'radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%)',
                  borderRadius: '50%',
                },
              }),
              e.jsxs('div', {
                style: {
                  display: 'flex',
                  alignItems: 'center',
                  marginBottom: '2rem',
                  position: 'relative',
                  zIndex: 10,
                },
                children: [
                  e.jsx('div', {
                    style: {
                      width: '48px',
                      height: '48px',
                      background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                      borderRadius: '16px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      marginRight: '1rem',
                      fontSize: '1.5rem',
                      boxShadow: '0 8px 16px rgba(59, 130, 246, 0.3)',
                    },
                    children: '⏱️',
                  }),
                  e.jsx('h3', {
                    style: { fontSize: '1.6rem', fontWeight: '700', color: '#1f2937', margin: 0 },
                    children: n === 'fr' ? 'Prochaines Étapes' : h('nextSteps'),
                  }),
                ],
              }),
              e.jsxs('div', {
                style: { position: 'relative' },
                children: [
                  e.jsx('div', {
                    style: {
                      position: 'absolute',
                      left: '24px',
                      top: '40px',
                      bottom: '40px',
                      width: '3px',
                      background:
                        'linear-gradient(to bottom, #10b981 0%, #3b82f6 50%, #94a3b8 100%)',
                      borderRadius: '2px',
                      opacity: 0.3,
                    },
                  }),
                  e.jsxs('div', {
                    style: { display: 'grid', gap: '1.5rem', position: 'relative', zIndex: 10 },
                    children: [
                      e.jsxs('div', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '1.5rem',
                          padding: '1rem',
                          borderRadius: '12px',
                          background: 'rgba(255, 255, 255, 0.6)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(16, 185, 129, 0.2)',
                          transform: 'translateX(0)',
                          transition: 'all 0.3s ease',
                        },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '48px',
                              height: '48px',
                              background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              color: 'white',
                              fontSize: '1.2rem',
                              fontWeight: '700',
                              boxShadow: '0 4px 12px rgba(16, 185, 129, 0.4)',
                              border: '3px solid white',
                            },
                            children: '✓',
                          }),
                          e.jsxs('div', {
                            style: { flex: 1 },
                            children: [
                              e.jsx('div', {
                                style: {
                                  fontSize: '1.1rem',
                                  fontWeight: '600',
                                  color: '#1f2937',
                                  marginBottom: '0.25rem',
                                },
                                children: n === 'fr' ? 'Demande reçue' : h('step1'),
                              }),
                              e.jsx('div', {
                                style: { color: '#059669', fontSize: '0.9rem', fontWeight: '500' },
                                children: n === 'fr' ? 'Maintenant' : h('step1Time'),
                              }),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '1.5rem',
                          padding: '1rem',
                          borderRadius: '12px',
                          background: 'rgba(255, 255, 255, 0.6)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(59, 130, 246, 0.2)',
                          transform: 'translateX(0)',
                          transition: 'all 0.3s ease',
                        },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '48px',
                              height: '48px',
                              background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              color: 'white',
                              fontSize: '1.1rem',
                              fontWeight: '700',
                              boxShadow: '0 4px 12px rgba(59, 130, 246, 0.4)',
                              border: '3px solid white',
                              animation: 'pulse 2s ease-in-out infinite',
                            },
                            children: '2',
                          }),
                          e.jsxs('div', {
                            style: { flex: 1 },
                            children: [
                              e.jsx('div', {
                                style: {
                                  fontSize: '1.1rem',
                                  fontWeight: '600',
                                  color: '#1f2937',
                                  marginBottom: '0.25rem',
                                },
                                children: n === 'fr' ? 'Analyse et cotation' : h('step2'),
                              }),
                              e.jsx('div', {
                                style: { color: '#3b82f6', fontSize: '0.9rem', fontWeight: '500' },
                                children: n === 'fr' ? 'Sous 4h ouvrées' : h('step2Time'),
                              }),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '1.5rem',
                          padding: '1rem',
                          borderRadius: '12px',
                          background: 'rgba(255, 255, 255, 0.4)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(148, 163, 184, 0.3)',
                          opacity: 0.8,
                        },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '48px',
                              height: '48px',
                              background: 'linear-gradient(135deg, #94a3b8 0%, #64748b 100%)',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              color: 'white',
                              fontSize: '1.1rem',
                              fontWeight: '700',
                              border: '3px solid white',
                            },
                            children: '3',
                          }),
                          e.jsxs('div', {
                            style: { flex: 1 },
                            children: [
                              e.jsx('div', {
                                style: {
                                  fontSize: '1.1rem',
                                  fontWeight: '600',
                                  color: '#64748b',
                                  marginBottom: '0.25rem',
                                },
                                children: n === 'fr' ? 'Contact commercial' : h('step3'),
                              }),
                              e.jsx('div', {
                                style: { color: '#94a3b8', fontSize: '0.9rem', fontWeight: '500' },
                                children: n === 'fr' ? 'Sous 24h' : h('step3Time'),
                              }),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '1.5rem',
                          padding: '1rem',
                          borderRadius: '12px',
                          background: 'rgba(255, 255, 255, 0.4)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(148, 163, 184, 0.3)',
                          opacity: 0.8,
                        },
                        children: [
                          e.jsx('div', {
                            style: {
                              width: '48px',
                              height: '48px',
                              background: 'linear-gradient(135deg, #94a3b8 0%, #64748b 100%)',
                              borderRadius: '50%',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              color: 'white',
                              fontSize: '1.1rem',
                              fontWeight: '700',
                              border: '3px solid white',
                            },
                            children: '4',
                          }),
                          e.jsxs('div', {
                            style: { flex: 1 },
                            children: [
                              e.jsx('div', {
                                style: {
                                  fontSize: '1.1rem',
                                  fontWeight: '600',
                                  color: '#64748b',
                                  marginBottom: '0.25rem',
                                },
                                children: n === 'fr' ? 'Devis détaillé' : h('step4'),
                              }),
                              e.jsx('div', {
                                style: { color: '#94a3b8', fontSize: '0.9rem', fontWeight: '500' },
                                children: n === 'fr' ? 'Sous 48h' : h('step4Time'),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
          e.jsxs('div', {
            className: 'company-info',
            style: {
              marginBottom: '2rem',
              padding: '3rem',
              background:
                'linear-gradient(135deg, rgba(16, 185, 129, 0.08) 0%, rgba(6, 95, 70, 0.05) 100%)',
              borderRadius: '2rem',
              border: '2px solid rgba(16, 185, 129, 0.15)',
              boxShadow: '0 15px 35px rgba(16, 185, 129, 0.1)',
              animation: 'slideInUp 0.8s ease-out 1s both',
              position: 'relative',
              overflow: 'hidden',
            },
            children: [
              e.jsx('div', {
                style: {
                  position: 'absolute',
                  top: '-30px',
                  left: '-30px',
                  width: '120px',
                  height: '120px',
                  background:
                    'radial-gradient(circle, rgba(16, 185, 129, 0.1) 0%, transparent 70%)',
                  borderRadius: '50%',
                },
              }),
              e.jsxs('div', {
                style: { position: 'relative', zIndex: 10 },
                children: [
                  e.jsxs('div', {
                    style: {
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      marginBottom: '1.5rem',
                    },
                    children: [
                      e.jsx('div', {
                        style: {
                          width: '60px',
                          height: '60px',
                          background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                          borderRadius: '20px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          marginRight: '1rem',
                          fontSize: '2rem',
                          boxShadow: '0 10px 20px rgba(16, 185, 129, 0.3)',
                        },
                        children: '🚢',
                      }),
                      e.jsx('h3', {
                        style: { fontSize: '2rem', fontWeight: '800', color: '#1f2937', margin: 0 },
                        children:
                          n === 'fr'
                            ? 'À Propos de SINO Shipping & FS International'
                            : h('aboutSino'),
                      }),
                    ],
                  }),
                  e.jsx('p', {
                    style: {
                      color: '#6b7280',
                      fontSize: '1.2rem',
                      textAlign: 'center',
                      marginBottom: '3rem',
                      maxWidth: '800px',
                      margin: '0 auto 3rem auto',
                      lineHeight: '1.7',
                      fontWeight: '300',
                    },
                    children:
                      n === 'fr' ? 'Votre demande est entre de bonnes mains' : h('aboutSubtitle'),
                  }),
                  e.jsxs('div', {
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
                      gap: '2rem',
                      marginBottom: '2rem',
                    },
                    children: [
                      e.jsxs('div', {
                        style: {
                          padding: '1.5rem',
                          backgroundColor: 'rgba(255, 255, 255, 0.8)',
                          borderRadius: '0.75rem',
                        },
                        children: [
                          e.jsx('h4', {
                            style: { color: '#10b981', marginBottom: '1rem', fontSize: '1.2rem' },
                            children: '🇫🇷 SINO Shipping (2018)',
                          }),
                          e.jsx('p', {
                            style: { color: '#374151', lineHeight: '1.6' },
                            children:
                              n === 'fr'
                                ? "SINO Shipping, lancée en 2018 par des entrepreneurs français, est devenue une marque de FS International en 2021. Ce partenariat combine l'approche occidentale centrée client avec une expertise locale chinoise approfondie."
                                : h('sinoDescription'),
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        style: {
                          padding: '1.5rem',
                          backgroundColor: 'rgba(255, 255, 255, 0.8)',
                          borderRadius: '0.75rem',
                        },
                        children: [
                          e.jsx('h4', {
                            style: { color: '#10b981', marginBottom: '1rem', fontSize: '1.2rem' },
                            children: '🇭🇰 FS International (1989)',
                          }),
                          e.jsx('p', {
                            style: { color: '#374151', lineHeight: '1.6' },
                            children:
                              n === 'fr'
                                ? "FS International, fondée à Hong Kong en septembre 1989, est l'un des noms les plus fiables en logistique et transport global dans sa région."
                                : h('fsDescription'),
                          }),
                        ],
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    style: {
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                      gap: '2rem',
                    },
                    children: [
                      e.jsxs('div', {
                        style: {
                          background:
                            'linear-gradient(135deg, rgba(16, 185, 129, 0.08) 0%, rgba(59, 130, 246, 0.05) 100%)',
                          borderRadius: '1rem',
                          padding: '1.5rem',
                          border: '1px solid rgba(16, 185, 129, 0.1)',
                          boxShadow: '0 8px 25px rgba(16, 185, 129, 0.1)',
                        },
                        children: [
                          e.jsxs('div', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              marginBottom: '1.5rem',
                              gap: '0.75rem',
                            },
                            children: [
                              e.jsx('div', {
                                style: {
                                  width: '40px',
                                  height: '40px',
                                  background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                                  borderRadius: '12px',
                                  display: 'flex',
                                  alignItems: 'center',
                                  justifyContent: 'center',
                                  fontSize: '1.2rem',
                                  boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',
                                },
                                children: '🎯',
                              }),
                              e.jsx('h4', {
                                style: {
                                  color: '#1f2937',
                                  margin: 0,
                                  fontSize: '1.3rem',
                                  fontWeight: '700',
                                },
                                children: h('ourExpertise'),
                              }),
                            ],
                          }),
                          e.jsxs('div', {
                            style: { display: 'grid', gap: '1rem' },
                            children: [
                              e.jsxs('div', {
                                style: {
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '1rem',
                                  padding: '1rem',
                                  background: 'rgba(255, 255, 255, 0.7)',
                                  borderRadius: '12px',
                                  border: '1px solid rgba(16, 185, 129, 0.1)',
                                  transition: 'all 0.3s ease',
                                  cursor: 'default',
                                },
                                onMouseEnter: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(-2px)'),
                                    (m.currentTarget.style.boxShadow =
                                      '0 8px 20px rgba(16, 185, 129, 0.15)'));
                                },
                                onMouseLeave: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(0)'),
                                    (m.currentTarget.style.boxShadow = 'none'));
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      width: '32px',
                                      height: '32px',
                                      background:
                                        'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                                      borderRadius: '8px',
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'center',
                                      fontSize: '1rem',
                                      flexShrink: 0,
                                    },
                                    children: '🚢',
                                  }),
                                  e.jsx('span', {
                                    style: {
                                      color: '#374151',
                                      fontWeight: '500',
                                      lineHeight: '1.4',
                                    },
                                    children:
                                      n === 'fr'
                                        ? 'Transport maritime, aérien, ferroviaire et multimodal'
                                        : h('expertise1'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '1rem',
                                  padding: '1rem',
                                  background: 'rgba(255, 255, 255, 0.7)',
                                  borderRadius: '12px',
                                  border: '1px solid rgba(16, 185, 129, 0.1)',
                                  transition: 'all 0.3s ease',
                                  cursor: 'default',
                                },
                                onMouseEnter: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(-2px)'),
                                    (m.currentTarget.style.boxShadow =
                                      '0 8px 20px rgba(16, 185, 129, 0.15)'));
                                },
                                onMouseLeave: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(0)'),
                                    (m.currentTarget.style.boxShadow = 'none'));
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      width: '32px',
                                      height: '32px',
                                      background:
                                        'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                                      borderRadius: '8px',
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'center',
                                      fontSize: '1rem',
                                      flexShrink: 0,
                                    },
                                    children: '📦',
                                  }),
                                  e.jsx('span', {
                                    style: {
                                      color: '#374151',
                                      fontWeight: '500',
                                      lineHeight: '1.4',
                                    },
                                    children:
                                      n === 'fr'
                                        ? 'Solutions e-commerce (Amazon FBA, dropshipping)'
                                        : h('expertise2'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '1rem',
                                  padding: '1rem',
                                  background: 'rgba(255, 255, 255, 0.7)',
                                  borderRadius: '12px',
                                  border: '1px solid rgba(16, 185, 129, 0.1)',
                                  transition: 'all 0.3s ease',
                                  cursor: 'default',
                                },
                                onMouseEnter: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(-2px)'),
                                    (m.currentTarget.style.boxShadow =
                                      '0 8px 20px rgba(16, 185, 129, 0.15)'));
                                },
                                onMouseLeave: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(0)'),
                                    (m.currentTarget.style.boxShadow = 'none'));
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      width: '32px',
                                      height: '32px',
                                      background:
                                        'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
                                      borderRadius: '8px',
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'center',
                                      fontSize: '1rem',
                                      flexShrink: 0,
                                    },
                                    children: '🔍',
                                  }),
                                  e.jsx('span', {
                                    style: {
                                      color: '#374151',
                                      fontWeight: '500',
                                      lineHeight: '1.4',
                                    },
                                    children:
                                      n === 'fr' ? 'Sourcing et contrôle qualité' : h('expertise3'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '1rem',
                                  padding: '1rem',
                                  background: 'rgba(255, 255, 255, 0.7)',
                                  borderRadius: '12px',
                                  border: '1px solid rgba(16, 185, 129, 0.1)',
                                  transition: 'all 0.3s ease',
                                  cursor: 'default',
                                },
                                onMouseEnter: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(-2px)'),
                                    (m.currentTarget.style.boxShadow =
                                      '0 8px 20px rgba(16, 185, 129, 0.15)'));
                                },
                                onMouseLeave: (m) => {
                                  ((m.currentTarget.style.transform = 'translateY(0)'),
                                    (m.currentTarget.style.boxShadow = 'none'));
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      width: '32px',
                                      height: '32px',
                                      background:
                                        'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                                      borderRadius: '8px',
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'center',
                                      fontSize: '1rem',
                                      flexShrink: 0,
                                    },
                                    children: '📋',
                                  }),
                                  e.jsx('span', {
                                    style: {
                                      color: '#374151',
                                      fontWeight: '500',
                                      lineHeight: '1.4',
                                    },
                                    children:
                                      n === 'fr'
                                        ? 'Services logistiques complets'
                                        : h('expertise4'),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                      e.jsxs('div', {
                        children: [
                          e.jsxs('h4', {
                            style: { color: '#1f2937', marginBottom: '0.5rem', fontSize: '1.1rem' },
                            children: [
                              '📊 ',
                              n === 'fr' ? 'Notre Impact en Chiffres' : h('impactInNumbers'),
                            ],
                          }),
                          e.jsx('p', {
                            style: { color: '#6b7280', fontSize: '0.85rem', marginBottom: '1rem' },
                            children:
                              n === 'fr'
                                ? "Offrir l'excellence en Chine avec des résultats prouvés et un service de confiance"
                                : h('impactDescription'),
                          }),
                          e.jsxs('div', {
                            style: {
                              display: 'grid',
                              gridTemplateColumns: '1fr 1fr',
                              gap: '0.8rem',
                            },
                            children: [
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '55,000+',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children:
                                      n === 'fr' ? 'Clients Satisfaits' : h('satisfiedCustomers'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '4.8/5',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children:
                                      n === 'fr'
                                        ? 'Satisfaction Client'
                                        : h('customerSatisfaction'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '400+',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children: n === 'fr' ? "Membres de l'Équipe" : h('teamMembers'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '140,000+',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children: n === 'fr' ? 'Volume Maritime TEU' : h('oceanVolume'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '8',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children: n === 'fr' ? 'Bureaux en Chine' : h('officesInChina'),
                                  }),
                                ],
                              }),
                              e.jsxs('div', {
                                style: {
                                  textAlign: 'center',
                                  padding: '0.8rem',
                                  backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                  borderRadius: '0.5rem',
                                },
                                children: [
                                  e.jsx('div', {
                                    style: {
                                      fontSize: '1.3rem',
                                      fontWeight: '600',
                                      color: '#10b981',
                                    },
                                    children: '519,000+',
                                  }),
                                  e.jsx('div', {
                                    style: { fontSize: '0.8rem', color: '#6b7280' },
                                    children:
                                      n === 'fr' ? 'M² Installations CFS' : h('cfsFacilities'),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  e.jsxs('div', {
                    style: {
                      marginTop: '2rem',
                      padding: '1.5rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)',
                      borderRadius: '0.75rem',
                    },
                    children: [
                      e.jsxs('h4', {
                        style: { color: '#1f2937', marginBottom: '1rem' },
                        children: ['🌍 ', n === 'fr' ? 'Réseau Mondial' : h('globalNetwork')],
                      }),
                      e.jsx('p', {
                        style: { color: '#6b7280', marginBottom: '1rem' },
                        children:
                          n === 'fr'
                            ? 'Bureaux stratégiques dans les hubs logistiques clés :'
                            : h('networkDescription'),
                      }),
                      e.jsxs('div', {
                        style: { fontSize: '0.9rem', color: '#374151', lineHeight: '1.6' },
                        children: [
                          e.jsx('p', {
                            children: e.jsxs('strong', {
                              children: [
                                '🇨🇳',
                                ' ',
                                n === 'fr'
                                  ? 'Chine : Shanghai, Shenzhen, Guangzhou, Ningbo, Tianjin, Qingdao, Xiamen'
                                  : h('chinaOffices'),
                              ],
                            }),
                          }),
                          e.jsx('p', {
                            children: e.jsxs('strong', {
                              children: [
                                '🇭🇰',
                                ' ',
                                n === 'fr'
                                  ? 'Hong Kong : 1er étage, Bloc C, Sea View Estate, 8 Watson Road, North Point'
                                  : h('hkOffice'),
                              ],
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
          e.jsxs('div', {
            className: 'contact-support',
            style: {
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
              gap: '2rem',
              marginBottom: '2rem',
            },
            children: [
              e.jsxs('div', {
                style: {
                  padding: '1.5rem',
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  borderRadius: '1rem',
                  border: '1px solid #e5e7eb',
                  position: 'relative',
                  zIndex: 1,
                },
                children: [
                  e.jsxs('h4', {
                    style: { color: '#1f2937', marginBottom: '1rem', fontSize: '1rem' },
                    children: ['❓ ', n === 'fr' ? "Besoin d'Aide ?" : h('needHelp')],
                  }),
                  n === 'fr'
                    ? e.jsxs('div', {
                        style: { fontSize: '0.9rem', color: '#374151', lineHeight: 1.8 },
                        children: [
                          e.jsxs('p', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              margin: '0.25rem 0',
                            },
                            children: [
                              e.jsx('span', { children: '👥' }),
                              e.jsx('span', { children: 'Communauté WhatsApp:' }),
                              e.jsx('strong', {
                                children: e.jsx('a', {
                                  href: 'https://chat.whatsapp.com/EcOPbD18vFxHTVjECQVsRE',
                                  target: '_blank',
                                  rel: 'noreferrer',
                                  style: {
                                    color: '#0ea5e9',
                                    textDecoration: 'underline',
                                    textUnderlineOffset: '2px',
                                  },
                                  children: 'WhatsApp',
                                }),
                              }),
                            ],
                          }),
                          e.jsxs('p', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              margin: '0.25rem 0',
                            },
                            children: [
                              e.jsx('span', { children: '📧' }),
                              e.jsx('span', { children: 'Email:' }),
                              e.jsx('strong', {
                                children: e.jsx('a', {
                                  href: 'mailto:info@sino-shipping.com',
                                  style: {
                                    color: '#0ea5e9',
                                    textDecoration: 'underline',
                                    textUnderlineOffset: '2px',
                                  },
                                  children: 'info@sino-shipping.com',
                                }),
                              }),
                            ],
                          }),
                          e.jsx('p', { children: '⏰ available: 9h-18h (Heure de Chine)' }),
                        ],
                      })
                    : e.jsxs('div', {
                        style: { fontSize: '0.9rem', color: '#374151' },
                        children: [
                          e.jsxs('p', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              margin: '0.25rem 0',
                            },
                            children: [
                              e.jsx('span', { children: '👥' }),
                              e.jsxs('span', { children: [h('community'), ':'] }),
                              e.jsx('strong', {
                                children: e.jsx('a', {
                                  href: 'https://chat.whatsapp.com/EcOPbD18vFxHTVjECQVsRE',
                                  target: '_blank',
                                  rel: 'noreferrer',
                                  style: {
                                    color: '#0ea5e9',
                                    textDecoration: 'underline',
                                    textUnderlineOffset: '2px',
                                  },
                                  children: 'WhatsApp',
                                }),
                              }),
                            ],
                          }),
                          e.jsxs('p', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              margin: '0.25rem 0',
                            },
                            children: [
                              e.jsx('span', { children: '📧' }),
                              e.jsxs('span', { children: [h('contactEmail'), ':'] }),
                              e.jsx('strong', {
                                children: e.jsx('a', {
                                  href: 'mailto:info@sino-shipping.com',
                                  style: {
                                    color: '#0ea5e9',
                                    textDecoration: 'underline',
                                    textUnderlineOffset: '2px',
                                  },
                                  children: 'info@sino-shipping.com',
                                }),
                              }),
                            ],
                          }),
                          e.jsxs('p', {
                            style: {
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              margin: '0.25rem 0',
                              color: '#6b7280',
                              fontSize: '0.9rem',
                            },
                            children: [
                              e.jsx('span', { children: '⏰' }),
                              e.jsxs('span', {
                                children: [h('available'), ': ', h('businessHours')],
                              }),
                            ],
                          }),
                        ],
                      }),
                ],
              }),
              e.jsxs('div', {
                style: {
                  padding: '1.5rem',
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  borderRadius: '1rem',
                  border: '1px solid #e5e7eb',
                  position: 'relative',
                  zIndex: 1,
                },
                children: [
                  e.jsxs('h4', {
                    style: { color: '#1f2937', marginBottom: '1rem', fontSize: '1rem' },
                    children: ['🔗 ', n === 'fr' ? 'Nos Sites Web' : h('websites')],
                  }),
                  e.jsxs('div', {
                    style: { fontSize: '0.9rem', color: '#374151' },
                    children: [
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🌐' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://sino-shipping.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'sino-shipping.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– Global freight forwarder',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🇭🇰' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://fschina.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'fschina.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– FS International (HK)',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🇪🇸' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://es.sino-shipping.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'es.sino-shipping.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– SINO Shipping (ES)',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🧩' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://moreplusfsi.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'moreplusfsi.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– MorePlus (Sourcing)',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🧭' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://eaanetwork.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'eaanetwork.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– EAA Network',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🤝' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://can-qianhai.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'can-qianhai.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– CAN Alliance',
                          }),
                        ],
                      }),
                      e.jsxs('p', {
                        style: {
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.5rem',
                          margin: '0.25rem 0',
                        },
                        children: [
                          e.jsx('span', { children: '🚢' }),
                          e.jsx('strong', {
                            children: e.jsx('a', {
                              href: 'https://mcc-qianhai.com',
                              target: '_blank',
                              rel: 'noreferrer',
                              style: {
                                color: '#0ea5e9',
                                textDecoration: 'underline',
                                textUnderlineOffset: '2px',
                                fontSize: '0.85rem',
                                whiteSpace: 'nowrap',
                              },
                              children: 'mcc-qianhai.com',
                            }),
                          }),
                          e.jsx('span', {
                            style: { color: '#6b7280', fontSize: '0.8rem', whiteSpace: 'nowrap' },
                            children: '– Export to China',
                          }),
                        ],
                      }),
                    ],
                  }),
                  e.jsxs('h4', {
                    style: { color: '#1f2937', marginTop: '1.5rem', marginBottom: '1rem' },
                    children: ['⚡ ', n === 'fr' ? 'Actions Rapides' : h('actions')],
                  }),
                  e.jsx('div', {
                    style: { display: 'flex', flexDirection: 'column', gap: '0.5rem' },
                    children: e.jsxs('button', {
                      onClick: (m) => {
                        (m.preventDefault(), m.stopPropagation());
                        const I =
                          n === 'fr'
                            ? 'Nouveau formulaire prêt !'
                            : n === 'es'
                              ? '¡Nuevo formulario listo!'
                              : n === 'de'
                                ? 'Neues Formular bereit!'
                                : n === 'it'
                                  ? 'Nuovo modulo pronto!'
                                  : n === 'nl'
                                    ? 'Nieuw formulier klaar!'
                                    : n === 'zh'
                                      ? '新表单已准备!'
                                      : n === 'ar'
                                        ? 'استمارة جديدة جاهزة!'
                                        : n === 'pt'
                                          ? 'Novo formulário pronto!'
                                          : n === 'tr'
                                            ? 'Yeni form hazır!'
                                            : n === 'ru'
                                              ? 'Новая форма готова!'
                                              : 'New form ready!';
                        try {
                          (A({
                            country: '',
                            origin: '',
                            mode: '',
                            email: '',
                            phone: '',
                            phoneCountryCode: '+234',
                            locationType: '',
                            city: '',
                            zipCode: '',
                            destLocationType: '',
                            destCity: '',
                            destZipCode: '',
                            destPort: '',
                            firstName: '',
                            lastName: '',
                            companyName: '',
                            shipperType: '',
                            loads: [JSON.parse(JSON.stringify(Le))],
                            goodsValue: '',
                            goodsCurrency: 'USD',
                            isPersonalOrHazardous: !1,
                            areGoodsReady: 'yes',
                            goodsDescription: '',
                            specialRequirements: '',
                            remarks: '',
                          }),
                            y({
                              country: null,
                              origin: null,
                              mode: null,
                              email: null,
                              phone: null,
                              phoneCountryCode: null,
                              city: null,
                              zipCode: null,
                              destCity: null,
                              destZipCode: null,
                              destPort: null,
                              firstName: null,
                              lastName: null,
                              companyName: null,
                              shipperType: null,
                              goodsValue: null,
                              destLocationType: null,
                            }),
                            M(1),
                            a(''),
                            z(I));
                        } catch {
                          z('Error resetting form');
                        }
                      },
                      style: {
                        padding: '0.75rem 1.25rem',
                        backgroundColor: '#10b981',
                        color: 'white',
                        border: 'none',
                        borderRadius: '0.75rem',
                        cursor: 'pointer',
                        fontSize: '0.95rem',
                        fontWeight: '600',
                        transition: 'all 0.3s ease',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        boxShadow: '0 4px 12px rgba(16, 185, 129, 0.25)',
                        position: 'relative',
                        zIndex: 1e3,
                        pointerEvents: 'auto',
                        userSelect: 'none',
                        outline: 'none',
                      },
                      onMouseEnter: (m) => {
                        ((m.currentTarget.style.backgroundColor = '#059669'),
                          (m.currentTarget.style.transform = 'translateY(-2px)'),
                          (m.currentTarget.style.boxShadow =
                            '0 8px 20px rgba(16, 185, 129, 0.35)'));
                      },
                      onMouseLeave: (m) => {
                        ((m.currentTarget.style.backgroundColor = '#10b981'),
                          (m.currentTarget.style.transform = 'translateY(0)'),
                          (m.currentTarget.style.boxShadow =
                            '0 4px 12px rgba(16, 185, 129, 0.25)'));
                      },
                      children: ['➕ ', n === 'fr' ? 'Faire une autre demande' : h('newRequest')],
                    }),
                  }),
                ],
              }),
            ],
          }),
          e.jsxs('div', {
            style: {
              textAlign: 'center',
              padding: '2rem',
              backgroundColor: 'rgba(59, 130, 246, 0.05)',
              borderRadius: '1rem',
              border: '1px solid rgba(59, 130, 246, 0.2)',
            },
            children: [
              e.jsxs('h3', {
                style: { color: '#1f2937', marginBottom: '1rem' },
                children: ['🙏 ', n === 'fr' ? 'Merci pour votre confiance !' : h('thankYouTitle')],
              }),
              e.jsx('p', {
                style: { color: '#6b7280', fontSize: '1.1rem' },
                children:
                  n === 'fr'
                    ? 'Votre demande sera traitée avec le plus grand soin par nos experts en transport international.'
                    : h('thankYouMessage'),
              }),
            ],
          }),
        ],
      }),
    });
  },
  Ka = [
    {
      code: 'SHA',
      name: 'Shanghai',
      region: 'East China',
      type: 'sea',
      volume: '47M TEU',
      flag: '🚢',
    },
    {
      code: 'SZX',
      name: 'Shenzhen',
      region: 'South China',
      type: 'sea',
      volume: '28M TEU',
      flag: '🚢',
    },
    {
      code: 'NGB',
      name: 'Ningbo-Zhoushan',
      region: 'East China',
      type: 'sea',
      volume: '31M TEU',
      flag: '🚢',
    },
    {
      code: 'GZH',
      name: 'Guangzhou',
      region: 'South China',
      type: 'sea',
      volume: '24M TEU',
      flag: '🚢',
    },
    {
      code: 'QIN',
      name: 'Qingdao',
      region: 'North China',
      type: 'sea',
      volume: '23M TEU',
      flag: '🚢',
    },
    {
      code: 'TJN',
      name: 'Tianjin',
      region: 'North China',
      type: 'sea',
      volume: '20M TEU',
      flag: '🚢',
    },
    {
      code: 'XMN',
      name: 'Xiamen',
      region: 'South China',
      type: 'sea',
      volume: '12M TEU',
      flag: '🚢',
    },
    {
      code: 'DLN',
      name: 'Dalian',
      region: 'North China',
      type: 'sea',
      volume: '10M TEU',
      flag: '🚢',
    },
    {
      code: 'YTN',
      name: 'Yantian',
      region: 'South China',
      type: 'sea',
      volume: '14M TEU',
      flag: '🚢',
    },
    {
      code: 'LYG',
      name: 'Lianyungang',
      region: 'East China',
      type: 'sea',
      volume: '8M TEU',
      flag: '🚢',
    },
  ].sort((g, a) => g.name.localeCompare(a.name)),
  Va = [
    {
      code: 'PEK',
      name: 'Beijing Capital',
      region: 'North China',
      type: 'air',
      volume: '2M tons',
      flag: '✈️',
    },
    {
      code: 'PVG',
      name: 'Shanghai Pudong',
      region: 'East China',
      type: 'air',
      volume: '3.6M tons',
      flag: '✈️',
    },
    {
      code: 'CAN',
      name: 'Guangzhou Baiyun',
      region: 'South China',
      type: 'air',
      volume: '1.9M tons',
      flag: '✈️',
    },
    {
      code: 'SZX',
      name: "Shenzhen Bao'an",
      region: 'South China',
      type: 'air',
      volume: '1.4M tons',
      flag: '✈️',
    },
    {
      code: 'CTU',
      name: 'Chengdu Shuangliu',
      region: 'West China',
      type: 'air',
      volume: '1M tons',
      flag: '✈️',
    },
    {
      code: 'SHA',
      name: 'Shanghai Hongqiao',
      region: 'East China',
      type: 'air',
      volume: '0.8M tons',
      flag: '✈️',
    },
    {
      code: 'KMG',
      name: 'Kunming Changshui',
      region: 'Southwest China',
      type: 'air',
      volume: '0.7M tons',
      flag: '✈️',
    },
    {
      code: 'XIY',
      name: "Xi'an Xianyang",
      region: 'Northwest China',
      type: 'air',
      volume: '0.6M tons',
      flag: '✈️',
    },
    {
      code: 'HGH',
      name: 'Hangzhou Xiaoshan',
      region: 'East China',
      type: 'air',
      volume: '0.5M tons',
      flag: '✈️',
    },
    {
      code: 'NKG',
      name: 'Nanjing Lukou',
      region: 'East China',
      type: 'air',
      volume: '0.4M tons',
      flag: '✈️',
    },
  ].sort((g, a) => g.name.localeCompare(a.name)),
  Ua = [
    {
      code: 'ZIH',
      name: 'Zhengzhou Rail Terminal',
      region: 'Central China',
      type: 'rail',
      volume: '250 000+ TEU',
      flag: '🚂',
    },
    {
      code: 'CQN',
      name: 'Chongqing Rail Terminal',
      region: 'Southwest China',
      type: 'rail',
      volume: '450 000+ TEU',
      flag: '🚂',
    },
    {
      code: 'XIY',
      name: "Xi'an Rail Terminal",
      region: 'Northwest China',
      type: 'rail',
      volume: '570 000+ TEU',
      flag: '🚂',
    },
    {
      code: 'WUH',
      name: 'Wuhan Rail Terminal',
      region: 'Central China',
      type: 'rail',
      volume: '200 000 TEU',
      flag: '🚂',
    },
    {
      code: 'CDU',
      name: 'Chengdu Rail Terminal',
      region: 'Southwest China',
      type: 'rail',
      volume: '500 000+ TEU',
      flag: '🚂',
    },
  ].sort((g, a) => g.name.localeCompare(a.name)),
  ie = (g, a) => {
    const z = ge[a] || ge.en || {};
    return (z == null ? void 0 : z[g]) ?? g;
  },
  Ya = () => {
    const {
        currentStep: g,
        setCurrentStep: a,
        nextStep: z,
        prevStep: b,
        formData: n,
        setFieldValid: p,
        isCountryListVisible: A,
        userLang: y,
        setUserLang: M,
        activeLoadIndex: H,
        step1SubStep: N,
        step6SubStep: l,
      } = Pe(),
      { message: t, showToast: u } = La(),
      [P, f] = r.useState(''),
      [O, _] = r.useState(!1),
      J = [
        { value: 'en', label: '🇺🇸 English' },
        { value: 'fr', label: '🇫🇷 Français' },
        { value: 'zh', label: '🇨🇳 中文' },
        { value: 'de', label: '🇩🇪 Deutsch' },
        { value: 'es', label: '🇪🇸 Español' },
        { value: 'it', label: '🇮🇹 Italiano' },
        { value: 'nl', label: '🇳🇱 Nederlands' },
        { value: 'ar', label: '🇸🇦 العربية' },
        { value: 'pt', label: '🇵🇹 Português' },
        { value: 'tr', label: '🇹🇷 Türkçe' },
        { value: 'ru', label: '🇷🇺 Русский' },
      ],
      x = (C, j) => {
        const K = String(j || '').trim();
        return K ? /.+@.+\..+/.test(K) : !1;
      },
      h = () => {
        var C;
        return { ...((C = n == null ? void 0 : n.loads) == null ? void 0 : C[H]) };
      },
      T = (C) => {
        switch (C) {
          case 1:
            return !!n.country;
          case 2:
            return !!n.mode;
          case 3:
          case 4:
          case 5:
            return !0;
          case 6:
            const j = n.customerType === 'company' ? 5 : 4;
            return l < j ? !0 : !!(n.email && x('email', n.email));
          default:
            return !0;
        }
      };
    r.useEffect(() => {
      _(T(g));
    }, [g, n.country, n.mode, n.email, l, n.customerType]);
    const m = () => {
        I(g) && z();
      },
      I = (C) => {
        switch (C) {
          case 1:
            if (!n.country)
              return (
                u(ie('validationDestinationCountry', y)),
                p((K) => ({ ...K, country: !1 })),
                !1
              );
            p((K) => ({
              ...K,
              country: !0,
              destLocationType: null,
              destCity: null,
              destZipCode: null,
              destPort: null,
            }));
            break;
          case 2:
            if (!n.mode)
              return (u(ie('validationShippingMode', y)), p((K) => ({ ...K, mode: !1 })), !1);
            p((K) => ({ ...K, mode: !0 }));
            break;
          case 3:
            p((K) => ({ ...K, locationType: null, origin: null, city: null, zipCode: null }));
            break;
          case 4:
            p((K) => ({ ...K }));
            break;
          case 5:
            p((K) => ({ ...K, goodsValue: null, areGoodsReady: null }));
            break;
          case 6:
            const j = n.customerType === 'company' ? 5 : 4;
            if (l < j) return !0;
            if (!n.email || !x('email', n.email))
              return (u(ie('validationEmail', y)), p((K) => ({ ...K, email: !1 })), !1);
            p((K) => ({
              ...K,
              customerType: null,
              firstName: null,
              lastName: null,
              companyName: null,
              shipperType: null,
              email: !0,
            }));
            break;
        }
        return !0;
      };
    r.useEffect(() => {
      const C = (j) => {
        if (j.key !== 'Enter') return;
        const K = j.target,
          S = K.tagName === 'TEXTAREA',
          B = K.tagName === 'INPUT';
        if (!(A || S) && g !== 7) {
          if (B) {
            if (g === 6) return;
            j.preventDefault();
          }
          if (g < 6) O && m();
          else if (g === 6 && O) {
            const k = document.querySelector('form');
            k && k.requestSubmit();
          }
        }
      };
      return (
        document.addEventListener('keydown', C),
        () => document.removeEventListener('keydown', C)
      );
    }, [g, z, A, O, m]);
    const F = async (C) => {
      if ((C.preventDefault(), await Promise.resolve(), O)) {
        const j = 'https://hook.eu1.make.com/8afhony6fmk7pgxavn969atkmq0xrm1s',
          K = 'https://n8n.srv783609.hstgr.cloud/webhook-test/228cb671-34ad-4e2e-95ab-95d830d875df',
          S = 'https://n8n.srv783609.hstgr.cloud/webhook/228cb671-34ad-4e2e-95ab-95d830d875df',
          B = h(),
          i = { ...n },
          k = xe.find((E) => E.code === n.country);
        k && (i.country = k.name);
        const c = [...Ka, ...Va, ...Ua].find((E) => E.code === n.origin);
        c && (i.origin = c.name);
        const D = n.loads.map((E, W) => {
            const L = W === H ? B : { ...E };
            return L.shippingType === 'container'
              ? {
                  shippingType: 'container',
                  numberOfUnits: L.numberOfUnits,
                  containerType: L.containerType,
                  isOverweight: L.isOverweight,
                  calculationType: '',
                  packageType: '',
                  palletType: '',
                  dimensions: { length: '', width: '', height: '' },
                  dimensionUnit: Le.dimensionUnit,
                  weightPerUnit: '',
                  weightUnit: Le.weightUnit,
                  totalVolume: '',
                  totalVolumeUnit: Le.totalVolumeUnit,
                  totalWeight: '',
                  totalWeightUnit: Le.totalWeightUnit,
                }
              : L;
          }),
          R = new Date(),
          V = R.toLocaleDateString('en-CA', { timeZone: 'Asia/Hong_Kong' }),
          ee = R.toLocaleTimeString('en-GB', { timeZone: 'Asia/Hong_Kong', hourCycle: 'h23' }),
          ne = `${V}T${ee}+08:00`,
          q = `form-${n.country || 'N/A'}-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,
          v = { submissionId: q, timestamp: ne, ...i, loads: D };
        try {
          const E = [
              fetch(K, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(v),
              }),
              fetch(S, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(v),
              }),
              fetch(j, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(v),
              }),
            ],
            W = await Promise.allSettled(E);
          W.forEach((G, Q) => {
            const Z = [K, S, j][Q];
            G.status === 'fulfilled'
              ? console.log(`Webhook to ${Z} succeeded.`, G.value)
              : console.error(`Webhook to ${Z} failed.`, G.reason);
          });
          const L = W[2];
          if (L.status === 'rejected' || (L.status === 'fulfilled' && !L.value.ok)) {
            const G = L.status === 'rejected' ? L.reason : await L.value.text(),
              Q = L.status === 'fulfilled' ? L.value.status : 'N/A';
            (console.error('Main webhook (make.com) failed:', Q, G),
              u(`Error: Main quote submission failed. Status: ${Q}.`));
            return;
          }
          (f(q), a(7));
        } catch (E) {
          (console.error('An unexpected error occurred during submission:', E),
            u(ie('errorSubmission', y)));
        }
      }
    };
    return e.jsxs('div', {
      className: 'quote-form-container hover-lift',
      children: [
        e.jsx('div', {
          className: 'form-header form-header-compact',
          children: e.jsxs('div', {
            className: 'form-header-row',
            children: [
              e.jsx('div', {
                className: 'form-header-text',
                children: e.jsx('h1', {
                  className: 'form-title animate-fade-in',
                  children: ie(g === 7 ? 'confirmationMainTitle' : 'mainTitle', y),
                }),
              }),
              e.jsx('div', {
                className: 'language-selector-header language-selector-compact',
                children: e.jsx(ye, {
                  value: y,
                  onChange: (C) => M(C),
                  options: J,
                  placeholder: 'Select language',
                }),
              }),
            ],
          }),
        }),
        g !== 7 &&
          e.jsx(Ca, {
            currentStep: g,
            totalSteps: 6,
            compact: !0,
            translations: {
              timelineDestination: ie('timelineDestination', y),
              timelineMode: ie('timelineMode', y),
              timelineOrigin: ie('timelineOrigin', y),
              timelineCargo: ie('timelineCargo', y),
              timelineGoodsDetails: ie('timelineGoodsDetails', y),
              timelineContact: ie('timelineContact', y),
              stepCounter: ie('stepCounter', y),
            },
          }),
        e.jsxs('div', {
          className: 'form-content-scroll',
          children: [
            e.jsxs('form', {
              onSubmit: F,
              className: 'quote-form',
              children: [
                e.jsx(Ma, {}),
                e.jsx(Ha, {}),
                e.jsx(Ta, {}),
                e.jsx(Ea, {}),
                e.jsx(Ga, {}),
                e.jsx(Ra, {}),
                g !== 7 &&
                  e.jsxs('div', {
                    className: 'form-footer',
                    children: [
                      e.jsx('div', {
                        className: 'trust-badge glassmorphism compact',
                        children: e.jsxs('span', { children: ['💡 ', ie('trustBadge', y)] }),
                      }),
                      e.jsxs('div', {
                        className: 'form-navigation',
                        children: [
                          e.jsx('div', {
                            children:
                              (g > 1 || (g === 1 && N > 1)) &&
                              e.jsxs('button', {
                                type: 'button',
                                onClick: b,
                                className: 'btn btn-secondary',
                                style: {
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: 'var(--space-2)',
                                },
                                children: [e.jsx(Aa, { size: 16 }), ie('previous', y)],
                              }),
                          }),
                          e.jsx('div', {
                            children:
                              g < 6 || (g === 6 && l < (n.customerType === 'company' ? 5 : 4))
                                ? e.jsxs('button', {
                                    type: 'button',
                                    onClick: m,
                                    className: 'btn btn-primary',
                                    disabled: !O,
                                    style: {
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: 'var(--space-2)',
                                    },
                                    children: [ie('next', y), e.jsx(Oe, { size: 16 })],
                                  })
                                : e.jsxs('button', {
                                    type: 'submit',
                                    className: 'btn btn-success',
                                    style: {
                                      display: 'flex',
                                      alignItems: 'center',
                                      gap: 'var(--space-2)',
                                    },
                                    children: [ie('submitCta', y), e.jsx(Oe, { size: 16 })],
                                  }),
                          }),
                        ],
                      }),
                    ],
                  }),
              ],
            }),
            e.jsx(Fa, { submissionId: P, setSubmissionId: f, showToast: u }),
          ],
        }),
        e.jsx(Ia, { message: t, isVisible: !!t }),
      ],
    });
  },
  Oa = {
    AF: {
      en: 'Afghanistan',
      fr: 'Afghanistan',
      de: 'Afghanistan',
      es: 'Afganistán',
      it: 'Afghanistan',
      nl: 'Afghanistan',
      ar: 'أفغانستان',
      pt: 'Afeganistão',
      tr: 'Afganistan',
      ru: 'Афганистан',
      zh: '阿富汗',
    },
    AL: {
      en: 'Albania',
      fr: 'Albanie',
      de: 'Albanien',
      es: 'Albania',
      it: 'Albania',
      nl: 'Albanië',
      ar: 'ألبانيا',
      pt: 'Albânia',
      tr: 'Arnavutluk',
      ru: 'Албания',
      zh: '阿尔巴尼亚',
    },
    DZ: {
      en: 'Algeria',
      fr: 'Algérie',
      de: 'Algerien',
      es: 'Argelia',
      it: 'Algeria',
      nl: 'Algerije',
      ar: 'الجزائر',
      pt: 'Argélia',
      tr: 'Cezayir',
      ru: 'Алжир',
      zh: '阿尔及利亚',
    },
    AS: {
      en: 'American Samoa',
      fr: 'Samoa américaines',
      de: 'Amerikanisch-Samoa',
      es: 'Samoa Americana',
      it: 'Samoa Americane',
      nl: 'Amerikaans-Samoa',
      ar: 'ساموا الأمريكية',
      pt: 'Samoa Americana',
      tr: 'Amerikan Samoası',
      ru: 'Американское Самоа',
      zh: '美属萨摩亚',
    },
    AD: {
      en: 'Andorra',
      fr: 'Andorre',
      de: 'Andorra',
      es: 'Andorra',
      it: 'Andorra',
      nl: 'Andorra',
      ar: 'أندورا',
      pt: 'Andorra',
      tr: 'Andorra',
      ru: 'Андорра',
      zh: '安道尔',
    },
    AO: {
      en: 'Angola',
      fr: 'Angola',
      de: 'Angola',
      es: 'Angola',
      it: 'Angola',
      nl: 'Angola',
      ar: 'أنغولا',
      pt: 'Angola',
      tr: 'Angola',
      ru: 'Ангола',
      zh: '安哥拉',
    },
    AI: {
      en: 'Anguilla',
      fr: 'Anguilla',
      de: 'Anguilla',
      es: 'Anguila',
      it: 'Anguilla',
      nl: 'Anguilla',
      ar: 'أنغويلا',
      pt: 'Anguilla',
      tr: 'Anguilla',
      ru: 'Ангилья',
      zh: '安圭拉',
    },
    AQ: {
      en: 'Antarctica',
      fr: 'Antarctique',
      de: 'Antarktis',
      es: 'Antártida',
      it: 'Antartide',
      nl: 'Antarctica',
      ar: 'أنتاركتيكا',
      pt: 'Antártica',
      tr: 'Antarktika',
      ru: 'Антарктида',
      zh: '南极洲',
    },
    AG: {
      en: 'Antigua and Barbuda',
      fr: 'Antigua-et-Barbuda',
      de: 'Antigua und Barbuda',
      es: 'Antigua y Barbuda',
      it: 'Antigua e Barbuda',
      nl: 'Antigua en Barbuda',
      ar: 'أنتيغوا وباربودا',
      pt: 'Antígua e Barbuda',
      tr: 'Antigua ve Barbuda',
      ru: 'Антигуа и Барбуда',
      zh: '安提瓜和巴布达',
    },
    AR: {
      en: 'Argentina',
      fr: 'Argentine',
      de: 'Argentinien',
      es: 'Argentina',
      it: 'Argentina',
      nl: 'Argentinië',
      ar: 'الأرجنتين',
      pt: 'Argentina',
      tr: 'Arjantin',
      ru: 'Аргентина',
      zh: '阿根廷',
    },
    AM: {
      en: 'Armenia',
      fr: 'Arménie',
      de: 'Armenien',
      es: 'Armenia',
      it: 'Armenia',
      nl: 'Armenië',
      ar: 'أرمينيا',
      pt: 'Armênia',
      tr: 'Ermenistan',
      ru: 'Армения',
      zh: '亚美尼亚',
    },
    AW: {
      en: 'Aruba',
      fr: 'Aruba',
      de: 'Aruba',
      es: 'Aruba',
      it: 'Aruba',
      nl: 'Aruba',
      ar: 'أروبا',
      pt: 'Aruba',
      tr: 'Aruba',
      ru: 'Аруба',
      zh: '阿鲁巴',
    },
    AU: {
      en: 'Australia',
      fr: 'Australie',
      de: 'Australien',
      es: 'Australia',
      it: 'Australia',
      nl: 'Australië',
      ar: 'أستراليا',
      pt: 'Austrália',
      tr: 'Avustralya',
      ru: 'Австралия',
      zh: '澳大利亚',
    },
    AT: {
      en: 'Austria',
      fr: 'Autriche',
      de: 'Österreich',
      es: 'Austria',
      it: 'Austria',
      nl: 'Oostenrijk',
      ar: 'النمسا',
      pt: 'Áustria',
      tr: 'Avusturya',
      ru: 'Австрия',
      zh: '奥地利',
    },
    AZ: {
      en: 'Azerbaijan',
      fr: 'Azerbaïdjan',
      de: 'Aserbaidschan',
      es: 'Azerbaiyán',
      it: 'Azerbaigian',
      nl: 'Azerbeidzjan',
      ar: 'أذربيجان',
      pt: 'Azerbaijão',
      tr: 'Azerbaycan',
      ru: 'Азербайджан',
      zh: '阿塞拜疆',
    },
    BS: {
      en: 'Bahamas',
      fr: 'Bahamas',
      de: 'Bahamas',
      es: 'Bahamas',
      it: 'Bahamas',
      nl: 'Bahamas',
      ar: 'الباهاما',
      pt: 'Bahamas',
      tr: 'Bahamalar',
      ru: 'Багамские Острова',
      zh: '巴哈马',
    },
    BH: {
      en: 'Bahrain',
      fr: 'Bahreïn',
      de: 'Bahrain',
      es: 'Baréin',
      it: 'Bahrain',
      nl: 'Bahrein',
      ar: 'البحرين',
      pt: 'Bahrein',
      tr: 'Bahreyn',
      ru: 'Бахрейн',
      zh: '巴林',
    },
    BD: {
      en: 'Bangladesh',
      fr: 'Bangladesh',
      de: 'Bangladesch',
      es: 'Bangladés',
      it: 'Bangladesh',
      nl: 'Bangladesh',
      ar: 'بنغلاديش',
      pt: 'Bangladesh',
      tr: 'Bangladeş',
      ru: 'Бангладеш',
      zh: '孟加拉国',
    },
    BB: {
      en: 'Barbados',
      fr: 'Barbade',
      de: 'Barbados',
      es: 'Barbados',
      it: 'Barbados',
      nl: 'Barbados',
      ar: 'بربادوس',
      pt: 'Barbados',
      tr: 'Barbados',
      ru: 'Барбадос',
      zh: '巴巴多斯',
    },
    BY: {
      en: 'Belarus',
      fr: 'Biélorussie',
      de: 'Belarus',
      es: 'Bielorrusia',
      it: 'Bielorussia',
      nl: 'Wit-Rusland',
      ar: 'بيلاروس',
      pt: 'Bielorrússia',
      tr: 'Belarus',
      ru: 'Беларусь',
      zh: '白俄罗斯',
    },
    BE: {
      en: 'Belgium',
      fr: 'Belgique',
      de: 'Belgien',
      es: 'Bélgica',
      it: 'Belgio',
      nl: 'België',
      ar: 'بلجيكا',
      pt: 'Bélgica',
      tr: 'Belçika',
      ru: 'Бельгия',
      zh: '比利时',
    },
    BZ: {
      en: 'Belize',
      fr: 'Belize',
      de: 'Belize',
      es: 'Belice',
      it: 'Belize',
      nl: 'Belize',
      ar: 'بليز',
      pt: 'Belize',
      tr: 'Belize',
      ru: 'Белиз',
      zh: '伯利兹',
    },
    BJ: {
      en: 'Benin',
      fr: 'Bénin',
      de: 'Benin',
      es: 'Benín',
      it: 'Benin',
      nl: 'Benin',
      ar: 'بنين',
      pt: 'Benin',
      tr: 'Benin',
      ru: 'Бенин',
      zh: '贝宁',
    },
    BM: {
      en: 'Bermuda',
      fr: 'Bermudes',
      de: 'Bermuda',
      es: 'Bermudas',
      it: 'Bermuda',
      nl: 'Bermuda',
      ar: 'برمودا',
      pt: 'Bermudas',
      tr: 'Bermuda',
      ru: 'Бермуды',
      zh: '百慕大',
    },
    BT: {
      en: 'Bhutan',
      fr: 'Bhoutan',
      de: 'Bhutan',
      es: 'Bután',
      it: 'Bhutan',
      nl: 'Bhutan',
      ar: 'بوتان',
      pt: 'Butão',
      tr: 'Bhutan',
      ru: 'Бутан',
      zh: '不丹',
    },
    BO: {
      en: 'Bolivia',
      fr: 'Bolivie',
      de: 'Bolivien',
      es: 'Bolivia',
      it: 'Bolivia',
      nl: 'Bolivië',
      ar: 'بوليفيا',
      pt: 'Bolívia',
      tr: 'Bolivya',
      ru: 'Боливия',
      zh: '玻利维亚',
    },
    BA: {
      en: 'Bosnia and Herzegovina',
      fr: 'Bosnie-Herzégovine',
      de: 'Bosnien und Herzegowina',
      es: 'Bosnia y Herzegovina',
      it: 'Bosnia ed Erzegovina',
      nl: 'Bosnië en Herzegovina',
      ar: 'البوسنة والهرسك',
      pt: 'Bósnia e Herzegovina',
      tr: 'Bosna Hersek',
      ru: 'Босния и Герцеговина',
      zh: '波斯尼亚和黑塞哥维那',
    },
    BW: {
      en: 'Botswana',
      fr: 'Botswana',
      de: 'Botswana',
      es: 'Botsuana',
      it: 'Botswana',
      nl: 'Botswana',
      ar: 'بوتسوانا',
      pt: 'Botswana',
      tr: 'Botsvana',
      ru: 'Ботсвана',
      zh: '博茨瓦纳',
    },
    BR: {
      en: 'Brazil',
      fr: 'Brésil',
      de: 'Brasilien',
      es: 'Brasil',
      it: 'Brasile',
      nl: 'Brazilië',
      ar: 'البرازيل',
      pt: 'Brasil',
      tr: 'Brezilya',
      ru: 'Бразилия',
      zh: '巴西',
    },
    IO: {
      en: 'British Indian Ocean Territory',
      fr: "Territoire britannique de l'océan Indien",
      de: 'Britisches Territorium im Indischen Ozean',
      es: 'Territorio Británico del Océano Índico',
      it: "Territorio Britannico dell'Oceano Indiano",
      nl: 'Brits Indische Oceaanterritorium',
      ar: 'إقليم المحيط الهندي البريطاني',
      pt: 'Território Britânico do Oceano Índico',
      tr: 'Britanya Hint Okyanusu Toprakları',
      ru: 'Британская территория в Индийском океане',
      zh: '英属印度洋领地',
    },
    VG: {
      en: 'British Virgin Islands',
      fr: 'Îles Vierges britanniques',
      de: 'Britische Jungferninseln',
      es: 'Islas Vírgenes Británicas',
      it: 'Isole Vergini Britanniche',
      nl: 'Britse Maagdeneilanden',
      ar: 'جزر العذراء البريطانية',
      pt: 'Ilhas Virgens Britânicas',
      tr: 'Britanya Virjin Adaları',
      ru: 'Британские Виргинские острова',
      zh: '英属维尔京群岛',
    },
    BN: {
      en: 'Brunei',
      fr: 'Brunei',
      de: 'Brunei',
      es: 'Brunéi',
      it: 'Brunei',
      nl: 'Brunei',
      ar: 'بروناي',
      pt: 'Brunei',
      tr: 'Brunei',
      ru: 'Бруней',
      zh: '文莱',
    },
    BG: {
      en: 'Bulgaria',
      fr: 'Bulgarie',
      de: 'Bulgarien',
      es: 'Bulgaria',
      it: 'Bulgaria',
      nl: 'Bulgarije',
      ar: 'بلغاريا',
      pt: 'Bulgária',
      tr: 'Bulgaristan',
      ru: 'Болгария',
      zh: '保加利亚',
    },
    BF: {
      en: 'Burkina Faso',
      fr: 'Burkina Faso',
      de: 'Burkina Faso',
      es: 'Burkina Faso',
      it: 'Burkina Faso',
      nl: 'Burkina Faso',
      ar: 'بوركينا فاسو',
      pt: 'Burkina Faso',
      tr: 'Burkina Faso',
      ru: 'Буркина-Фасо',
      zh: '布基纳法索',
    },
    BI: {
      en: 'Burundi',
      fr: 'Burundi',
      de: 'Burundi',
      es: 'Burundi',
      it: 'Burundi',
      nl: 'Burundi',
      ar: 'بوروندي',
      pt: 'Burundi',
      tr: 'Burundi',
      ru: 'Бурунди',
      zh: '布隆迪',
    },
    KH: {
      en: 'Cambodia',
      fr: 'Cambodge',
      de: 'Kambodscha',
      es: 'Camboya',
      it: 'Cambogia',
      nl: 'Cambodja',
      ar: 'كمبوديا',
      pt: 'Camboja',
      tr: 'Kamboçya',
      ru: 'Камбоджа',
      zh: '柬埔寨',
    },
    CM: {
      en: 'Cameroon',
      fr: 'Cameroun',
      de: 'Kamerun',
      es: 'Camerún',
      it: 'Camerun',
      nl: 'Kameroen',
      ar: 'الكاميرون',
      pt: 'Camarões',
      tr: 'Kamerun',
      ru: 'Камерун',
      zh: '喀麦隆',
    },
    CA: {
      en: 'Canada',
      fr: 'Canada',
      de: 'Kanada',
      es: 'Canadá',
      it: 'Canada',
      nl: 'Canada',
      ar: 'كندا',
      pt: 'Canadá',
      tr: 'Kanada',
      ru: 'Канада',
      zh: '加拿大',
    },
    CV: {
      en: 'Cape Verde',
      fr: 'Cap-Vert',
      de: 'Kap Verde',
      es: 'Cabo Verde',
      it: 'Capo Verde',
      nl: 'Kaapverdië',
      ar: 'الرأس الأخضر',
      pt: 'Cabo Verde',
      tr: 'Yeşil Burun Adaları',
      ru: 'Кабо-Верде',
      zh: '佛得角',
    },
    KY: {
      en: 'Cayman Islands',
      fr: 'Îles Caïmans',
      de: 'Kaimaninseln',
      es: 'Islas Caimán',
      it: 'Isole Cayman',
      nl: 'Kaaimaneilanden',
      ar: 'جزر كايمان',
      pt: 'Ilhas Cayman',
      tr: 'Cayman Adaları',
      ru: 'Острова Кайман',
      zh: '开曼群岛',
    },
    CF: {
      en: 'Central African Republic',
      fr: 'République centrafricaine',
      de: 'Zentralafrikanische Republik',
      es: 'República Centroafricana',
      it: 'Repubblica Centrafricana',
      nl: 'Centraal-Afrikaanse Republiek',
      ar: 'جمهورية أفريقيا الوسطى',
      pt: 'República Centro-Africana',
      tr: 'Orta Afrika Cumhuriyeti',
      ru: 'Центральноафриканская Республика',
      zh: '中非共和国',
    },
    TD: {
      en: 'Chad',
      fr: 'Tchad',
      de: 'Tschad',
      es: 'Chad',
      it: 'Ciad',
      nl: 'Tsjaad',
      ar: 'تشاد',
      pt: 'Chade',
      tr: 'Çad',
      ru: 'Чад',
      zh: '乍得',
    },
    CL: {
      en: 'Chile',
      fr: 'Chili',
      de: 'Chile',
      es: 'Chile',
      it: 'Cile',
      nl: 'Chili',
      ar: 'تشيلي',
      pt: 'Chile',
      tr: 'Şili',
      ru: 'Чили',
      zh: '智利',
    },
    CN: {
      en: 'China',
      fr: 'Chine',
      de: 'China',
      es: 'China',
      it: 'Cina',
      nl: 'China',
      ar: 'الصين',
      pt: 'China',
      tr: 'Çin',
      ru: 'Китай',
      zh: '中国',
    },
    CX: {
      en: 'Christmas Island',
      fr: 'Île Christmas',
      de: 'Weihnachtsinsel',
      es: 'Isla de Navidad',
      it: 'Isola di Natale',
      nl: 'Kersteiland',
      ar: 'جزيرة عيد الميلاد',
      pt: 'Ilha do Natal',
      tr: 'Noel Adası',
      ru: 'Остров Рождества',
      zh: '圣诞岛',
    },
    CC: {
      en: 'Cocos Islands',
      fr: 'Îles Cocos',
      de: 'Kokosinseln',
      es: 'Islas Cocos',
      it: 'Isole Cocos',
      nl: 'Cocoseilanden',
      ar: 'جزر كوكوس',
      pt: 'Ilhas Cocos',
      tr: 'Cocos Adaları',
      ru: 'Кокосовые острова',
      zh: '科科斯群岛',
    },
    CO: {
      en: 'Colombia',
      fr: 'Colombie',
      de: 'Kolumbien',
      es: 'Colombia',
      it: 'Colombia',
      nl: 'Colombia',
      ar: 'كولومبيا',
      pt: 'Colômbia',
      tr: 'Kolombiya',
      ru: 'Колумбия',
      zh: '哥伦比亚',
    },
    KM: {
      en: 'Comoros',
      fr: 'Comores',
      de: 'Komoren',
      es: 'Comoras',
      it: 'Comore',
      nl: 'Comoren',
      ar: 'جزر القمر',
      pt: 'Comores',
      tr: 'Komorlar',
      ru: 'Коморские острова',
      zh: '科摩罗',
    },
    CK: {
      en: 'Cook Islands',
      fr: 'Îles Cook',
      de: 'Cookinseln',
      es: 'Islas Cook',
      it: 'Isole Cook',
      nl: 'Cookeilanden',
      ar: 'جزر كوك',
      pt: 'Ilhas Cook',
      tr: 'Cook Adaları',
      ru: 'Острова Кука',
      zh: '库克群岛',
    },
    CR: {
      en: 'Costa Rica',
      fr: 'Costa Rica',
      de: 'Costa Rica',
      es: 'Costa Rica',
      it: 'Costa Rica',
      nl: 'Costa Rica',
      ar: 'كوستاريكا',
      pt: 'Costa Rica',
      tr: 'Kosta Rika',
      ru: 'Коста-Рика',
      zh: '哥斯达黎加',
    },
    HR: {
      en: 'Croatia',
      fr: 'Croatie',
      de: 'Kroatien',
      es: 'Croacia',
      it: 'Croazia',
      nl: 'Kroatië',
      ar: 'كرواتيا',
      pt: 'Croácia',
      tr: 'Hırvatistan',
      ru: 'Хорватия',
      zh: '克罗地亚',
    },
    CU: {
      en: 'Cuba',
      fr: 'Cuba',
      de: 'Kuba',
      es: 'Cuba',
      it: 'Cuba',
      nl: 'Cuba',
      ar: 'كوبا',
      pt: 'Cuba',
      tr: 'Küba',
      ru: 'Куба',
      zh: '古巴',
    },
    CW: {
      en: 'Curacao',
      fr: 'Curaçao',
      de: 'Curaçao',
      es: 'Curazao',
      it: 'Curaçao',
      nl: 'Curaçao',
      ar: 'كوراساو',
      pt: 'Curaçao',
      tr: 'Curaçao',
      ru: 'Кюрасао',
      zh: '库拉索',
    },
    CY: {
      en: 'Cyprus',
      fr: 'Chypre',
      de: 'Zypern',
      es: 'Chipre',
      it: 'Cipro',
      nl: 'Cyprus',
      ar: 'قبرص',
      pt: 'Chipre',
      tr: 'Kıbrıs',
      ru: 'Кипр',
      zh: '塞浦路斯',
    },
    CZ: {
      en: 'Czech Republic',
      fr: 'République tchèque',
      de: 'Tschechien',
      es: 'República Checa',
      it: 'Repubblica Ceca',
      nl: 'Tsjechië',
      ar: 'جمهورية التشيك',
      pt: 'República Tcheca',
      tr: 'Çek Cumhuriyeti',
      ru: 'Чехия',
      zh: '捷克共和国',
    },
    CD: {
      en: 'Democratic Republic of the Congo',
      fr: 'République démocratique du Congo',
      de: 'Demokratische Republik Kongo',
      es: 'República Democrática del Congo',
      it: 'Repubblica Democratica del Congo',
      nl: 'Democratische Republiek Congo',
      ar: 'جمهورية الكونغو الديمقراطية',
      pt: 'República Democrática do Congo',
      tr: 'Kongo Demokratik Cumhuriyeti',
      ru: 'Демократическая Республика Конго',
      zh: '刚果民主共和国',
    },
    DK: {
      en: 'Denmark',
      fr: 'Danemark',
      de: 'Dänemark',
      es: 'Dinamarca',
      it: 'Danimarca',
      nl: 'Denemarken',
      ar: 'الدنمارك',
      pt: 'Dinamarca',
      tr: 'Danimarka',
      ru: 'Дания',
      zh: '丹麦',
    },
    DJ: {
      en: 'Djibouti',
      fr: 'Djibouti',
      de: 'Dschibuti',
      es: 'Yibuti',
      it: 'Gibuti',
      nl: 'Djibouti',
      ar: 'جيبوتي',
      pt: 'Djibouti',
      tr: 'Cibuti',
      ru: 'Джибути',
      zh: '吉布提',
    },
    DM: {
      en: 'Dominica',
      fr: 'Dominique',
      de: 'Dominica',
      es: 'Dominica',
      it: 'Dominica',
      nl: 'Dominica',
      ar: 'دومينيكا',
      pt: 'Dominica',
      tr: 'Dominika',
      ru: 'Доминика',
      zh: '多米尼克',
    },
    DO: {
      en: 'Dominican Republic',
      fr: 'République dominicaine',
      de: 'Dominikanische Republik',
      es: 'República Dominicana',
      it: 'Repubblica Dominicana',
      nl: 'Dominicaanse Republiek',
      ar: 'جمهورية الدومينيكان',
      pt: 'República Dominicana',
      tr: 'Dominik Cumhuriyeti',
      ru: 'Доминиканская Республика',
      zh: '多米尼加共和国',
    },
    EC: {
      en: 'Ecuador',
      fr: 'Équateur',
      de: 'Ecuador',
      es: 'Ecuador',
      it: 'Ecuador',
      nl: 'Ecuador',
      ar: 'الإكوادور',
      pt: 'Equador',
      tr: 'Ekvador',
      ru: 'Эквадор',
      zh: '厄瓜多尔',
    },
    EG: {
      en: 'Egypt',
      fr: 'Égypte',
      de: 'Ägypten',
      es: 'Egipto',
      it: 'Egitto',
      nl: 'Egypte',
      ar: 'مصر',
      pt: 'Egito',
      tr: 'Mısır',
      ru: 'Египет',
      zh: '埃及',
    },
    EH: {
      en: 'Western Sahara',
      fr: 'Sahara occidental',
      de: 'Westsahara',
      es: 'Sahara Occidental',
      it: 'Sahara Occidentale',
      nl: 'Westelijke Sahara',
      ar: 'الصحراء الغربية',
      pt: 'Saara Ocidental',
      tr: 'Batı Sahra',
      ru: 'Западная Сахара',
      zh: '西撒哈拉',
    },
    SV: {
      en: 'El Salvador',
      fr: 'El Salvador',
      de: 'El Salvador',
      es: 'El Salvador',
      it: 'El Salvador',
      nl: 'El Salvador',
      ar: 'السلفادور',
      pt: 'El Salvador',
      tr: 'El Salvador',
      ru: 'Сальвадор',
      zh: '萨尔瓦多',
    },
    GQ: {
      en: 'Equatorial Guinea',
      fr: 'Guinée équatoriale',
      de: 'Äquatorialguinea',
      es: 'Guinea Ecuatorial',
      it: 'Guinea Equatoriale',
      nl: 'Equatoriaal-Guinea',
      ar: 'غينيا الاستوائية',
      pt: 'Guiné Equatorial',
      tr: 'Ekvator Ginesi',
      ru: 'Экваториальная Гвинея',
      zh: '赤道几内亚',
    },
    ER: {
      en: 'Eritrea',
      fr: 'Érythrée',
      de: 'Eritrea',
      es: 'Eritrea',
      it: 'Eritrea',
      nl: 'Eritrea',
      ar: 'إريتريا',
      pt: 'Eritreia',
      tr: 'Eritre',
      ru: 'Эритрея',
      zh: '厄立特里亚',
    },
    EE: {
      en: 'Estonia',
      fr: 'Estonie',
      de: 'Estland',
      es: 'Estonia',
      it: 'Estonia',
      nl: 'Estland',
      ar: 'إستونيا',
      pt: 'Estônia',
      tr: 'Estonya',
      ru: 'Эстония',
      zh: '爱沙尼亚',
    },
    SZ: {
      en: 'Eswatini',
      fr: 'Eswatini',
      de: 'Eswatini',
      es: 'Esuatini',
      it: 'Eswatini',
      nl: 'Eswatini',
      ar: 'إسواتيني',
      pt: 'Eswatini',
      tr: 'Esvatini',
      ru: 'Эсватини',
      zh: '斯威士兰',
    },
    ET: {
      en: 'Ethiopia',
      fr: 'Éthiopie',
      de: 'Äthiopien',
      es: 'Etiopía',
      it: 'Etiopia',
      nl: 'Ethiopië',
      ar: 'إثيوبيا',
      pt: 'Etiópia',
      tr: 'Etiyopya',
      ru: 'Эфиопия',
      zh: '埃塞俄比亚',
    },
    FK: {
      en: 'Falkland Islands',
      fr: 'Îles Malouines',
      de: 'Falklandinseln',
      es: 'Islas Malvinas',
      it: 'Isole Falkland',
      nl: 'Falklandeilanden',
      ar: 'جزر فوكلاند',
      pt: 'Ilhas Malvinas',
      tr: 'Falkland Adaları',
      ru: 'Фолклендские острова',
      zh: '福克兰群岛',
    },
    FO: {
      en: 'Faroe Islands',
      fr: 'Îles Féroé',
      de: 'Färöer',
      es: 'Islas Feroe',
      it: 'Isole Faroe',
      nl: 'Faeröer',
      ar: 'جزر فارو',
      pt: 'Ilhas Faroé',
      tr: 'Faroe Adaları',
      ru: 'Фарерские острова',
      zh: '法罗群岛',
    },
    FJ: {
      en: 'Fiji',
      fr: 'Fidji',
      de: 'Fidschi',
      es: 'Fiyi',
      it: 'Figi',
      nl: 'Fiji',
      ar: 'فيجي',
      pt: 'Fiji',
      tr: 'Fiji',
      ru: 'Фиджи',
      zh: '斐济',
    },
    FI: {
      en: 'Finland',
      fr: 'Finlande',
      de: 'Finnland',
      es: 'Finlandia',
      it: 'Finlandia',
      nl: 'Finland',
      ar: 'فنلندا',
      pt: 'Finlândia',
      tr: 'Finlandiya',
      ru: 'Финляндия',
      zh: '芬兰',
    },
    FR: {
      en: 'France',
      fr: 'France',
      de: 'Frankreich',
      es: 'Francia',
      it: 'Francia',
      nl: 'Frankrijk',
      ar: 'فرنسا',
      pt: 'França',
      tr: 'Fransa',
      ru: 'Франция',
      zh: '法国',
    },
    PF: {
      en: 'French Polynesia',
      fr: 'Polynésie française',
      de: 'Französisch-Polynesien',
      es: 'Polinesia Francesa',
      it: 'Polinesia Francese',
      nl: 'Frans-Polynesië',
      ar: 'بولينيزيا الفرنسية',
      pt: 'Polinésia Francesa',
      tr: 'Fransız Polinezyası',
      ru: 'Французская Полинезия',
      zh: '法属波利尼西亚',
    },
    GA: {
      en: 'Gabon',
      fr: 'Gabon',
      de: 'Gabun',
      es: 'Gabón',
      it: 'Gabon',
      nl: 'Gabon',
      ar: 'الغابون',
      pt: 'Gabão',
      tr: 'Gabon',
      ru: 'Габон',
      zh: '加蓬',
    },
    GM: {
      en: 'Gambia',
      fr: 'Gambie',
      de: 'Gambia',
      es: 'Gambia',
      it: 'Gambia',
      nl: 'Gambia',
      ar: 'غامبيا',
      pt: 'Gâmbia',
      tr: 'Gambiya',
      ru: 'Гамбия',
      zh: '冈比亚',
    },
    GE: {
      en: 'Georgia',
      fr: 'Géorgie',
      de: 'Georgien',
      es: 'Georgia',
      it: 'Georgia',
      nl: 'Georgië',
      ar: 'جورجيا',
      pt: 'Geórgia',
      tr: 'Gürcistan',
      ru: 'Грузия',
      zh: '格鲁吉亚',
    },
    DE: {
      en: 'Germany',
      fr: 'Allemagne',
      de: 'Deutschland',
      es: 'Alemania',
      it: 'Germania',
      nl: 'Duitsland',
      ar: 'ألمانيا',
      pt: 'Alemanha',
      tr: 'Almanya',
      ru: 'Германия',
      zh: '德国',
    },
    GH: {
      en: 'Ghana',
      fr: 'Ghana',
      de: 'Ghana',
      es: 'Ghana',
      it: 'Ghana',
      nl: 'Ghana',
      ar: 'غانا',
      pt: 'Gana',
      tr: 'Gana',
      ru: 'Гана',
      zh: '加纳',
    },
    GI: {
      en: 'Gibraltar',
      fr: 'Gibraltar',
      de: 'Gibraltar',
      es: 'Gibraltar',
      it: 'Gibilterra',
      nl: 'Gibraltar',
      ar: 'جبل طارق',
      pt: 'Gibraltar',
      tr: 'Cebelitarık',
      ru: 'Гибралтар',
      zh: '直布罗陀',
    },
    GR: {
      en: 'Greece',
      fr: 'Grèce',
      de: 'Griechenland',
      es: 'Grecia',
      it: 'Grecia',
      nl: 'Griekenland',
      ar: 'اليونان',
      pt: 'Grécia',
      tr: 'Yunanistan',
      ru: 'Греция',
      zh: '希腊',
    },
    GL: {
      en: 'Greenland',
      fr: 'Groenland',
      de: 'Grönland',
      es: 'Groenlandia',
      it: 'Groenlandia',
      nl: 'Groenland',
      ar: 'جرينلاند',
      pt: 'Gronelândia',
      tr: 'Grönland',
      ru: 'Гренландия',
      zh: '格陵兰',
    },
    GD: {
      en: 'Grenada',
      fr: 'Grenade',
      de: 'Grenada',
      es: 'Granada',
      it: 'Grenada',
      nl: 'Grenada',
      ar: 'غرينادا',
      pt: 'Granada',
      tr: 'Grenada',
      ru: 'Гренада',
      zh: '格林纳达',
    },
    GU: {
      en: 'Guam',
      fr: 'Guam',
      de: 'Guam',
      es: 'Guam',
      it: 'Guam',
      nl: 'Guam',
      ar: 'غوام',
      pt: 'Guam',
      tr: 'Guam',
      ru: 'Гуам',
      zh: '关岛',
    },
    GT: {
      en: 'Guatemala',
      fr: 'Guatemala',
      de: 'Guatemala',
      es: 'Guatemala',
      it: 'Guatemala',
      nl: 'Guatemala',
      ar: 'غواتيمالا',
      pt: 'Guatemala',
      tr: 'Guatemala',
      ru: 'Гватемала',
      zh: '危地马拉',
    },
    GG: {
      en: 'Guernsey',
      fr: 'Guernesey',
      de: 'Guernsey',
      es: 'Guernsey',
      it: 'Guernsey',
      nl: 'Guernsey',
      ar: 'غيرنزي',
      pt: 'Guernsey',
      tr: 'Guernsey',
      ru: 'Гернси',
      zh: '根西岛',
    },
    GN: {
      en: 'Guinea',
      fr: 'Guinée',
      de: 'Guinea',
      es: 'Guinea',
      it: 'Guinea',
      nl: 'Guinee',
      ar: 'غينيا',
      pt: 'Guiné',
      tr: 'Gine',
      ru: 'Гвинея',
      zh: '几内亚',
    },
    GW: {
      en: 'Guinea-Bissau',
      fr: 'Guinée-Bissau',
      de: 'Guinea-Bissau',
      es: 'Guinea-Bisáu',
      it: 'Guinea-Bissau',
      nl: 'Guinee-Bissau',
      ar: 'غينيا بيساو',
      pt: 'Guiné-Bissau',
      tr: 'Gine-Bissau',
      ru: 'Гвинея-Бисау',
      zh: '几内亚比绍',
    },
    GY: {
      en: 'Guyana',
      fr: 'Guyana',
      de: 'Guyana',
      es: 'Guyana',
      it: 'Guyana',
      nl: 'Guyana',
      ar: 'غيانا',
      pt: 'Guiana',
      tr: 'Guyana',
      ru: 'Гайана',
      zh: '圭亚那',
    },
    HT: {
      en: 'Haiti',
      fr: 'Haïti',
      de: 'Haiti',
      es: 'Haití',
      it: 'Haiti',
      nl: 'Haïti',
      ar: 'هايتي',
      pt: 'Haiti',
      tr: 'Haiti',
      ru: 'Гаити',
      zh: '海地',
    },
    HN: {
      en: 'Honduras',
      fr: 'Honduras',
      de: 'Honduras',
      es: 'Honduras',
      it: 'Honduras',
      nl: 'Honduras',
      ar: 'هندوراس',
      pt: 'Honduras',
      tr: 'Honduras',
      ru: 'Гондурас',
      zh: '洪都拉斯',
    },
    HK: {
      en: 'Hong Kong',
      fr: 'Hong Kong',
      de: 'Hongkong',
      es: 'Hong Kong',
      it: 'Hong Kong',
      nl: 'Hongkong',
      ar: 'هونغ كونغ',
      pt: 'Hong Kong',
      tr: 'Hong Kong',
      ru: 'Гонконг',
      zh: '香港',
    },
    HU: {
      en: 'Hungary',
      fr: 'Hongrie',
      de: 'Ungarn',
      es: 'Hungría',
      it: 'Ungheria',
      nl: 'Hongarije',
      ar: 'المجر',
      pt: 'Hungria',
      tr: 'Macaristan',
      ru: 'Венгрия',
      zh: '匈牙利',
    },
    IS: {
      en: 'Iceland',
      fr: 'Islande',
      de: 'Island',
      es: 'Islandia',
      it: 'Islanda',
      nl: 'IJsland',
      ar: 'آيسلندا',
      pt: 'Islândia',
      tr: 'İzlanda',
      ru: 'Исландия',
      zh: '冰岛',
    },
    IN: {
      en: 'India',
      fr: 'Inde',
      de: 'Indien',
      es: 'India',
      it: 'India',
      nl: 'India',
      ar: 'الهند',
      pt: 'Índia',
      tr: 'Hindistan',
      ru: 'Индия',
      zh: '印度',
    },
    ID: {
      en: 'Indonesia',
      fr: 'Indonésie',
      de: 'Indonesien',
      es: 'Indonesia',
      it: 'Indonesia',
      nl: 'Indonesië',
      ar: 'إندونيسيا',
      pt: 'Indonésia',
      tr: 'Endonezya',
      ru: 'Индонезия',
      zh: '印度尼西亚',
    },
    IR: {
      en: 'Iran',
      fr: 'Iran',
      de: 'Iran',
      es: 'Irán',
      it: 'Iran',
      nl: 'Iran',
      ar: 'إيران',
      pt: 'Irã',
      tr: 'İran',
      ru: 'Иран',
      zh: '伊朗',
    },
    IQ: {
      en: 'Iraq',
      fr: 'Irak',
      de: 'Irak',
      es: 'Irak',
      it: 'Iraq',
      nl: 'Irak',
      ar: 'العراق',
      pt: 'Iraque',
      tr: 'Irak',
      ru: 'Ирак',
      zh: '伊拉克',
    },
    IE: {
      en: 'Ireland',
      fr: 'Irlande',
      de: 'Irland',
      es: 'Irlanda',
      it: 'Irlanda',
      nl: 'Ierland',
      ar: 'أيرلندا',
      pt: 'Irlanda',
      tr: 'İrlanda',
      ru: 'Ирландия',
      zh: '爱尔兰',
    },
    IM: {
      en: 'Isle of Man',
      fr: 'Île de Man',
      de: 'Isle of Man',
      es: 'Isla de Man',
      it: 'Isola di Man',
      nl: 'Isle of Man',
      ar: 'جزيرة مان',
      pt: 'Ilha de Man',
      tr: 'Man Adası',
      ru: 'Остров Мэн',
      zh: '马恩岛',
    },
    IL: {
      en: 'Israel',
      fr: 'Israël',
      de: 'Israel',
      es: 'Israel',
      it: 'Israele',
      nl: 'Israël',
      ar: 'إسرائيل',
      pt: 'Israel',
      tr: 'İsrail',
      ru: 'Израиль',
      zh: '以色列',
    },
    IT: {
      en: 'Italy',
      fr: 'Italie',
      de: 'Italien',
      es: 'Italia',
      it: 'Italia',
      nl: 'Italië',
      ar: 'إيطاليا',
      pt: 'Itália',
      tr: 'İtalya',
      ru: 'Италия',
      zh: '意大利',
    },
    CI: {
      en: 'Ivory Coast',
      fr: "Côte d'Ivoire",
      de: 'Elfenbeinküste',
      es: 'Costa de Marfil',
      it: "Costa d'Avorio",
      nl: 'Ivoorkust',
      ar: 'ساحل العاج',
      pt: 'Costa do Marfim',
      tr: 'Fildişi Sahili',
      ru: "Кот-д'Ивуар",
      zh: '科特迪瓦',
    },
    JM: {
      en: 'Jamaica',
      fr: 'Jamaïque',
      de: 'Jamaika',
      es: 'Jamaica',
      it: 'Giamaica',
      nl: 'Jamaica',
      ar: 'جامايكا',
      pt: 'Jamaica',
      tr: 'Jamaika',
      ru: 'Ямайка',
      zh: '牙买加',
    },
    JP: {
      en: 'Japan',
      fr: 'Japon',
      de: 'Japan',
      es: 'Japón',
      it: 'Giappone',
      nl: 'Japan',
      ar: 'اليابان',
      pt: 'Japão',
      tr: 'Japonya',
      ru: 'Япония',
      zh: '日本',
    },
    JE: {
      en: 'Jersey',
      fr: 'Jersey',
      de: 'Jersey',
      es: 'Jersey',
      it: 'Jersey',
      nl: 'Jersey',
      ar: 'جيرزي',
      pt: 'Jersey',
      tr: 'Jersey',
      ru: 'Джерси',
      zh: '泽西岛',
    },
    JO: {
      en: 'Jordan',
      fr: 'Jordanie',
      de: 'Jordanien',
      es: 'Jordania',
      it: 'Giordania',
      nl: 'Jordanië',
      ar: 'الأردن',
      pt: 'Jordânia',
      tr: 'Ürdün',
      ru: 'Иордания',
      zh: '约旦',
    },
    KZ: {
      en: 'Kazakhstan',
      fr: 'Kazakhstan',
      de: 'Kasachstan',
      es: 'Kazajistán',
      it: 'Kazakistan',
      nl: 'Kazachstan',
      ar: 'كازاخستان',
      pt: 'Cazaquistão',
      tr: 'Kazakistan',
      ru: 'Казахстан',
      zh: '哈萨克斯坦',
    },
    KE: {
      en: 'Kenya',
      fr: 'Kenya',
      de: 'Kenia',
      es: 'Kenia',
      it: 'Kenya',
      nl: 'Kenia',
      ar: 'كينيا',
      pt: 'Quênia',
      tr: 'Kenya',
      ru: 'Кения',
      zh: '肯尼亚',
    },
    KI: {
      en: 'Kiribati',
      fr: 'Kiribati',
      de: 'Kiribati',
      es: 'Kiribati',
      it: 'Kiribati',
      nl: 'Kiribati',
      ar: 'كيريباتي',
      pt: 'Kiribati',
      tr: 'Kiribati',
      ru: 'Кирибати',
      zh: '基里巴斯',
    },
    KP: {
      en: 'North Korea',
      fr: 'Corée du Nord',
      de: 'Nordkorea',
      es: 'Corea del Norte',
      it: 'Corea del Nord',
      nl: 'Noord-Korea',
      ar: 'كوريا الشمالية',
      pt: 'Coreia do Norte',
      tr: 'Kuzey Kore',
      ru: 'Северная Корея',
      zh: '朝鲜',
    },
    KR: {
      en: 'South Korea',
      fr: 'Corée du Sud',
      de: 'Südkorea',
      es: 'Corea del Sur',
      it: 'Corea del Sud',
      nl: 'Zuid-Korea',
      ar: 'كوريا الجنوبية',
      pt: 'Coreia do Sul',
      tr: 'Güney Kore',
      ru: 'Южная Корея',
      zh: '韩国',
    },
    XK: {
      en: 'Kosovo',
      fr: 'Kosovo',
      de: 'Kosovo',
      es: 'Kosovo',
      it: 'Kosovo',
      nl: 'Kosovo',
      ar: 'كوسوفو',
      pt: 'Kosovo',
      tr: 'Kosova',
      ru: 'Косово',
      zh: '科索沃',
    },
    KW: {
      en: 'Kuwait',
      fr: 'Koweït',
      de: 'Kuwait',
      es: 'Kuwait',
      it: 'Kuwait',
      nl: 'Koeweit',
      ar: 'الكويت',
      pt: 'Kuwait',
      tr: 'Kuveyt',
      ru: 'Кувейт',
      zh: '科威特',
    },
    KG: {
      en: 'Kyrgyzstan',
      fr: 'Kirghizistan',
      de: 'Kirgisistan',
      es: 'Kirguistán',
      it: 'Kirghizistan',
      nl: 'Kirgizië',
      ar: 'قيرغيزستان',
      pt: 'Quirguistão',
      tr: 'Kırgızistan',
      ru: 'Кыргызстан',
      zh: '吉尔吉斯斯坦',
    },
    LA: {
      en: 'Laos',
      fr: 'Laos',
      de: 'Laos',
      es: 'Laos',
      it: 'Laos',
      nl: 'Laos',
      ar: 'لاوس',
      pt: 'Laos',
      tr: 'Laos',
      ru: 'Лаос',
      zh: '老挝',
    },
    LV: {
      en: 'Latvia',
      fr: 'Lettonie',
      de: 'Lettland',
      es: 'Letonia',
      it: 'Lettonia',
      nl: 'Letland',
      ar: 'لاتفيا',
      pt: 'Letônia',
      tr: 'Letonya',
      ru: 'Латвия',
      zh: '拉脱维亚',
    },
    LB: {
      en: 'Lebanon',
      fr: 'Liban',
      de: 'Libanon',
      es: 'Líbano',
      it: 'Libano',
      nl: 'Libanon',
      ar: 'لبنان',
      pt: 'Líbano',
      tr: 'Lübnan',
      ru: 'Ливан',
      zh: '黎巴嫩',
    },
    LS: {
      en: 'Lesotho',
      fr: 'Lesotho',
      de: 'Lesotho',
      es: 'Lesoto',
      it: 'Lesotho',
      nl: 'Lesotho',
      ar: 'ليسوتو',
      pt: 'Lesoto',
      tr: 'Lesotho',
      ru: 'Лесото',
      zh: '莱索托',
    },
    LR: {
      en: 'Liberia',
      fr: 'Libéria',
      de: 'Liberia',
      es: 'Liberia',
      it: 'Liberia',
      nl: 'Liberia',
      ar: 'ليبيريا',
      pt: 'Libéria',
      tr: 'Liberya',
      ru: 'Либерия',
      zh: '利比里亚',
    },
    LY: {
      en: 'Libya',
      fr: 'Libye',
      de: 'Libyen',
      es: 'Libia',
      it: 'Libia',
      nl: 'Libië',
      ar: 'ليبيا',
      pt: 'Líbia',
      tr: 'Libya',
      ru: 'Ливия',
      zh: '利比亚',
    },
    LI: {
      en: 'Liechtenstein',
      fr: 'Liechtenstein',
      de: 'Liechtenstein',
      es: 'Liechtenstein',
      it: 'Liechtenstein',
      nl: 'Liechtenstein',
      ar: 'ليختنشتاين',
      pt: 'Liechtenstein',
      tr: 'Lihtenştayn',
      ru: 'Лихтенштейн',
      zh: '列支敦士登',
    },
    LT: {
      en: 'Lithuania',
      fr: 'Lituanie',
      de: 'Litauen',
      es: 'Lituania',
      it: 'Lituania',
      nl: 'Litouwen',
      ar: 'ليتوانيا',
      pt: 'Lituânia',
      tr: 'Litvanya',
      ru: 'Литва',
      zh: '立陶宛',
    },
    LU: {
      en: 'Luxembourg',
      fr: 'Luxembourg',
      de: 'Luxemburg',
      es: 'Luxemburgo',
      it: 'Lussemburgo',
      nl: 'Luxemburg',
      ar: 'لوكسمبورغ',
      pt: 'Luxemburgo',
      tr: 'Lüksemburg',
      ru: 'Люксембург',
      zh: '卢森堡',
    },
    MO: {
      en: 'Macau',
      fr: 'Macao',
      de: 'Macau',
      es: 'Macao',
      it: 'Macao',
      nl: 'Macau',
      ar: 'ماكاو',
      pt: 'Makao',
      tr: 'Makao',
      ru: 'Макао',
      zh: '澳门',
    },
    MG: {
      en: 'Madagascar',
      fr: 'Madagascar',
      de: 'Madagaskar',
      es: 'Madagascar',
      it: 'Madagascar',
      nl: 'Madagaskar',
      ar: 'مدغشقر',
      pt: 'Madagascar',
      tr: 'Madagaskar',
      ru: 'Мадагаскар',
      zh: '马达加斯加',
    },
    MW: {
      en: 'Malawi',
      fr: 'Malawi',
      de: 'Malawi',
      es: 'Malawi',
      it: 'Malawi',
      nl: 'Malawi',
      ar: 'ملاوي',
      pt: 'Malawi',
      tr: 'Malavi',
      ru: 'Малави',
      zh: '马拉维',
    },
    MY: {
      en: 'Malaysia',
      fr: 'Malaisie',
      de: 'Malaysia',
      es: 'Malasia',
      it: 'Malesia',
      nl: 'Maleisië',
      ar: 'ماليزيا',
      pt: 'Malásia',
      tr: 'Malezya',
      ru: 'Малайзия',
      zh: '马来西亚',
    },
    MV: {
      en: 'Maldives',
      fr: 'Maldives',
      de: 'Malediven',
      es: 'Maldivas',
      it: 'Maldive',
      nl: 'Maldiven',
      ar: 'جزر المالديف',
      pt: 'Maldivas',
      tr: 'Maldivler',
      ru: 'Мальдивы',
      zh: '马尔代夫',
    },
    ML: {
      en: 'Mali',
      fr: 'Mali',
      de: 'Mali',
      es: 'Malí',
      it: 'Mali',
      nl: 'Mali',
      ar: 'مالي',
      pt: 'Mali',
      tr: 'Mali',
      ru: 'Мали',
      zh: '马里',
    },
    MT: {
      en: 'Malta',
      fr: 'Malte',
      de: 'Malta',
      es: 'Malta',
      it: 'Malta',
      nl: 'Malta',
      ar: 'مالطا',
      pt: 'Malta',
      tr: 'Malta',
      ru: 'Мальта',
      zh: '马耳他',
    },
    MH: {
      en: 'Marshall Islands',
      fr: 'Îles Marshall',
      de: 'Marshallinseln',
      es: 'Islas Marshall',
      it: 'Isole Marshall',
      nl: 'Marshalleilanden',
      ar: 'جزر مارشال',
      pt: 'Ilhas Marshall',
      tr: 'Marshall Adaları',
      ru: 'Маршалловы Острова',
      zh: '马绍尔群岛',
    },
    MR: {
      en: 'Mauritania',
      fr: 'Mauritanie',
      de: 'Mauretanien',
      es: 'Mauritania',
      it: 'Mauritania',
      nl: 'Mauritanië',
      ar: 'موريتانيا',
      pt: 'Mauritânia',
      tr: 'Moritanya',
      ru: 'Мавритания',
      zh: '毛里塔尼亚',
    },
    MU: {
      en: 'Mauritius',
      fr: 'Maurice',
      de: 'Mauritius',
      es: 'Mauricio',
      it: 'Mauritius',
      nl: 'Mauritius',
      ar: 'موريشيوس',
      pt: 'Maurício',
      tr: 'Mauritius',
      ru: 'Маврикий',
      zh: '毛里求斯',
    },
    YT: {
      en: 'Mayotte',
      fr: 'Mayotte',
      de: 'Mayotte',
      es: 'Mayotte',
      it: 'Mayotte',
      nl: 'Mayotte',
      ar: 'مايوت',
      pt: 'Mayotte',
      tr: 'Mayotte',
      ru: 'Майотта',
      zh: '马约特',
    },
    MX: {
      en: 'Mexico',
      fr: 'Mexique',
      de: 'Mexiko',
      es: 'México',
      it: 'Messico',
      nl: 'Mexico',
      ar: 'المكسيك',
      pt: 'México',
      tr: 'Meksika',
      ru: 'Мексика',
      zh: '墨西哥',
    },
    FM: {
      en: 'Micronesia',
      fr: 'Micronésie',
      de: 'Mikronesien',
      es: 'Micronesia',
      it: 'Micronesia',
      nl: 'Micronesië',
      ar: 'ميكرونيزيا',
      pt: 'Micronésia',
      tr: 'Mikronezya',
      ru: 'Микронезия',
      zh: '密克罗尼西亚',
    },
    MK: {
      en: 'North Macedonia',
      fr: 'Macédoine du Nord',
      de: 'Nordmazedonien',
      es: 'Macedonia del Norte',
      it: 'Macedonia del Nord',
      nl: 'Noord-Macedonië',
      ar: 'مقدونيا الشمالية',
      pt: 'Macedônia do Norte',
      tr: 'Kuzey Makedonya',
      ru: 'Северная Македония',
      zh: '北马其顿',
    },
    MD: {
      en: 'Moldova',
      fr: 'Moldavie',
      de: 'Moldawien',
      es: 'Moldavia',
      it: 'Moldavia',
      nl: 'Moldavië',
      ar: 'مولدوفا',
      pt: 'Moldávia',
      tr: 'Moldova',
      ru: 'Молдова',
      zh: '摩尔多瓦',
    },
    MC: {
      en: 'Monaco',
      fr: 'Monaco',
      de: 'Monaco',
      es: 'Mónaco',
      it: 'Monaco',
      nl: 'Monaco',
      ar: 'موناكو',
      pt: 'Mônaco',
      tr: 'Monako',
      ru: 'Монако',
      zh: '摩纳哥',
    },
    MN: {
      en: 'Mongolia',
      fr: 'Mongolie',
      de: 'Mongolei',
      es: 'Mongolia',
      it: 'Mongolia',
      nl: 'Mongolië',
      ar: 'منغوليا',
      pt: 'Mongólia',
      tr: 'Moğolistan',
      ru: 'Монголия',
      zh: '蒙古',
    },
    ME: {
      en: 'Montenegro',
      fr: 'Monténégro',
      de: 'Montenegro',
      es: 'Montenegro',
      it: 'Montenegro',
      nl: 'Montenegro',
      ar: 'الجبل الأسود',
      pt: 'Montenegro',
      tr: 'Karadağ',
      ru: 'Черногория',
      zh: '黑山',
    },
    MS: {
      en: 'Montserrat',
      fr: 'Montserrat',
      de: 'Montserrat',
      es: 'Montserrat',
      it: 'Montserrat',
      nl: 'Montserrat',
      ar: 'مونتسرات',
      pt: 'Montserrat',
      tr: 'Montserrat',
      ru: 'Монтсеррат',
      zh: '蒙特塞拉特',
    },
    MA: {
      en: 'Morocco',
      fr: 'Maroc',
      de: 'Marokko',
      es: 'Marruecos',
      it: 'Marocco',
      nl: 'Marokko',
      ar: 'المغرب',
      pt: 'Marrocos',
      tr: 'Fas',
      ru: 'Марокко',
      zh: '摩洛哥',
    },
    MZ: {
      en: 'Mozambique',
      fr: 'Mozambique',
      de: 'Mosambik',
      es: 'Mozambique',
      it: 'Mozambico',
      nl: 'Mozambique',
      ar: 'موزمبيق',
      pt: 'Moçambique',
      tr: 'Mozambik',
      ru: 'Мозамбик',
      zh: '莫桑比克',
    },
    MM: {
      en: 'Myanmar',
      fr: 'Myanmar',
      de: 'Myanmar',
      es: 'Myanmar',
      it: 'Myanmar',
      nl: 'Myanmar',
      ar: 'ميانمار',
      pt: 'Myanmar',
      tr: 'Myanmar',
      ru: 'Мьянма',
      zh: '缅甸',
    },
    NA: {
      en: 'Namibia',
      fr: 'Namibie',
      de: 'Namibia',
      es: 'Namibia',
      it: 'Namibia',
      nl: 'Namibië',
      ar: 'ناميبيا',
      pt: 'Namíbia',
      tr: 'Namibya',
      ru: 'Намибия',
      zh: '纳米比亚',
    },
    NR: {
      en: 'Nauru',
      fr: 'Nauru',
      de: 'Nauru',
      es: 'Nauru',
      it: 'Nauru',
      nl: 'Nauru',
      ar: 'ناورو',
      pt: 'Nauru',
      tr: 'Nauru',
      ru: 'Науру',
      zh: '瑙鲁',
    },
    NC: {
      en: 'New Caledonia',
      fr: 'Nouvelle-Calédonie',
      de: 'Neukaledonien',
      es: 'Nueva Caledonia',
      it: 'Nuova Caledonia',
      nl: 'Nieuw-Caledonië',
      ar: 'كاليدونيا الجديدة',
      pt: 'Nova Caledônia',
      tr: 'Yeni Kaledonya',
      ru: 'Новая Каледония',
      zh: '新喀里多尼亚',
    },
    NP: {
      en: 'Nepal',
      fr: 'Népal',
      de: 'Nepal',
      es: 'Nepal',
      it: 'Nepal',
      nl: 'Nepal',
      ar: 'نيبال',
      pt: 'Nepal',
      tr: 'Nepal',
      ru: 'Непал',
      zh: '尼泊尔',
    },
    NL: {
      en: 'Netherlands',
      fr: 'Pays-Bas',
      de: 'Niederlande',
      es: 'Países Bajos',
      it: 'Paesi Bassi',
      nl: 'Nederland',
      ar: 'هولندا',
      pt: 'Países Baixos',
      tr: 'Hollanda',
      ru: 'Нидерланды',
      zh: '荷兰',
    },
    NE: {
      en: 'Niger',
      fr: 'Niger',
      de: 'Niger',
      es: 'Níger',
      it: 'Niger',
      nl: 'Niger',
      ar: 'نيجيريا',
      pt: 'Níger',
      tr: 'Niger',
      ru: 'Нигер',
      zh: '尼日尔',
    },
    NG: {
      en: 'Nigeria',
      fr: 'Nigeria',
      de: 'Nigeria',
      es: 'Nigeria',
      it: 'Nigeria',
      nl: 'Nigeria',
      ar: 'نيجيريا',
      pt: 'Nigéria',
      tr: 'Niger',
      ru: 'Нигер',
      zh: '尼日利亚',
    },
    NI: {
      en: 'Nicaragua',
      fr: 'Nicaragua',
      de: 'Nicaragua',
      es: 'Nicaragua',
      it: 'Nicaragua',
      nl: 'Nicaragua',
      ar: 'نيكاراغوا',
      pt: 'Nicarágua',
      tr: 'Nikaragua',
      ru: 'Никарагуа',
      zh: '尼加拉瓜',
    },
    NU: {
      en: 'Niue',
      fr: 'Niue',
      de: 'Niue',
      es: 'Niue',
      it: 'Niue',
      nl: 'Niue',
      ar: 'نيوي',
      pt: 'Niue',
      tr: 'Niue',
      ru: 'Ниуэ',
      zh: '纽埃',
    },
    MP: {
      en: 'Northern Mariana Islands',
      fr: 'Îles Mariannes du Nord',
      de: 'Nördliche Marianen',
      es: 'Islas Marianas del Norte',
      it: 'Isole Marianne del Nord',
      nl: 'Noordelijke Marianen',
      ar: 'جزر ماريانا الشمالية',
      pt: 'Ilhas Marianas do Norte',
      tr: 'Kuzey Mariana Adaları',
      ru: 'Северные Марианские острова',
      zh: '北马里亚纳群岛',
    },
    NO: {
      en: 'Norway',
      fr: 'Norvège',
      de: 'Norwegen',
      es: 'Noruega',
      it: 'Norvegia',
      nl: 'Noorwegen',
      ar: 'نورويز',
      pt: 'Noruega',
      tr: 'Norveç',
      ru: 'Норвегия',
      zh: '挪威',
    },
    NZ: {
      en: 'New Zealand',
      fr: 'Nouvelle-Zélande',
      de: 'Neuseeland',
      es: 'Nueva Zelanda',
      it: 'Nuova Zelanda',
      nl: 'Nieuw-Zeeland',
      ar: 'نيوزيلندا',
      pt: 'Nova Zelândia',
      tr: 'Yeni Zelanda',
      ru: 'Новая Зеландия',
      zh: '新西兰',
    },
    OM: {
      en: 'Oman',
      fr: 'Oman',
      de: 'Oman',
      es: 'Omán',
      it: 'Oman',
      nl: 'Oman',
      ar: 'عمان',
      pt: 'Omã',
      tr: 'Oman',
      ru: 'عمان',
      zh: '阿曼',
    },
    PK: {
      en: 'Pakistan',
      fr: 'Pakistan',
      de: 'Pakistan',
      es: 'Pakistán',
      it: 'Pakistan',
      nl: 'Pakistan',
      ar: 'باكستان',
      pt: 'Paquistão',
      tr: 'Pakistan',
      ru: 'Пакистан',
      zh: '巴基斯坦',
    },
    PW: {
      en: 'Palau',
      fr: 'Palau',
      de: 'Palau',
      es: 'Palau',
      it: 'Palau',
      nl: 'Palau',
      ar: 'بالاو',
      pt: 'Palau',
      tr: 'Palau',
      ru: 'Палау',
      zh: '帕劳',
    },
    PS: {
      en: 'Palestine',
      fr: 'Palestine',
      de: 'Palestine',
      es: 'Palestina',
      it: 'Palestina',
      nl: 'Palestina',
      ar: 'فلسطين',
      pt: 'Palestina',
      tr: 'Palestina',
      ru: 'Палестина',
      zh: '巴勒斯坦',
    },
    PA: {
      en: 'Panama',
      fr: 'Panama',
      de: 'Panama',
      es: 'Panamá',
      it: 'Panama',
      nl: 'Panama',
      ar: 'بناما',
      pt: 'Panamá',
      tr: 'Panamá',
      ru: 'Панама',
      zh: '巴拿马',
    },
    PG: {
      en: 'Papua New Guinea',
      fr: 'Papouasie-Nouvelle-Guinée',
      de: 'Papua-Neuguinea',
      es: 'Papúa Nueva Guinea',
      it: 'Papua Nuova Guinea',
      nl: 'Papua Nuova Guinea',
      ar: 'بابوا غينيا الجديدة',
      pt: 'Papua-Nova Guiné',
      tr: 'Papua-Nova Guiné',
      ru: 'Папуа-Новая Гвинея',
      zh: '巴布亚新几内亚',
    },
    PY: {
      en: 'Paraguay',
      fr: 'Paraguay',
      de: 'Paraguay',
      es: 'Paraguay',
      it: 'Paraguay',
      nl: 'Paraguay',
      ar: 'باراغواي',
      pt: 'Paraguai',
      tr: 'Paraguai',
      ru: 'Парагвай',
      zh: '巴拉圭',
    },
    PE: {
      en: 'Peru',
      fr: 'Pérou',
      de: 'Peru',
      es: 'Perú',
      it: 'Perú',
      nl: 'Perú',
      ar: 'بيرو',
      pt: 'Peru',
      tr: 'Peru',
      ru: 'Перу',
      zh: '秘鲁',
    },
    PH: {
      en: 'Philippines',
      fr: 'Philippines',
      de: 'Philippines',
      es: 'Filipinas',
      it: 'Filippine',
      nl: 'Filipijnen',
      ar: 'الفلبين',
      pt: 'Filipinas',
      tr: 'Filipinas',
      ru: 'Филиппины',
      zh: '菲律宾',
    },
    PN: {
      en: 'Pitcairn',
      fr: 'Pitcairn',
      de: 'Pitcairn',
      es: 'Pitcairn',
      it: 'Pitcairn',
      nl: 'Pitcairn',
      ar: 'بيتكايرن',
      pt: 'Pitcairn',
      tr: 'Pitcairn',
      ru: 'Питкэрн',
      zh: '皮特凯恩群岛',
    },
    PL: {
      en: 'Poland',
      fr: 'Pologne',
      de: 'Polen',
      es: 'Polonia',
      it: 'Polonia',
      nl: 'Polen',
      ar: 'بولندا',
      pt: 'Polônia',
      tr: 'Polonya',
      ru: 'Польша',
      zh: '波兰',
    },
    PT: {
      en: 'Portugal',
      fr: 'Portugal',
      de: 'Portugal',
      es: 'Portugal',
      it: 'Portugal',
      nl: 'Portugal',
      ar: 'البرتغال',
      pt: 'Portugal',
      tr: 'Portugual',
      ru: 'Португалия',
      zh: '葡萄牙',
    },
    PR: {
      en: 'Puerto Rico',
      fr: 'Porto Rico',
      de: 'Puerto Rico',
      es: 'Puerto Rico',
      it: 'Puerto Rico',
      nl: 'Puerto Rico',
      ar: 'بورتوريكو',
      pt: 'Porto Rico',
      tr: 'Porto Rico',
      ru: 'Пуэрто-Рико',
      zh: '波多黎各',
    },
    QA: {
      en: 'Qatar',
      fr: 'Qatar',
      de: 'Qatar',
      es: 'Qatar',
      it: 'Qatar',
      nl: 'Qatar',
      ar: 'قطر',
      pt: 'Catar',
      tr: 'Katar',
      ru: 'Катар',
      zh: '卡塔尔',
    },
    CG: {
      en: 'Republic of the Congo',
      fr: 'République du Congo',
      de: 'Republik Kongo',
      es: 'República del Congo',
      it: 'Repubblica del Congo',
      nl: 'Republiek Congo',
      ar: 'جمهورية الكونغو',
      pt: 'República do Congo',
      tr: 'Kongo Cumhuriyeti',
      ru: 'Конго',
      zh: '刚果共和国',
    },
    RE: {
      en: 'Reunion',
      fr: 'La Réunion',
      de: 'Réunion',
      es: 'Reunión',
      it: 'Riunione',
      nl: 'Réunion',
      ar: 'ريونيون',
      pt: 'Reunião',
      tr: 'Reunion',
      ru: 'Реюньон',
      zh: '留尼汪',
    },
    RO: {
      en: 'Romania',
      fr: 'Roumanie',
      de: 'Rumänien',
      es: 'Rumania',
      it: 'Romania',
      nl: 'Roemenië',
      ar: 'رومانيا',
      pt: 'Romênia',
      tr: 'Romanya',
      ru: 'Румыния',
      zh: '罗马尼亚',
    },
    RU: {
      en: 'Russia',
      fr: 'Russie',
      de: 'Russland',
      es: 'Rusia',
      it: 'Russia',
      nl: 'Rusland',
      ar: 'روسيا',
      pt: 'Rússia',
      tr: 'Rusya',
      ru: 'Россия',
      zh: '俄罗斯',
    },
    RW: {
      en: 'Rwanda',
      fr: 'Rwanda',
      de: 'Rwanda',
      es: 'Rwanda',
      it: 'Rwanda',
      nl: 'Rwanda',
      ar: 'رواندا',
      pt: 'Ruanda',
      tr: 'Ruanda',
      ru: 'Руанда',
      zh: '卢旺达',
    },
    BL: {
      en: 'Saint Barthelemy',
      fr: 'Saint-Barthélemy',
      de: 'Saint-Barthélemy',
      es: 'San Bartolomé',
      it: 'Saint-Barthélemy',
      nl: 'Saint-Barthélemy',
      ar: 'سان بارتيليمي',
      pt: 'São Bartolomeu',
      tr: 'Saint-Barthélemy',
      ru: 'Сен-Бартелеми',
      zh: '圣巴泰勒米',
    },
    KN: {
      en: 'Saint Kitts and Nevis',
      fr: 'Saint-Kitts-et-Nevis',
      de: 'St. Kitts und Nevis',
      es: 'San Cristóbal y Nieves',
      it: 'San Cristóbal e Nevis',
      nl: 'St. Kitts en Nevis',
      ar: 'سانت كيتس ونيفيس',
      pt: 'São Cristóvão e Nevis',
      tr: 'St. Kitts ve Nevis',
      ru: 'Сент-Китс и Невис',
      zh: '圣基茨和尼维斯',
    },
    SH: {
      en: 'Saint Helena',
      fr: 'Sainte-Hélène',
      de: 'St. Helena',
      es: 'Santa Elena',
      it: "Sant'Elena",
      nl: 'Sint-Helena',
      ar: 'سانت هيلينا',
      pt: 'Santa Helena',
      tr: 'Saint Helena',
      ru: 'Остров Святой Елены',
      zh: '圣赫勒拿',
    },
    LC: {
      en: 'Saint Lucia',
      fr: 'Saint-Lucie',
      de: 'St. Lucia',
      es: 'Santa Lucía',
      it: 'Santa Lucia',
      nl: 'St. Lucia',
      ar: 'سانت لوسيا',
      pt: 'Santa Lúcia',
      tr: 'St. Lucia',
      ru: 'Сент-Люсия',
      zh: '圣卢西亚',
    },
    MF: {
      en: 'Saint Martin',
      fr: 'Saint-Martin',
      de: 'Saint-Martin',
      es: 'San Martín',
      it: 'Saint-Martin',
      nl: 'Saint-Martin',
      ar: 'سان مارتن',
      pt: 'Saint-Martin',
      tr: 'Saint-Martin',
      ru: 'Сен-Мартен',
      zh: '圣马丁',
    },
    PM: {
      en: 'Saint Pierre and Miquelon',
      fr: 'Saint-Pierre-et-Miquelon',
      de: 'St. Pierre und Miquelon',
      es: 'San Pedro y Miquelón',
      it: 'Saint-Pierre e Miquelon',
      nl: 'Saint-Pierre en Miquelon',
      ar: 'سان بيير وميكلون',
      pt: 'São Pedro e Miquelon',
      tr: 'Saint-Pierre ve Miquelon',
      ru: 'Сен-Пьер и Микелон',
      zh: '圣皮埃尔和密克隆',
    },
    VC: {
      en: 'Saint Vincent and the Grenadines',
      fr: 'Saint-Vincent-et-les-Grenadines',
      de: 'St. Vincent und die Grenadinen',
      es: 'San Vicente y las Granadinas',
      it: 'San Vincenzo e Granadine',
      nl: 'St. Vincent en de Grenadines',
      ar: 'سانت فينسنت والغرينادين',
      pt: 'São Vicente e Granadinas',
      tr: 'St. Vincent ve Grenadiner',
      ru: 'Сент-Винсент и Гренадины',
      zh: '圣文森特和格林纳丁斯',
    },
    WS: {
      en: 'Samoa',
      fr: 'Samoa',
      de: 'Samoa',
      es: 'Samoa',
      it: 'Samoa',
      nl: 'Samoa',
      ar: 'ساموا',
      pt: 'Samoa',
      tr: 'Samoa',
      ru: 'Самоа',
      zh: '萨摩亚',
    },
    SM: {
      en: 'San Marino',
      fr: 'Saint-Marin',
      de: 'San Marino',
      es: 'San Marino',
      it: 'San Marino',
      nl: 'San Marino',
      ar: 'سان مارينو',
      pt: 'São Marinho',
      tr: 'San Marino',
      ru: 'Сан-Марино',
      zh: '圣马力诺',
    },
    ST: {
      en: 'Sao Tome and Principe',
      fr: 'Sao Tomé et Principe',
      de: 'Sao Tomé und Principe',
      es: 'Sao Tomé e Principe',
      it: 'Sao Tomé e Principe',
      nl: 'Sao Tomé e Principe',
      ar: 'ساو تومي وبرنسيبي',
      pt: 'São Tomé e Príncipe',
      tr: 'Sao Tomé e Príncipe',
      ru: 'Сан-Томе и Принсипи',
      zh: '圣多美和普林西比',
    },
    SA: {
      en: 'Saudi Arabia',
      fr: 'Arabie saoudite',
      de: 'Saudi-Arabien',
      es: 'Arabia Saudita',
      it: 'Arabia Saudita',
      nl: 'Saoedi-Arabië',
      ar: 'السعودية',
      pt: 'Arábia Saudita',
      tr: 'Suadi Arabistan',
      ru: 'Сауди-Арабия',
      zh: '沙特阿拉伯',
    },
    SN: {
      en: 'Senegal',
      fr: 'Sénégal',
      de: 'Senegal',
      es: 'Senegal',
      it: 'Senegal',
      nl: 'Senegal',
      ar: 'السنغال',
      pt: 'Senegal',
      tr: 'Senegal',
      ru: 'Сенегал',
      zh: '塞内加尔',
    },
    RS: {
      en: 'Serbia',
      fr: 'Serbie',
      de: 'Serbien',
      es: 'Serbia',
      it: 'Srbija',
      nl: 'Servië',
      ar: 'صربيا',
      pt: 'Sérvia',
      tr: 'Sırbistan',
      ru: 'Сербия',
      zh: '塞尔维亚',
    },
    SC: {
      en: 'Seychelles',
      fr: 'Seychelles',
      de: 'Seychelles',
      es: 'Seychelles',
      it: 'Seychelles',
      nl: 'Seychelles',
      ar: 'سيشيل',
      pt: 'Seychelles',
      tr: 'Seychelles',
      ru: 'Сейшелы',
      zh: '塞舌尔',
    },
    SL: {
      en: 'Sierra Leone',
      fr: 'Sierra Leone',
      de: 'Sierra Leone',
      es: 'Sierra Leone',
      it: 'Sierra Leone',
      nl: 'Sierra Leone',
      ar: 'سيراليون',
      pt: 'Serra Leoa',
      tr: 'Sierra Leone',
      ru: 'Сьерра-Леоне',
      zh: '塞拉利昂',
    },
    SG: {
      en: 'Singapore',
      fr: 'Singapour',
      de: 'Singapur',
      es: 'Singapur',
      it: 'Singapore',
      nl: 'Singapore',
      ar: 'سنغافورة',
      pt: 'Singapura',
      tr: 'Singapur',
      ru: 'Сингапур',
      zh: '新加坡',
    },
    SX: {
      en: 'Sint Maarten',
      fr: 'Saint-Martin',
      de: 'Sint Maarten',
      es: 'Sint Maarten',
      it: 'Sint Maarten',
      nl: 'Sint Maarten',
      ar: 'سينت مارتن',
      pt: 'Sint Maarten',
      tr: 'Sint Maarten',
      ru: 'Синт-Мартен',
      zh: '荷属圣马丁',
    },
    SK: {
      en: 'Slovakia',
      fr: 'Slovaquie',
      de: 'Slowakei',
      es: 'Eslovaquia',
      it: 'Slováquia',
      nl: 'Slowakije',
      ar: 'سلوفاكيا',
      pt: 'Eslováquia',
      tr: 'Slovakya',
      ru: 'Словакия',
      zh: '斯洛伐克',
    },
    SI: {
      en: 'Slovenia',
      fr: 'Slovénie',
      de: 'Slowenien',
      es: 'Eslovenia',
      it: 'Slovenia',
      nl: 'Slovenië',
      ar: 'سلوفينيا',
      pt: 'Eslovénia',
      tr: 'Slovénia',
      ru: 'Словения',
      zh: '斯洛文尼亚',
    },
    SB: {
      en: 'Solomon Islands',
      fr: 'Îles Salomon',
      de: 'Salomonen',
      es: 'Islas Salomón',
      it: 'Isole Salomone',
      nl: 'Salomonseilanden',
      ar: 'جزر سليمان',
      pt: 'Ilhas Salomão',
      tr: 'Salomone Adaları',
      ru: 'Острова Соломона',
      zh: '所罗门群岛',
    },
    SO: {
      en: 'Somalia',
      fr: 'Somalie',
      de: 'Somalia',
      es: 'Somalia',
      it: 'Somalia',
      nl: 'Somalië',
      ar: 'الصومال',
      pt: 'Somália',
      tr: 'Somália',
      ru: 'Сомали',
      zh: '索马里',
    },
    ZA: {
      en: 'South Africa',
      fr: 'Afrique du Sud',
      de: 'Südafrika',
      es: 'Sudáfrica',
      it: 'Sud Africa',
      nl: 'Zuid-Afrika',
      ar: 'أفريقيا الجنوبية',
      pt: 'África do Sul',
      tr: 'Güney Afrika',
      ru: 'Южная Африка',
      zh: '南非',
    },
    SS: {
      en: 'South Sudan',
      fr: 'Soudan du Sud',
      de: 'Südsudan',
      es: 'Sudán del Sur',
      it: 'Sudan del Sud',
      nl: 'Zuid-Soedan',
      ar: 'السودان الجنوبي',
      pt: 'Sudão do Sul',
      tr: 'Güney Sudan',
      ru: 'Южный Судан',
      zh: '南苏丹',
    },
    ES: {
      en: 'Spain',
      fr: 'Espagne',
      de: 'Spanien',
      es: 'España',
      it: 'Spagna',
      nl: 'Spanje',
      ar: 'إسبانيا',
      pt: 'Espanha',
      tr: 'İspanya',
      ru: 'Испания',
      zh: '西班牙',
    },
    LK: {
      en: 'Sri Lanka',
      fr: 'Sri Lanka',
      de: 'Sri Lanka',
      es: 'Sri Lanka',
      it: 'Sri Lanka',
      nl: 'Sri Lanka',
      ar: 'سري لانكا',
      pt: 'Sri Lanka',
      tr: 'Sri Lanka',
      ru: 'Шри-Ланка',
      zh: '斯里兰卡',
    },
    SD: {
      en: 'Sudan',
      fr: 'Soudan',
      de: 'Sudan',
      es: 'Sudán',
      it: 'Sudan',
      nl: 'Sudan',
      ar: 'السودان',
      pt: 'Sudão',
      tr: 'Sudan',
      ru: 'Судан',
      zh: '苏丹',
    },
    SR: {
      en: 'Suriname',
      fr: 'Suriname',
      de: 'Suriname',
      es: 'Surinam',
      it: 'Surinam',
      nl: 'Surinam',
      ar: 'سورينام',
      pt: 'Suriname',
      tr: 'Surinam',
      ru: 'Суринам',
      zh: '苏里南',
    },
    SJ: {
      en: 'Svalbard and Jan Mayen',
      fr: "Svalbard et l'Île Jan Mayen",
      de: 'Svalbard und Jan Mayen',
      es: 'Svalbard y Jan Mayen',
      it: 'Svalbard e Jan Mayen',
      nl: 'Svalbard en Jan Mayen',
      ar: 'سفالبارد وجان ماين',
      pt: 'Svalbard e Ilha Jan Mayen',
      tr: 'Svalbard ve Jan Mayen Adaları',
      ru: 'Шпицберген и Ян-Майен',
      zh: '斯瓦尔巴和扬马延',
    },
    SE: {
      en: 'Sweden',
      fr: 'Suède',
      de: 'Schweden',
      es: 'Suecia',
      it: 'Svezia',
      nl: 'Zweden',
      ar: 'السويد',
      pt: 'Suécia',
      tr: 'İsveç',
      ru: 'Швеция',
      zh: '瑞典',
    },
    CH: {
      en: 'Switzerland',
      fr: 'Suisse',
      de: 'Schweiz',
      es: 'Suiza',
      it: 'Svizzera',
      nl: 'Zwitserland',
      ar: 'سويسرا',
      pt: 'Suíça',
      tr: 'İsviçre',
      ru: 'Швейцария',
      zh: '瑞士',
    },
    SY: {
      en: 'Syria',
      fr: 'Syrie',
      de: 'Syrien',
      es: 'Siria',
      it: 'Siria',
      nl: 'Siria',
      ar: 'سوريا',
      pt: 'Síria',
      tr: 'Sıria',
      ru: 'Сирия',
      zh: '叙利亚',
    },
    TW: {
      en: 'Taiwan',
      fr: 'Taïwan',
      de: 'Taiwan',
      es: 'Taiwan',
      it: 'Taiwan',
      nl: 'Taiwan',
      ar: 'تايوان',
      pt: 'Taiwan',
      tr: 'Taiwan',
      ru: 'Тайвань',
      zh: '台湾',
    },
    TJ: {
      en: 'Tajikistan',
      fr: 'Tadjikistan',
      de: 'Tadschikistan',
      es: 'Tayikistán',
      it: 'Tayikistan',
      nl: 'Tadschikistan',
      ar: 'طاجيكستان',
      pt: 'Tajiquistão',
      tr: 'Tayikistan',
      ru: 'Таджикистан',
      zh: '塔吉克斯坦',
    },
    TZ: {
      en: 'Tanzania',
      fr: 'Tanzanie',
      de: 'Tanzania',
      es: 'Tanzania',
      it: 'Tanzania',
      nl: 'Tanzania',
      ar: 'تنزانيا',
      pt: 'Tanzânia',
      tr: 'Tanzanya',
      ru: 'Танзания',
      zh: '坦桑尼亚',
    },
    TH: {
      en: 'Thailand',
      fr: 'Thaïlande',
      de: 'Thailand',
      es: 'Tailandia',
      it: 'Tailandia',
      nl: 'Thailand',
      ar: 'تايلاند',
      pt: 'Tailândia',
      tr: 'Tayland',
      ru: 'Таиланд',
      zh: '泰国',
    },
    TL: {
      en: 'Timor-Leste',
      fr: 'Timor-Leste',
      de: 'Timor-Leste',
      es: 'Timor-Leste',
      it: 'Timor-Leste',
      nl: 'Timor-Leste',
      ar: 'تيمور الشرقية',
      pt: 'Timor-Leste',
      tr: 'Doğu Timor',
      ru: 'Восточный Тимор',
      zh: '东帝汶',
    },
    TG: {
      en: 'Togo',
      fr: 'Togo',
      de: 'Togo',
      es: 'Togo',
      it: 'Togo',
      nl: 'Togo',
      ar: 'توجو',
      pt: 'Togo',
      tr: 'Togo',
      ru: 'Того',
      zh: '多哥',
    },
    TK: {
      en: 'Tokelau',
      fr: 'Tokelau',
      de: 'Tokelau',
      es: 'Tokelau',
      it: 'Tokelau',
      nl: 'Tokelau',
      ar: 'توكيلاو',
      pt: 'Tokelau',
      tr: 'Tokelau',
      ru: 'Токелау',
      zh: '托克劳',
    },
    TO: {
      en: 'Tonga',
      fr: 'Tonga',
      de: 'Tonga',
      es: 'Tonga',
      it: 'Tonga',
      nl: 'Tonga',
      ar: 'تونغا',
      pt: 'Tonga',
      tr: 'Tonga',
      ru: 'Тонга',
      zh: '汤加',
    },
    TT: {
      en: 'Trinidad and Tobago',
      fr: 'Trinidad et Tobago',
      de: 'Trinidad und Tobago',
      es: 'Trinidad y Tobago',
      it: 'Trinidad e Tobago',
      nl: 'Trinidad en Tobago',
      ar: 'ترينيداد وتوباغو',
      pt: 'Trinidad e Tobago',
      tr: 'Trinidad ve Tobago',
      ru: 'Тринидад и Тобаго',
      zh: '特立尼达和多巴哥',
    },
    TN: {
      en: 'Tunisia',
      fr: 'Tunisie',
      de: 'Tunesien',
      es: 'Túnez',
      it: 'Tunisia',
      nl: 'Tunesië',
      ar: 'تونس',
      pt: 'Tunísia',
      tr: 'Tunisia',
      ru: 'Тунис',
      zh: '突尼斯',
    },
    TR: {
      en: 'Turkey',
      fr: 'Turquie',
      de: 'Türkei',
      es: 'Turquía',
      it: 'Turchia',
      nl: 'Turkije',
      ar: 'تركيا',
      pt: 'Turquia',
      tr: 'Türkiye',
      ru: 'Турция',
      zh: '土耳其',
    },
    TM: {
      en: 'Turkmenistan',
      fr: 'Turkménistan',
      de: 'Turkmenistan',
      es: 'Turkmenistan',
      it: 'Turkmenistan',
      nl: 'Turkmenistan',
      ar: 'تركمانستان',
      pt: 'Turcomanistão',
      tr: 'Türkmenistan',
      ru: 'Туркменистан',
      zh: '土库曼斯坦',
    },
    TC: {
      en: 'Turks and Caicos Islands',
      fr: 'Îles Turques et Caïques',
      de: 'Turks- und Caicosinseln',
      es: 'Islas Turcas y Caicos',
      it: 'Isole Turks e Caicos',
      nl: 'Turks- en Caicoseilanden',
      ar: 'جزر تركس وكايكوس',
      pt: 'Ilhas Turcas e Caicos',
      tr: 'Turks Adaları ve Caicos Adaları',
      ru: 'Острова Теркс и Кайкос',
      zh: '特克斯和凯科斯群岛',
    },
    TV: {
      en: 'Tuvalu',
      fr: 'Tuvalu',
      de: 'Tuvalu',
      es: 'Tuvalu',
      it: 'Tuvalu',
      nl: 'Tuvalu',
      ar: 'توفالو',
      pt: 'Tuvalu',
      tr: 'Tuvalu',
      ru: 'Тувалу',
      zh: '图瓦卢',
    },
    UG: {
      en: 'Uganda',
      fr: 'Ouganda',
      de: 'Uganda',
      es: 'Uganda',
      it: 'Uganda',
      nl: 'Uganda',
      ar: 'أوغندا',
      pt: 'Uganda',
      tr: 'Uganda',
      ru: 'Уганда',
      zh: '乌干达',
    },
    UA: {
      en: 'Ukraine',
      fr: 'Ukraine',
      de: 'Ukraine',
      es: 'Ucrania',
      it: 'Ucraina',
      nl: 'Oekraïne',
      ar: 'أوكرانيا',
      pt: 'Ucrânia',
      tr: 'Ukrayna',
      ru: 'Украина',
      zh: '乌克兰',
    },
    AE: {
      en: 'United Arab Emirates',
      fr: 'Émirats arabes unis',
      de: 'Vereinigte Arabische Emirate',
      es: 'Emiratos Árabes Unidos',
      it: 'Emirati Arabi Uniti',
      nl: 'Verenigde Arabische Emiraten',
      ar: 'الإمارات العربية المتحدة',
      pt: 'Emirados Árabes Unidos',
      tr: 'Birleşik Arap Emirlikleri',
      ru: 'Объединенные Арабские Эмираты',
      zh: '阿联酋',
    },
    GB: {
      en: 'United Kingdom',
      fr: 'Royaume-Uni',
      de: 'Vereinigtes Königreich',
      es: 'Reino Unido',
      it: 'Regno Unito',
      nl: 'Verenigd Koninkrijk',
      ar: 'المملكة المتحدة',
      pt: 'Reino Unido',
      tr: 'Birleşik Krallık',
      ru: 'Великобритания',
      zh: '英国',
    },
    US: {
      en: 'United States',
      fr: 'États-Unis',
      de: 'Vereinigte Staaten',
      es: 'Estados Unidos',
      it: 'Stati Uniti',
      nl: 'Verenigde Staten',
      ar: 'الولايات المتحدة',
      pt: 'Estados Unidos',
      tr: 'Amerika Birleşik Devletleri',
      ru: 'Соединенные Штаты Америки',
      zh: '美国',
    },
    UY: {
      en: 'Uruguay',
      fr: 'Uruguay',
      de: 'Uruguay',
      es: 'Uruguay',
      it: 'Uruguay',
      nl: 'Uruguay',
      ar: 'أوروغواي',
      pt: 'Uruguai',
      tr: 'Uruguay',
      ru: 'Уругвай',
      zh: '乌拉圭',
    },
    UZ: {
      en: 'Uzbekistan',
      fr: 'Ouzbékistan',
      de: 'Usbekistan',
      es: 'Uzbekistán',
      it: 'Uzbekistan',
      nl: 'Usbekistan',
      ar: 'أوزبكستان',
      pt: 'Usbequistão',
      tr: 'Özbekistan',
      ru: 'Узбекистан',
      zh: '乌兹别克斯坦',
    },
    VU: {
      en: 'Vanuatu',
      fr: 'Vanuatu',
      de: 'Vanuatu',
      es: 'Vanuatu',
      it: 'Vanuatu',
      nl: 'Vanuatu',
      ar: 'فانواتو',
      pt: 'Vanuatu',
      tr: 'Vanuatu',
      ru: 'Вануату',
      zh: '瓦努阿图',
    },
    VA: {
      en: 'Vatican City',
      fr: 'Vatican',
      de: 'Vatikan',
      es: 'Ciudad del Vaticano',
      it: 'Città del Vaticano',
      nl: 'Vaticaanstad',
      ar: 'الفاتيكان',
      pt: 'Vaticano',
      tr: 'Vatikan',
      ru: 'Ватикан',
      zh: '梵蒂冈',
    },
    VE: {
      en: 'Venezuela',
      fr: 'Venezuela',
      de: 'Venezuela',
      es: 'Venezuela',
      it: 'Venezuela',
      nl: 'Venezuela',
      ar: 'فنزويلا',
      pt: 'Venezuela',
      tr: 'Venezuela',
      ru: 'Венесуэла',
      zh: '委内瑞拉',
    },
    VI: {
      en: 'U.S. Virgin Islands',
      fr: 'Îles Vierges américaines',
      de: 'Amerikanische Jungferninseln',
      es: 'Islas Vírgenes de los Estados Unidos',
      it: 'Isole Vergini Americane',
      nl: 'Amerikaanse Maagdeneilanden',
      ar: 'جزر العذراء الأمريكية',
      pt: 'Ilhas Virgens Americanas',
      tr: 'ABD Virjin Adaları',
      ru: 'Американские Виргинские острова',
      zh: '美属维尔京群岛',
    },
    VN: {
      en: 'Vietnam',
      fr: 'Vietnam',
      de: 'Vietnam',
      es: 'Vietnam',
      it: 'Vietnam',
      nl: 'Vietnam',
      ar: 'فيتنام',
      pt: 'Vietnam',
      tr: 'Vietnam',
      ru: 'Вьетнам',
      zh: '越南',
    },
    WF: {
      en: 'Wallis and Futuna',
      fr: 'Wallis et Futuna',
      de: 'Wallis und Futuna',
      es: 'Wallis y Futuna',
      it: 'Wallis e Futuna',
      nl: 'Wallis en Futuna',
      ar: 'واليس وفوتونا',
      pt: 'Wallis e Futuna',
      tr: 'Wallis ve Futuna',
      ru: 'Уоллис и Футуна',
      zh: '瓦利斯和富图纳',
    },
    YE: {
      en: 'Yemen',
      fr: 'Yémen',
      de: 'Jemen',
      es: 'Yemen',
      it: 'Yemen',
      nl: 'Jemen',
      ar: 'اليمن',
      pt: 'Iémen',
      tr: 'Yemen',
      ru: 'Йемен',
      zh: '也门',
    },
    ZM: {
      en: 'Zambia',
      fr: 'Zambie',
      de: 'Zambia',
      es: 'Zambia',
      it: 'Zambia',
      nl: 'Zambia',
      ar: 'زامبيا',
      pt: 'Zâmbia',
      tr: 'Zambia',
      ru: 'Замбия',
      zh: '赞比亚',
    },
    ZW: {
      en: 'Zimbabwe',
      fr: 'Zimbabwe',
      de: 'Zimbabwe',
      es: 'Zimbabwe',
      it: 'Zimbabwe',
      nl: 'Zimbabwe',
      ar: 'زيمبابوي',
      pt: 'Zimbábue',
      tr: 'Zimbabve',
      ru: 'Зимбабве',
      zh: '津巴布韦',
    },
  },
  fe = (g, a) => {
    const z = Oa[g];
    if (z && z[a]) return z[a];
    if (z && z.en) return z.en;
    const b = xe.find((n) => n.code === g);
    return b ? b.name : g;
  },
  Wa = {
    fr: ['FR', 'BE', 'CH', 'CA', 'LU', 'MC'],
    en: ['US', 'GB', 'CA', 'AU', 'NZ', 'IE'],
    de: ['DE', 'AT', 'CH', 'LI'],
    es: ['ES', 'MX', 'AR', 'CO', 'PE', 'CL'],
    it: ['IT', 'SM', 'VA', 'CH'],
    nl: ['NL', 'BE'],
    pt: ['PT', 'BR', 'AO', 'MZ'],
    zh: ['CN', 'TW', 'HK', 'MO', 'SG'],
    ar: ['SA', 'AE', 'EG', 'JO', 'LB', 'MA'],
    tr: ['TR', 'CY'],
    ru: ['RU', 'BY', 'KZ', 'KG', 'UA'],
  },
  Qa = ({ children: g }) => {
    const [a, z] = r.useState(1),
      [b, n] = r.useState(Pa),
      [p, A] = r.useState(Sa),
      [y, M] = r.useState(''),
      [H, N] = r.useState(!1),
      [l, t] = r.useState(-1),
      [u, P] = r.useState(() => {
        if (typeof navigator < 'u') {
          const o = navigator.language || 'en';
          if (o.startsWith('fr')) return 'fr';
          if (o.startsWith('zh')) return 'zh';
          if (o.startsWith('de')) return 'de';
          if (o.startsWith('es')) return 'es';
          if (o.startsWith('it')) return 'it';
          if (o.startsWith('nl')) return 'nl';
          if (o.startsWith('ar')) return 'ar';
          if (o.startsWith('pt')) return 'pt';
          if (o.startsWith('tr')) return 'tr';
          if (o.startsWith('ru')) return 'ru';
        }
        return 'en';
      }),
      [f, O] = r.useState(''),
      [_, J] = r.useState(''),
      [x, h] = r.useState(''),
      [T, m] = r.useState(!1),
      [I, F] = r.useState(1),
      [C, j] = r.useState(''),
      [K, S] = r.useState(!1),
      [B, i] = r.useState(1),
      [k, w] = r.useState(1),
      [c, D] = r.useState(0),
      [R, V] = r.useState('container'),
      [ee, ne] = r.useState(1),
      [oe, q] = r.useState(1),
      [v, E] = r.useState('USD 💵'),
      [W, L] = r.useState(!1),
      G = r.useCallback(
        (o) => {
          const s = xe.find((d) => d.code === o);
          if (
            (n((d) => ({
              ...d,
              country: o,
              phoneCountryCode: (s == null ? void 0 : s.phonePrefix) || d.phoneCountryCode,
              destPort: '',
              destCity: '',
              destZipCode: '',
              destLocationType: '',
            })),
            A((d) => ({
              ...d,
              country: !0,
              destPort: null,
              destCity: null,
              destZipCode: null,
              destLocationType: null,
            })),
            s &&
              (M(`${s.flag} ${fe(s.code, u)}`), s.phonePrefix && O(`${s.flag} ${s.phonePrefix}`)),
            N(!1),
            typeof window < 'u')
          )
            try {
              const d = 'countryUsage',
                $ = localStorage.getItem(d),
                Y = $ ? JSON.parse($) : {};
              ((Y[o] = (Y[o] || 0) + 1), localStorage.setItem(d, JSON.stringify(Y)));
            } catch {}
        },
        [u]
      ),
      Q = r.useCallback(
        () => [
          { id: 'factory', name: 'Factory/Warehouse', icon: Ze },
          { id: 'port', name: 'Port/Airport', icon: Ve },
          { id: 'business', name: 'Business address', icon: $e },
          { id: 'residential', name: 'Residential address', icon: Ye },
        ],
        []
      ),
      Z = r.useCallback(() => {
        if (!b.country) return [];
        const o = De[b.country] || [];
        if (!x.trim() || b.destPort) return o;
        const s = x
          .replace(new RegExp('\\p{Extended_Pictographic}', 'gu'), '')
          .trim()
          .toLowerCase();
        return s
          ? o.filter(
              (d) =>
                d.name.toLowerCase().includes(s) ||
                d.code.toLowerCase().includes(s) ||
                d.type.toLowerCase().includes(s)
            )
          : o;
      }, [b.country, x, b.destPort]),
      ae = r.useCallback(
        (o, s) => {
          const d = ge[u] || ge.en || {},
            $ = d == null ? void 0 : d[o];
          if (typeof $ == 'string' && $.trim().length > 0) return $;
          const re = (ge.en || {})[o];
          return typeof re == 'string' && re.trim().length > 0
            ? re
            : typeof s == 'string' && s.length > 0
              ? s
              : o;
        },
        [u]
      ),
      X = r.useCallback((o, s) => {
        const d = ge[s];
        switch (o) {
          case 'factory':
            return (d == null ? void 0 : d.factoryWarehouse) || 'Factory/Warehouse';
          case 'port':
            return (d == null ? void 0 : d.portAirport) || 'Port/Airport';
          case 'business':
            return (d == null ? void 0 : d.businessAddress) || 'Business address';
          case 'residential':
            return (d == null ? void 0 : d.residentialAddress) || 'Residential address';
          default:
            return o;
        }
      }, []),
      te = r.useCallback((o, s) => {
        const d = ge[s];
        switch (o) {
          case 'factory':
            return (
              (d == null ? void 0 : d.factoryWarehouseDesc) ||
              'Factory, distribution center, warehouse'
            );
          case 'port':
            return (d == null ? void 0 : d.portAirportDesc) || 'Direct to port/airport pickup';
          case 'business':
            return (
              (d == null ? void 0 : d.businessAddressDesc) || 'Company address, office building'
            );
          case 'residential':
            return (
              (d == null ? void 0 : d.residentialAddressDesc) ||
              'House, apartment, personal address'
            );
          default:
            return '';
        }
      }, []),
      le = 'CN',
      de = r.useMemo(() => De[le] || [], []),
      ce = r.useCallback(() => {
        const o = de;
        if (!C.trim() || b.origin) return o;
        const s = C.replace(new RegExp('\\p{Extended_Pictographic}', 'gu'), '')
          .trim()
          .toLowerCase();
        return s
          ? o.filter(
              (d) =>
                d.name.toLowerCase().includes(s) ||
                d.code.toLowerCase().includes(s) ||
                d.type.toLowerCase().includes(s)
            )
          : o;
      }, [de, C, b.origin]),
      be = r.useCallback(
        (o) => {
          (n((s) => ({ ...s, locationType: o, city: '', zipCode: '', origin: '' })),
            A((s) => ({ ...s, city: null, zipCode: null, origin: null, locationType: !0 })),
            j(''));
        },
        [n, A]
      ),
      Se = r.useCallback(
        (o) => {
          (n((d) => ({ ...d, origin: o })), A((d) => ({ ...d, origin: !0 })));
          const s = de.find((d) => d.code === o);
          if (s) {
            const d = (() => {
              var re;
              return ((re = {}[o]) == null ? void 0 : re[u]) || s.name;
            })();
            j(`${s.flag} ${d}`);
          }
          S(!1);
        },
        [de, n, A, u]
      ),
      pe = r.useCallback((o, s) => {
        const d = o.code,
          $ = o.name,
          re = {
            DEHAM: {
              en: 'Port of Hamburg',
              de: 'Hafen Hamburg',
              fr: 'Port de Hambourg',
              es: 'Puerto de Hamburgo',
              it: 'Porto di Amburgo',
              nl: 'Haven van Hamburg',
              pt: 'Porto de Hamburgo',
              tr: 'Hamburg Limanı',
              ru: 'Порт Гамбург',
              zh: '汉堡港',
              ar: 'ميناء هامبورغ',
            },
            DEBRE: {
              en: 'Port of Bremen',
              de: 'Hafen Bremen',
              fr: 'Port de Brême',
              es: 'Puerto de Bremen',
              it: 'Porto di Brema',
              nl: 'Haven van Bremen',
              pt: 'Porto de Bremen',
              tr: 'Bremen Limanı',
              ru: 'Порт Бремен',
              zh: '不来梅港',
              ar: 'ميناء بريمن',
            },
            DEFRA: {
              en: 'Frankfurt Airport',
              de: 'Flughafen Frankfurt',
              fr: 'Aéroport de Francfort',
              es: 'Aeropuerto de Fráncfort',
              it: 'Aeroporto di Francoforte',
              nl: 'Luchthaven Frankfurt',
              pt: 'Aeroporto de Frankfurt',
              tr: 'Frankfurt Havaalanı',
              ru: 'Аэропорт Франкфурт',
              zh: '法兰克福机场',
              ar: 'مطار فرانكفورت',
            },
            DEMUC: {
              en: 'Munich Airport',
              de: 'Flughafen München',
              fr: 'Aéroport de Munich',
              es: 'Aeropuerto de Múnich',
              it: 'Aeroporto di Monaco',
              nl: 'Luchthaven München',
              pt: 'Aeroporto de Munique',
              tr: 'Münih Havaalanı',
              ru: 'Аэропорт Мюнхен',
              zh: '慕尼黑机场',
              ar: 'مطار ميونيخ',
            },
            TWKHH: {
              en: 'Port of Kaohsiung',
              fr: 'Port de Kaohsiung',
              de: 'Hafen Kaohsiung',
              es: 'Puerto de Kaohsiung',
              it: 'Porto di Kaohsiung',
              nl: 'Haven van Kaohsiung',
              pt: 'Porto de Kaohsiung',
              tr: 'Kaohsiung Limanı',
              ru: 'Порт Гаосюн',
              zh: '高雄港',
              ar: 'ميناء كاوشيونغ',
            },
            TWTPE_AIR: {
              en: 'Taipei Taoyuan Airport',
              fr: 'Aéroport de Taipei Taoyuan',
              de: 'Flughafen Taipei Taoyuan',
              es: 'Aeropuerto de Taipéi Taoyuan',
              it: 'Aeroporto di Taipei Taoyuan',
              nl: 'Luchthaven Taipei Taoyuan',
              pt: 'Aeroporto de Taipei Taoyuan',
              tr: 'Taipei Taoyuan Havaalanı',
              ru: 'Аэропорт Тайбэй Таоюань',
              zh: '台北桃园机场',
              ar: 'مطار تايبيه تاويوان',
            },
            QADOH_AIR: {
              en: 'Doha Hamad International Airport',
              fr: 'Aéroport international de Doha Hamad',
              de: 'Internationaler Flughafen Doha Hamad',
              es: 'Aeropuerto Internacional de Doha Hamad',
              it: 'Aeroporto Internazionale di Doha Hamad',
              nl: 'Internationale Luchthaven Doha Hamad',
              pt: 'Aeroporto Internacional de Doha Hamad',
              tr: 'Doha Hamad Uluslararası Havaalanı',
              ru: 'Международный аэропорт Доха Хамад',
              zh: '多哈哈马德国际机场',
              ar: 'مطار حمد الدولي',
            },
            SAJED: {
              en: 'Port of Jeddah',
              fr: 'Port de Jeddah',
              de: 'Hafen Dschidda',
              es: 'Puerto de Jeddah',
              it: 'Porto di Jeddah',
              nl: 'Haven van Jeddah',
              pt: 'Porto de Jeddah',
              tr: 'Cidde Limanı',
              ru: 'Порт Джидда',
              zh: '吉达港',
              ar: 'ميناء جدة',
            },
            SARUH: {
              en: 'Riyadh King Khalid Airport',
              fr: 'Aéroport de Riyadh King Khalid',
              de: 'Flughafen Riad King Khalid',
              es: 'Aeropuerto de Riad King Khalid',
              it: 'Aeroporto di Riyadh King Khalid',
              nl: 'Luchthaven Riyadh King Khalid',
              pt: 'Aeroporto de Riyadh King Khalid',
              tr: 'Riyad Kral Halid Havaalanı',
              ru: 'Аэропорт Эр-Рияд имени короля Халида',
              zh: '利雅得哈立德国王机场',
              ar: 'مطار الملك خالد الدولي',
            },
            LULUX: {
              en: 'Luxembourg Findel Airport',
              fr: 'Aéroport de Luxembourg Findel',
              de: 'Flughafen Luxemburg Findel',
              es: 'Aeropuerto de Luxemburgo Findel',
              it: 'Aeroporto di Lussemburgo Findel',
              nl: 'Luchthaven Luxemburg Findel',
              pt: 'Aeroporto de Luxemburgo Findel',
              tr: 'Lüksemburg Findel Havaalanı',
              ru: 'Аэропорт Люксембург Финдель',
              zh: '卢森堡芬德尔机场',
              ar: 'مطار لوكسمبورغ فيندل',
            },
            MCMON: {
              en: 'Port of Monaco',
              fr: 'Port de Monaco',
              de: 'Hafen Monaco',
              es: 'Puerto de Mónaco',
              it: 'Porto di Monaco',
              nl: 'Haven van Monaco',
              pt: 'Porto do Mônaco',
              tr: 'Monako Limanı',
              ru: 'Порт Монако',
              zh: '摩纳哥港',
              ar: 'ميناء موناكو',
            },
            ISKEF: {
              en: 'Reykjavik Keflavik Airport',
              fr: 'Aéroport de Reykjavik Keflavik',
              de: 'Flughafen Reykjavik Keflavik',
              es: 'Aeropuerto de Reykjavik Keflavik',
              it: 'Aeroporto di Reykjavik Keflavik',
              nl: 'Luchthaven Reykjavik Keflavik',
              pt: 'Aeroporto de Reykjavik Keflavik',
              tr: 'Reykjavik Keflavik Havaalanı',
              ru: 'Аэропорт Рейкьявик Кефлавик',
              zh: '雷克雅未克凯夫拉维克机场',
              ar: 'مطار ريكيافيك كيفلافيك',
            },
            ISREY: {
              en: 'Port of Reykjavik',
              fr: 'Port de Reykjavik',
              de: 'Hafen Reykjavik',
              es: 'Puerto de Reykjavik',
              it: 'Porto di Reykjavik',
              nl: 'Haven van Reykjavik',
              pt: 'Porto de Reykjavik',
              tr: 'Reykjavik Limanı',
              ru: 'Порт Рейкьявик',
              zh: '雷克雅未克港',
              ar: 'ميناء ريكيافيك',
            },
            MTMLA: {
              en: 'Port of Valletta',
              fr: 'Port de La Valette',
              de: 'Hafen Valletta',
              es: 'Puerto de La Valeta',
              it: 'Porto di La Valletta',
              nl: 'Haven van Valletta',
              pt: 'Porto de Valletta',
              tr: 'Valletta Limanı',
              ru: 'Порт Валлетта',
              zh: '瓦莱塔港',
              ar: 'ميناء فاليتا',
            },
            MTMRS: {
              en: 'Port of Marsaxlokk',
              fr: 'Port de Marsaxlokk',
              de: 'Hafen Marsaxlokk',
              es: 'Puerto de Marsaxlokk',
              it: 'Porto di Marsaxlokk',
              nl: 'Haven van Marsaxlokk',
              pt: 'Porto de Marsaxlokk',
              tr: 'Marsaxlokk Limanı',
              ru: 'Порт Марсашлокк',
              zh: '马尔萨什洛克港',
              ar: 'ميناء مارساشلوك',
            },
            CYLIM: {
              en: 'Port of Limassol',
              fr: 'Port de Limassol',
              de: 'Hafen Limassol',
              es: 'Puerto de Limassol',
              it: 'Porto di Limassol',
              nl: 'Haven van Limassol',
              pt: 'Porto de Limassol',
              tr: 'Limasol Limanı',
              ru: 'Порт Лимассол',
              zh: '利马索尔港',
              ar: 'ميناء ليماسول',
            },
            TZDAR: {
              en: 'Port of Dar es Salaam',
              fr: 'Port de Dar es Salaam',
              de: 'Hafen Dar es Salaam',
              es: 'Puerto de Dar es Salaam',
              it: 'Porto di Dar es Salaam',
              nl: 'Haven van Dar es Salaam',
              pt: 'Porto de Dar es Salaam',
              tr: 'Dar es Salaam Limanı',
              ru: 'Порт Дар-эс-Салам',
              zh: '达累斯萨拉姆港',
              ar: 'ميناء دار السلام',
            },
            RWKGL: {
              en: 'Kigali International Airport',
              fr: 'Aéroport international de Kigali',
              de: 'Internationaler Flughafen Kigali',
              es: 'Aeropuerto Internacional de Kigali',
              it: 'Aeroporto Internazionale di Kigali',
              nl: 'Internationale Luchthaven Kigali',
              pt: 'Aeroporto Internacional de Kigali',
              tr: 'Kigali Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кигали',
              zh: '基加利国际机场',
              ar: 'مطار كيغالي الدولي',
            },
            UGENT_AIR: {
              en: 'Entebbe International Airport',
              fr: "Aéroport international d'Entebbe",
              de: 'Internationaler Flughafen Entebbe',
              es: 'Aeropuerto Internacional de Entebbe',
              it: 'Aeroporto Internazionale di Entebbe',
              nl: 'Internationale Luchthaven Entebbe',
              pt: 'Aeroporto Internacional de Entebbe',
              tr: 'Entebbe Uluslararası Havaalanı',
              ru: 'Международный аэропорт Энтеббе',
              zh: '恩德培国际机场',
              ar: 'مطار عنتيبي الدولي',
            },
            FJNAN: {
              en: 'Nadi Airport',
              fr: 'Aéroport de Nadi',
              de: 'Flughafen Nadi',
              es: 'Aeropuerto de Nadi',
              it: 'Aeroporto di Nadi',
              nl: 'Luchthaven Nadi',
              pt: 'Aeroporto de Nadi',
              tr: 'Nadi Havaalanı',
              ru: 'Аэропорт Нади',
              zh: '楠迪机场',
              ar: 'مطار نادي',
            },
            FJSUV: {
              en: 'Port of Suva',
              fr: 'Port de Suva',
              de: 'Hafen Suva',
              es: 'Puerto de Suva',
              it: 'Porto di Suva',
              nl: 'Haven van Suva',
              pt: 'Porto de Suva',
              tr: 'Suva Limanı',
              ru: 'Порт Сува',
              zh: '苏瓦港',
              ar: 'ميناء سوفا',
            },
            MUPTS: {
              en: 'Port Louis',
              fr: 'Port Louis',
              de: 'Port Louis',
              es: 'Puerto Louis',
              it: 'Port Louis',
              nl: 'Port Louis',
              pt: 'Port Louis',
              tr: 'Port Louis',
              ru: 'Порт-Луи',
              zh: '路易港',
              ar: 'بورت لويس',
            },
            MUPTS_AIR: {
              en: 'Mauritius Airport',
              fr: 'Aéroport de Maurice',
              de: 'Flughafen Mauritius',
              es: 'Aeropuerto de Mauricio',
              it: 'Aeroporto di Mauritius',
              nl: 'Luchthaven Mauritius',
              pt: 'Aeroporto de Maurício',
              tr: 'Mauritius Havaalanı',
              ru: 'Аэропорт Маврикий',
              zh: '毛里求斯机场',
              ar: 'مطار موريشيوس',
            },
            SCVIC: {
              en: 'Port of Victoria',
              fr: 'Port de Victoria',
              de: 'Hafen Victoria',
              es: 'Puerto de Victoria',
              it: 'Porto di Victoria',
              nl: 'Haven van Victoria',
              pt: 'Porto de Victoria',
              tr: 'Victoria Limanı',
              ru: 'Порт Виктория',
              zh: '维多利亚港',
              ar: 'ميناء فيكتوريا',
            },
            MVMAL_AIR: {
              en: 'Malé Velana Airport',
              fr: 'Aéroport de Malé Velana',
              de: 'Flughafen Malé Velana',
              es: 'Aeropuerto de Malé Velana',
              it: 'Aeroporto di Malé Velana',
              nl: 'Luchthaven Malé Velana',
              pt: 'Aeroporto de Malé Velana',
              tr: 'Malé Velana Havaalanı',
              ru: 'Аэропорт Мале Велана',
              zh: '马累维拉纳机场',
              ar: 'مطار مالي فيلانا',
            },
            ROCND: {
              en: 'Port of Constanta',
              fr: 'Port de Constanta',
              de: 'Hafen Konstanza',
              es: 'Puerto de Constanza',
              it: 'Porto di Costanza',
              nl: 'Haven van Constanta',
              pt: 'Porto de Constanta',
              tr: 'Köstence Limanı',
              ru: 'Порт Констанца',
              zh: '康斯坦察港',
              ar: 'ميناء كونستانتا',
            },
            ROGLT: {
              en: 'Port of Galati',
              fr: 'Port de Galati',
              de: 'Hafen Galați',
              es: 'Puerto de Galați',
              it: 'Porto di Galați',
              nl: 'Haven van Galați',
              pt: 'Porto de Galați',
              tr: 'Galați Limanı',
              ru: 'Порт Галац',
              zh: '加拉茨港',
              ar: 'ميناء غالاتي',
            },
            ROBUH: {
              en: 'Bucharest Henri Coandă Airport',
              fr: 'Aéroport de Bucarest Henri Coandă',
              de: 'Flughafen Bukarest Henri Coandă',
              es: 'Aeropuerto de Bucarest Henri Coandă',
              it: 'Aeroporto di Bucarest Henri Coandă',
              nl: 'Luchthaven Boekarest Henri Coandă',
              pt: 'Aeroporto de Bucareste Henri Coandă',
              tr: 'Bükreş Henri Coandă Havaalanı',
              ru: 'Аэропорт Бухарест Анри Коандэ',
              zh: '布加勒斯特亨利·科安德机场',
              ar: 'مطار بوخارست هنري كواندا',
            },
            BGVAR: {
              en: 'Port of Varna',
              fr: 'Port de Varna',
              de: 'Hafen Warna',
              es: 'Puerto de Varna',
              it: 'Porto di Varna',
              nl: 'Haven van Varna',
              pt: 'Porto de Varna',
              tr: 'Varna Limanı',
              ru: 'Порт Варна',
              zh: '瓦尔纳港',
              ar: 'ميناء فارنا',
            },
            BGSOF: {
              en: 'Sofia Airport',
              fr: 'Aéroport de Sofia',
              de: 'Flughafen Sofia',
              es: 'Aeropuerto de Sofía',
              it: 'Aeroporto di Sofia',
              nl: 'Luchthaven Sofia',
              pt: 'Aeroporto de Sofia',
              tr: 'Sofya Havaalanı',
              ru: 'Аэропорт София',
              zh: '索菲亚机场',
              ar: 'مطار صوفيا',
            },
            PLWAR: {
              en: 'Port of Warsaw',
              fr: 'Port de Varsovie',
              de: 'Hafen Warschau',
              es: 'Puerto de Varsovia',
              it: 'Porto di Varsavia',
              nl: 'Haven van Warschau',
              pt: 'Porto de Varsóvia',
              tr: 'Varşova Limanı',
              ru: 'Порт Варшава',
              zh: '华沙港',
              ar: 'ميناء وارسو',
            },
            PLGDN: {
              en: 'Port of Gdansk',
              fr: 'Port de Gdansk',
              de: 'Hafen Danzig',
              es: 'Puerto de Gdansk',
              it: 'Porto di Danzica',
              nl: 'Haven van Gdansk',
              pt: 'Porto de Gdansk',
              tr: 'Gdansk Limanı',
              ru: 'Порт Гданьск',
              zh: '格但斯克港',
              ar: 'ميناء غدانسك',
            },
            CZKRK: {
              en: 'Port of Krakow',
              fr: 'Port de Cracovie',
              de: 'Hafen Krakau',
              es: 'Puerto de Cracovia',
              it: 'Porto di Cracovia',
              nl: 'Haven van Krakau',
              pt: 'Porto de Cracóvia',
              tr: 'Krakow Limanı',
              ru: 'Порт Краков',
              zh: '克拉科夫港',
              ar: 'ميناء كراكوف',
            },
            CZPRG_AIR: {
              en: 'Prague Airport',
              fr: 'Aéroport de Prague',
              de: 'Flughafen Prag',
              es: 'Aeropuerto de Praga',
              it: 'Aeroporto di Praga',
              nl: 'Luchthaven Praag',
              pt: 'Aeroporto de Praga',
              tr: 'Prag Havaalanı',
              ru: 'Аэропорт Прага',
              zh: '布拉格机场',
              ar: 'مطار براغ',
            },
            AEJEA: {
              en: 'Port of Jebel Ali',
              fr: 'Port de Jebel Ali',
              de: 'Hafen Jebel Ali',
              es: 'Puerto de Jebel Ali',
              it: 'Porto di Jebel Ali',
              nl: 'Haven van Jebel Ali',
              pt: 'Porto de Jebel Ali',
              tr: 'Jebel Ali Limanı',
              ru: 'Порт Джебель-Али',
              zh: '杰贝阿里港',
              ar: 'ميناء جبل علي',
            },
            AESHJ: {
              en: 'Port of Sharjah',
              fr: 'Port de Sharjah',
              de: 'Hafen Schardscha',
              es: 'Puerto de Sharjah',
              it: 'Porto di Sharjah',
              nl: 'Haven van Sharjah',
              pt: 'Porto de Sharjah',
              tr: 'Şarjah Limanı',
              ru: 'Порт Шарджа',
              zh: '沙迦港',
              ar: 'ميناء الشارقة',
            },
            AEDXB: {
              en: 'Dubai International Airport',
              fr: 'Aéroport international de Dubaï',
              de: 'Internationaler Flughafen Dubai',
              es: 'Aeropuerto Internacional de Dubái',
              it: 'Aeroporto Internazionale di Dubai',
              nl: 'Internationale Luchthaven Dubai',
              pt: 'Aeroporto Internacional de Dubai',
              tr: 'Dubai Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дубай',
              zh: '迪拜国际机场',
              ar: 'مطار دبي الدولي',
            },
            AEAUH: {
              en: 'Abu Dhabi International Airport',
              fr: "Aéroport international d'Abu Dhabi",
              de: 'Internationaler Flughafen Abu Dhabi',
              es: 'Aeropuerto Internacional de Abu Dhabi',
              it: 'Aeroporto Internazionale di Abu Dhabi',
              nl: 'Internationale Luchthaven Abu Dhabi',
              pt: 'Aeroporto Internacional de Abu Dhabi',
              tr: 'Abu Dabi Uluslararası Havaalanı',
              ru: 'Международный аэропорт Абу-Даби',
              zh: '阿布扎比国际机场',
              ar: 'مطار أبوظبي الدولي',
            },
            AUSYD: {
              en: 'Port of Sydney',
              fr: 'Port de Sydney',
              de: 'Hafen Sydney',
              es: 'Puerto de Sídney',
              it: 'Porto di Sydney',
              nl: 'Haven van Sydney',
              pt: 'Porto de Sydney',
              tr: 'Sidney Limanı',
              ru: 'Порт Сидней',
              zh: '悉尼港',
              ar: 'ميناء سيدني',
            },
            AUMEL: {
              en: 'Port of Melbourne',
              fr: 'Port de Melbourne',
              de: 'Hafen Melbourne',
              es: 'Puerto de Melbourne',
              it: 'Porto di Melbourne',
              nl: 'Haven van Melbourne',
              pt: 'Porto de Melbourne',
              tr: 'Melbourne Limanı',
              ru: 'Порт Мельбурн',
              zh: '墨尔本港',
              ar: 'ميناء ملبورن',
            },
            AUBNE: {
              en: 'Port of Brisbane',
              fr: 'Port de Brisbane',
              de: 'Hafen Brisbane',
              es: 'Puerto de Brisbane',
              it: 'Porto di Brisbane',
              nl: 'Haven van Brisbane',
              pt: 'Porto de Brisbane',
              tr: 'Brisbane Limanı',
              ru: 'Порт Брисбен',
              zh: '布里斯班港',
              ar: 'ميناء بريسبان',
            },
            AUFRE: {
              en: 'Port of Fremantle',
              fr: 'Port de Fremantle',
              de: 'Hafen Fremantle',
              es: 'Puerto de Fremantle',
              it: 'Porto di Fremantle',
              nl: 'Haven van Fremantle',
              pt: 'Porto de Fremantle',
              tr: 'Fremantle Limanı',
              ru: 'Порт Фримантл',
              zh: '弗里曼特尔港',
              ar: 'ميناء فريمانتل',
            },
            AUSYD_AIR: {
              en: 'Sydney Kingsford Smith Airport',
              fr: 'Aéroport de Sydney Kingsford Smith',
              de: 'Flughafen Sydney Kingsford Smith',
              es: 'Aeropuerto de Sídney Kingsford Smith',
              it: 'Aeroporto di Sydney Kingsford Smith',
              nl: 'Luchthaven Sydney Kingsford Smith',
              pt: 'Aeroporto de Sydney Kingsford Smith',
              tr: 'Sidney Kingsford Smith Havaalanı',
              ru: 'Аэропорт Сидней Кингсфорд Смит',
              zh: '悉尼金斯福德·史密斯机场',
              ar: 'مطار سيدني كينجسفورد سميث',
            },
            AUMEL_AIR: {
              en: 'Melbourne Airport',
              fr: 'Aéroport de Melbourne',
              de: 'Flughafen Melbourne',
              es: 'Aeropuerto de Melbourne',
              it: 'Aeroporto di Melbourne',
              nl: 'Luchthaven Melbourne',
              pt: 'Aeroporto de Melbourne',
              tr: 'Melbourne Havaalanı',
              ru: 'Аэропорт Мельбурн',
              zh: '墨尔本机场',
              ar: 'مطار ملبورن',
            },
            AUBNE_AIR: {
              en: 'Brisbane Airport',
              fr: 'Aéroport de Brisbane',
              de: 'Flughafen Brisbane',
              es: 'Aeropuerto de Brisbane',
              it: 'Aeroporto di Brisbane',
              nl: 'Luchthaven Brisbane',
              pt: 'Aeroporto de Brisbane',
              tr: 'Brisbane Havaalanı',
              ru: 'Аэропорт Брисбен',
              zh: '布里斯班机场',
              ar: 'مطار بريسبان',
            },
            AUPER_AIR: {
              en: 'Perth Airport',
              fr: 'Aéroport de Perth',
              de: 'Flughafen Perth',
              es: 'Aeropuerto de Perth',
              it: 'Aeroporto di Perth',
              nl: 'Luchthaven Perth',
              pt: 'Aeroporto de Perth',
              tr: 'Perth Havaalanı',
              ru: 'Аэропорт Перт',
              zh: '珀斯机场',
              ar: 'مطار بيرث',
            },
            ARBUE: {
              en: 'Port of Buenos Aires',
              fr: 'Port de Buenos Aires',
              de: 'Hafen Buenos Aires',
              es: 'Puerto de Buenos Aires',
              it: 'Porto di Buenos Aires',
              nl: 'Haven van Buenos Aires',
              pt: 'Porto de Buenos Aires',
              tr: 'Buenos Aires Limanı',
              ru: 'Порт Буэнос-Айрес',
              zh: '布宜诺斯艾利斯港',
              ar: 'ميناء بوينس آيرس',
            },
            AREZE: {
              en: 'Ezeiza International Airport',
              fr: "Aéroport international d'Ezeiza",
              de: 'Internationaler Flughafen Ezeiza',
              es: 'Aeropuerto Internacional de Ezeiza',
              it: 'Aeroporto Internazionale di Ezeiza',
              nl: 'Internationale Luchthaven Ezeiza',
              pt: 'Aeroporto Internacional de Ezeiza',
              tr: 'Ezeiza Uluslararası Havaalanı',
              ru: 'Международный аэропорт Эсейса',
              zh: '埃塞萨国际机场',
              ar: 'مطار إيزيزا الدولي',
            },
            ATVIE: {
              en: 'Vienna International Airport',
              fr: 'Aéroport international de Vienne',
              de: 'Flughafen Wien-Schwechat',
              es: 'Aeropuerto Internacional de Viena',
              it: 'Aeroporto Internazionale di Vienna',
              nl: 'Internationale Luchthaven Wenen',
              pt: 'Aeroporto Internacional de Viena',
              tr: 'Viyana Uluslararası Havaalanı',
              ru: 'Международный аэропорт Вена',
              zh: '维也纳国际机场',
              ar: 'مطار فيينا الدولي',
            },
            ATVIE_RAIL: {
              en: 'Vienna Central Station',
              fr: 'Gare centrale de Vienne',
              de: 'Wien Hauptbahnhof',
              es: 'Estación Central de Viena',
              it: 'Stazione Centrale di Vienna',
              nl: 'Centraal Station Wenen',
              pt: 'Estação Central de Viena',
              tr: 'Viyana Merkez İstasyonu',
              ru: 'Центральный вокзал Вены',
              zh: '维也纳中央火车站',
              ar: 'محطة فيينا المركزية',
            },
            AOLAD: {
              en: 'Port of Luanda',
              fr: 'Port de Luanda',
              de: 'Hafen Luanda',
              es: 'Puerto de Luanda',
              it: 'Porto di Luanda',
              nl: 'Haven van Luanda',
              pt: 'Porto de Luanda',
              tr: 'Luanda Limanı',
              ru: 'Порт Луанда',
              zh: '罗安达港',
              ar: 'ميناء لواندا',
            },
            AOLOS: {
              en: 'Port of Lobito',
              fr: 'Port de Lobito',
              de: 'Hafen Lobito',
              es: 'Puerto de Lobito',
              it: 'Porto di Lobito',
              nl: 'Haven van Lobito',
              pt: 'Porto do Lobito',
              tr: 'Lobito Limanı',
              ru: 'Порт Лобито',
              zh: '洛比托港',
              ar: 'ميناء لوبيتو',
            },
            AOLAD_AIR: {
              en: 'Luanda Quatro de Fevereiro Airport',
              fr: 'Aéroport de Luanda Quatro de Fevereiro',
              de: 'Flughafen Luanda Quatro de Fevereiro',
              es: 'Aeropuerto de Luanda Quatro de Fevereiro',
              it: 'Aeroporto di Luanda Quatro de Fevereiro',
              nl: 'Luchthaven Luanda Quatro de Fevereiro',
              pt: 'Aeroporto de Luanda Quatro de Fevereiro',
              tr: 'Luanda Quatro de Fevereiro Havaalanı',
              ru: 'Аэропорт Луанда Куатро-де-Февереиру',
              zh: '罗安达二月四日机场',
              ar: 'مطار لواندا كواترو دي فيفيريرو',
            },
            AOLAD_RAIL: {
              en: 'Luanda Railway Station',
              fr: 'Gare ferroviaire de Luanda',
              de: 'Bahnhof Luanda',
              es: 'Estación de Ferrocarril de Luanda',
              it: 'Stazione Ferroviaria di Luanda',
              nl: 'Treinstation Luanda',
              pt: 'Estação Ferroviária de Luanda',
              tr: 'Luanda Tren İstasyonu',
              ru: 'Железнодорожная станция Луанда',
              zh: '罗安达火车站',
              ar: 'محطة لواندا للسكك الحديدية',
            },
            BEANR: {
              en: 'Port of Antwerp',
              fr: "Port d'Anvers",
              de: 'Hafen Antwerpen',
              es: 'Puerto de Amberes',
              it: 'Porto di Anversa',
              nl: 'Haven van Antwerpen',
              pt: 'Porto de Antuérpia',
              tr: 'Anvers Limanı',
              ru: 'Порт Антверпен',
              zh: '安特卫普港',
              ar: 'ميناء أنتويرب',
            },
            BEZEE: {
              en: 'Port of Zeebrugge',
              fr: 'Port de Zeebruges',
              de: 'Hafen Zeebrügge',
              es: 'Puerto de Zeebrugge',
              it: 'Porto di Zeebrugge',
              nl: 'Haven van Zeebrugge',
              pt: 'Porto de Zeebrugge',
              tr: 'Zeebrugge Limanı',
              ru: 'Порт Зебрюгге',
              zh: '泽布吕赫港',
              ar: 'ميناء زيبروج',
            },
            BEBRU: {
              en: 'Brussels Airport',
              fr: 'Aéroport de Bruxelles',
              de: 'Flughafen Brüssel',
              es: 'Aeropuerto de Bruselas',
              it: 'Aeroporto di Bruxelles',
              nl: 'Luchthaven Brussel',
              pt: 'Aeroporto de Bruxelas',
              tr: 'Brüksel Havaalanı',
              ru: 'Аэропорт Брюссель',
              zh: '布鲁塞尔机场',
              ar: 'مطار بروكسل',
            },
            BELIE: {
              en: 'Liège Airport',
              fr: 'Aéroport de Liège',
              de: 'Flughafen Lüttich',
              es: 'Aeropuerto de Lieja',
              it: 'Aeroporto di Liegi',
              nl: 'Luchthaven Luik',
              pt: 'Aeroporto de Liège',
              tr: 'Liège Havaalanı',
              ru: 'Аэропорт Льеж',
              zh: '列日机场',
              ar: 'مطار لييج',
            },
            BEBRU_RAIL: {
              en: 'Brussels Central Station',
              fr: 'Gare centrale de Bruxelles',
              de: 'Brüssel-Zentral',
              es: 'Estación Central de Bruselas',
              it: 'Stazione Centrale di Bruxelles',
              nl: 'Brussel-Centraal',
              pt: 'Estação Central de Bruxelas',
              tr: 'Brüksel Merkez İstasyonu',
              ru: 'Центральный вокзал Брюсселя',
              zh: '布鲁塞尔中央车站',
              ar: 'محطة بروكسل المركزية',
            },
            BEANR_RAIL: {
              en: 'Antwerp Central Station',
              fr: "Gare centrale d'Anvers",
              de: 'Antwerpen-Zentral',
              es: 'Estación Central de Amberes',
              it: 'Stazione Centrale di Anversa',
              nl: 'Antwerpen-Centraal',
              pt: 'Estação Central de Antuérpia',
              tr: 'Anvers Merkez İstasyonu',
              ru: 'Центральный вокзал Антверпена',
              zh: '安特卫普中央车站',
              ar: 'محطة أنتويرب المركزية',
            },
            BRSFS: {
              en: 'Port of Santos',
              fr: 'Port de Santos',
              de: 'Hafen Santos',
              es: 'Puerto de Santos',
              it: 'Porto di Santos',
              nl: 'Haven van Santos',
              pt: 'Porto de Santos',
              tr: 'Santos Limanı',
              ru: 'Порт Сантос',
              zh: '桑托斯港',
              ar: 'ميناء سانتوس',
            },
            BRRIO: {
              en: 'Port of Rio de Janeiro',
              fr: 'Port de Rio de Janeiro',
              de: 'Hafen Rio de Janeiro',
              es: 'Puerto de Río de Janeiro',
              it: 'Porto di Rio de Janeiro',
              nl: 'Haven van Rio de Janeiro',
              pt: 'Porto do Rio de Janeiro',
              tr: 'Rio de Janeiro Limanı',
              ru: 'Порт Рио-де-Жанейро',
              zh: '里约热内卢港',
              ar: 'ميناء ريو دي جانيرو',
            },
            BRPAR: {
              en: 'Port of Paranaguá',
              fr: 'Port de Paranaguá',
              de: 'Hafen Paranaguá',
              es: 'Puerto de Paranaguá',
              it: 'Porto di Paranaguá',
              nl: 'Haven van Paranaguá',
              pt: 'Porto de Paranaguá',
              tr: 'Paranaguá Limanı',
              ru: 'Порт Паранагуа',
              zh: '巴拉那瓜港',
              ar: 'ميناء باراناغوا',
            },
            BRGRU: {
              en: 'São Paulo Guarulhos International Airport',
              fr: 'Aéroport international de São Paulo Guarulhos',
              de: 'Internationaler Flughafen São Paulo Guarulhos',
              es: 'Aeropuerto Internacional de São Paulo Guarulhos',
              it: 'Aeroporto Internazionale di São Paulo Guarulhos',
              nl: 'Internationale Luchthaven São Paulo Guarulhos',
              pt: 'Aeroporto Internacional de São Paulo Guarulhos',
              tr: 'São Paulo Guarulhos Uluslararası Havaalanı',
              ru: 'Международный аэропорт Сан-Паулу Гуарульос',
              zh: '圣保罗瓜鲁柳斯国际机场',
              ar: 'مطار ساو باولو غواروليوس الدولي',
            },
            BRRIO_AIR: {
              en: 'Rio de Janeiro Galeão International Airport',
              fr: 'Aéroport international de Rio de Janeiro Galeão',
              de: 'Internationaler Flughafen Rio de Janeiro Galeão',
              es: 'Aeropuerto Internacional de Río de Janeiro Galeão',
              it: 'Aeroporto Internazionale di Rio de Janeiro Galeão',
              nl: 'Internationale Luchthaven Rio de Janeiro Galeão',
              pt: 'Aeroporto Internacional do Rio de Janeiro Galeão',
              tr: 'Rio de Janeiro Galeão Uluslararası Havaalanı',
              ru: 'Международный аэропорт Рио-де-Жанейро Галеао',
              zh: '里约热内卢加利昂国际机场',
              ar: 'مطار ريو دي جانيرو غالياو الدولي',
            },
            BRBSB: {
              en: 'Brasília International Airport',
              fr: 'Aéroport international de Brasília',
              de: 'Internationaler Flughafen Brasília',
              es: 'Aeropuerto Internacional de Brasilia',
              it: 'Aeroporto Internazionale di Brasília',
              nl: 'Internationale Luchthaven Brasília',
              pt: 'Aeroporto Internacional de Brasília',
              tr: 'Brasília Uluslararası Havaalanı',
              ru: 'Международный аэропорт Бразилиа',
              zh: '巴西利亚国际机场',
              ar: 'مطار برازيليا الدولي',
            },
            BDCGP: {
              en: 'Port of Chittagong',
              fr: 'Port de Chittagong',
              de: 'Hafen Chittagong',
              es: 'Puerto de Chittagong',
              it: 'Porto di Chittagong',
              nl: 'Haven van Chittagong',
              pt: 'Porto de Chittagong',
              tr: 'Chittagong Limanı',
              ru: 'Порт Читтагонг',
              zh: '吉大港港',
              ar: 'ميناء شيتاغونغ',
            },
            BDDHA: {
              en: 'Port of Dhaka',
              fr: 'Port de Dhaka',
              de: 'Hafen Dhaka',
              es: 'Puerto de Daca',
              it: 'Porto di Dhaka',
              nl: 'Haven van Dhaka',
              pt: 'Porto de Dhaka',
              tr: 'Dakka Limanı',
              ru: 'Порт Дакка',
              zh: '达卡港',
              ar: 'ميناء دكا',
            },
            BDMGL: {
              en: 'Port of Mongla',
              fr: 'Port de Mongla',
              de: 'Hafen Mongla',
              es: 'Puerto de Mongla',
              it: 'Porto di Mongla',
              nl: 'Haven van Mongla',
              pt: 'Porto de Mongla',
              tr: 'Mongla Limanı',
              ru: 'Порт Монгла',
              zh: '蒙格拉港',
              ar: 'ميناء مونغلا',
            },
            BDDAC: {
              en: 'Dhaka Hazrat Shahjalal International Airport',
              fr: 'Aéroport international de Dhaka Hazrat Shahjalal',
              de: 'Internationaler Flughafen Dhaka Hazrat Shahjalal',
              es: 'Aeropuerto Internacional de Daca Hazrat Shahjalal',
              it: 'Aeroporto Internazionale di Dhaka Hazrat Shahjalal',
              nl: 'Internationale Luchthaven Dhaka Hazrat Shahjalal',
              pt: 'Aeroporto Internacional de Dhaka Hazrat Shahjalal',
              tr: 'Dakka Hazrat Shahjalal Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дакка Хазрат Шахджалал',
              zh: '达卡哈兹拉特·沙贾拉勒国际机场',
              ar: 'مطار دكا حضرة شاه جلال الدولي',
            },
            BDCGP_AIR: {
              en: 'Chittagong Shah Amanat International Airport',
              fr: 'Aéroport international de Chittagong Shah Amanat',
              de: 'Internationaler Flughafen Chittagong Shah Amanat',
              es: 'Aeropuerto Internacional de Chittagong Shah Amanat',
              it: 'Aeroporto Internazionale di Chittagong Shah Amanat',
              nl: 'Internationale Luchthaven Chittagong Shah Amanat',
              pt: 'Aeroporto Internacional de Chittagong Shah Amanat',
              tr: 'Chittagong Shah Amanat Uluslararası Havaalanı',
              ru: 'Международный аэропорт Читтагонг Шах Аманат',
              zh: '吉大港沙阿马纳特国际机场',
              ar: 'مطار شيتاغونغ شاه أمانات الدولي',
            },
            BDDHA_RAIL: {
              en: 'Dhaka Railway Station',
              fr: 'Gare ferroviaire de Dhaka',
              de: 'Bahnhof Dhaka',
              es: 'Estación de Ferrocarril de Daca',
              it: 'Stazione Ferroviaria di Dhaka',
              nl: 'Treinstation Dhaka',
              pt: 'Estação Ferroviária de Dhaka',
              tr: 'Dakka Tren İstasyonu',
              ru: 'Железнодорожная станция Дакка',
              zh: '达卡火车站',
              ar: 'محطة دكا للسكك الحديدية',
            },
            BDCGP_RAIL: {
              en: 'Chittagong Railway Station',
              fr: 'Gare ferroviaire de Chittagong',
              de: 'Bahnhof Chittagong',
              es: 'Estación de Ferrocarril de Chittagong',
              it: 'Stazione Ferroviaria di Chittagong',
              nl: 'Treinstation Chittagong',
              pt: 'Estação Ferroviária de Chittagong',
              tr: 'Chittagong Tren İstasyonu',
              ru: 'Железнодорожная станция Читтагонг',
              zh: '吉大港火车站',
              ar: 'محطة شيتاغونغ للسكك الحديدية',
            },
            BGBOJ: {
              en: 'Port of Bourgas',
              fr: 'Port de Bourgas',
              de: 'Hafen Burgas',
              es: 'Puerto de Burgas',
              it: 'Porto di Burgas',
              nl: 'Haven van Burgas',
              pt: 'Porto de Burgas',
              tr: 'Burgas Limanı',
              ru: 'Порт Бургас',
              zh: '布尔加斯港',
              ar: 'ميناء بورغاس',
            },
            BGVAR_AIR: {
              en: 'Varna Airport',
              fr: 'Aéroport de Varna',
              de: 'Flughafen Warna',
              es: 'Aeropuerto de Varna',
              it: 'Aeroporto di Varna',
              nl: 'Luchthaven Varna',
              pt: 'Aeroporto de Varna',
              tr: 'Varna Havaalanı',
              ru: 'Аэропорт Варна',
              zh: '瓦尔纳机场',
              ar: 'مطار فارنا',
            },
            BGSOF_RAIL: {
              en: 'Sofia Central Station',
              fr: 'Gare centrale de Sofia',
              de: 'Sofia Hauptbahnhof',
              es: 'Estación Central de Sofía',
              it: 'Stazione Centrale di Sofia',
              nl: 'Centraal Station Sofia',
              pt: 'Estação Central de Sofia',
              tr: 'Sofya Merkez İstasyonu',
              ru: 'Центральный вокзал Софии',
              zh: '索菲亚中央车站',
              ar: 'محطة صوفيا المركزية',
            },
            CAVAN: {
              en: 'Port of Vancouver',
              fr: 'Port de Vancouver',
              de: 'Hafen Vancouver',
              es: 'Puerto de Vancouver',
              it: 'Porto di Vancouver',
              nl: 'Haven van Vancouver',
              pt: 'Porto de Vancouver',
              tr: 'Vancouver Limanı',
              ru: 'Порт Ванкувер',
              zh: '温哥华港',
              ar: 'ميناء فانكوفر',
            },
            CAMON: {
              en: 'Port of Montreal',
              fr: 'Port de Montréal',
              de: 'Hafen Montreal',
              es: 'Puerto de Montreal',
              it: 'Porto di Montreal',
              nl: 'Haven van Montreal',
              pt: 'Porto de Montreal',
              tr: 'Montreal Limanı',
              ru: 'Порт Монреаль',
              zh: '蒙特利尔港',
              ar: 'ميناء مونتريال',
            },
            CAHAL: {
              en: 'Port of Halifax',
              fr: 'Port de Halifax',
              de: 'Hafen Halifax',
              es: 'Puerto de Halifax',
              it: 'Porto di Halifax',
              nl: 'Haven van Halifax',
              pt: 'Porto de Halifax',
              tr: 'Halifax Limanı',
              ru: 'Порт Галифакс',
              zh: '哈利法克斯港',
              ar: 'ميناء هاليفاكس',
            },
            CAYVR: {
              en: 'Vancouver International Airport',
              fr: 'Aéroport international de Vancouver',
              de: 'Internationaler Flughafen Vancouver',
              es: 'Aeropuerto Internacional de Vancouver',
              it: 'Aeroporto Internazionale di Vancouver',
              nl: 'Internationale Luchthaven Vancouver',
              pt: 'Aeroporto Internacional de Vancouver',
              tr: 'Vancouver Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ванкувер',
              zh: '温哥华国际机场',
              ar: 'مطار فانكوفر الدولي',
            },
            CAYYZ: {
              en: 'Toronto Pearson International Airport',
              fr: 'Aéroport international de Toronto Pearson',
              de: 'Internationaler Flughafen Toronto Pearson',
              es: 'Aeropuerto Internacional de Toronto Pearson',
              it: 'Aeroporto Internazionale di Toronto Pearson',
              nl: 'Internationale Luchthaven Toronto Pearson',
              pt: 'Aeroporto Internacional de Toronto Pearson',
              tr: 'Toronto Pearson Uluslararası Havaalanı',
              ru: 'Международный аэропорт Торонто Пирсон',
              zh: '多伦多皮尔逊国际机场',
              ar: 'مطار تورونتو بيرسون الدولي',
            },
            CAYMQ: {
              en: 'Montreal Pierre Elliott Trudeau International Airport',
              fr: 'Aéroport international de Montréal Pierre Elliott Trudeau',
              de: 'Internationaler Flughafen Montreal Pierre Elliott Trudeau',
              es: 'Aeropuerto Internacional de Montreal Pierre Elliott Trudeau',
              it: 'Aeroporto Internazionale di Montreal Pierre Elliott Trudeau',
              nl: 'Internationale Luchthaven Montreal Pierre Elliott Trudeau',
              pt: 'Aeroporto Internacional de Montreal Pierre Elliott Trudeau',
              tr: 'Montreal Pierre Elliott Trudeau Uluslararası Havaalanı',
              ru: 'Международный аэропорт Монреаль Пьер Эллиот Трюдо',
              zh: '蒙特利尔皮埃尔·埃利奥特·特鲁多国际机场',
              ar: 'مطار مونتريال بيير إليوت ترودو الدولي',
            },
            CAYYC: {
              en: 'Calgary International Airport',
              fr: 'Aéroport international de Calgary',
              de: 'Internationaler Flughafen Calgary',
              es: 'Aeropuerto Internacional de Calgary',
              it: 'Aeroporto Internazionale di Calgary',
              nl: 'Internationale Luchthaven Calgary',
              pt: 'Aeroporto Internacional de Calgary',
              tr: 'Calgary Uluslararası Havaalanı',
              ru: 'Международный аэропорт Калгари',
              zh: '卡尔加里国际机场',
              ar: 'مطار كالغاري الدولي',
            },
            CAVAN_RAIL: {
              en: 'Vancouver Pacific Central Station',
              fr: 'Gare centrale du Pacifique de Vancouver',
              de: 'Vancouver Pacific Central Bahnhof',
              es: 'Estación Central del Pacífico de Vancouver',
              it: 'Stazione Centrale del Pacifico di Vancouver',
              nl: 'Vancouver Pacific Centraal Station',
              pt: 'Estação Central do Pacífico de Vancouver',
              tr: 'Vancouver Pasifik Merkez İstasyonu',
              ru: 'Центральная тихоокеанская станция Ванкувера',
              zh: '温哥华太平洋中央车站',
              ar: 'محطة فانكوفر المركزية للمحيط الهادئ',
            },
            CATOR_RAIL: {
              en: 'Toronto Union Station',
              fr: 'Gare Union de Toronto',
              de: 'Toronto Union Station',
              es: 'Estación Union de Toronto',
              it: 'Stazione Union di Toronto',
              nl: 'Toronto Union Station',
              pt: 'Estação Union de Toronto',
              tr: 'Toronto Union İstasyonu',
              ru: 'Юнион Стейшн Торонто',
              zh: '多伦多联合车站',
              ar: 'محطة تورونتو يونيون',
            },
            CNSHA: {
              en: 'Port of Shanghai',
              fr: 'Port de Shanghai',
              de: 'Hafen Shanghai',
              es: 'Puerto de Shanghái',
              it: 'Porto di Shanghai',
              nl: 'Haven van Shanghai',
              pt: 'Porto de Xangai',
              tr: 'Şanghay Limanı',
              ru: 'Порт Шанхай',
              zh: '上海港',
              ar: 'ميناء شنغهاي',
            },
            CNSZX: {
              en: 'Port of Shenzhen',
              fr: 'Port de Shenzhen',
              de: 'Hafen Shenzhen',
              es: 'Puerto de Shenzhen',
              it: 'Porto di Shenzhen',
              nl: 'Haven van Shenzhen',
              pt: 'Porto de Shenzhen',
              tr: 'Shenzhen Limanı',
              ru: 'Порт Шэньчжэнь',
              zh: '深圳港',
              ar: 'ميناء شنتشن',
            },
            CNNGB: {
              en: 'Port of Ningbo-Zhoushan',
              fr: 'Port de Ningbo-Zhoushan',
              de: 'Hafen Ningbo-Zhoushan',
              es: 'Puerto de Ningbo-Zhoushan',
              it: 'Porto di Ningbo-Zhoushan',
              nl: 'Haven van Ningbo-Zhoushan',
              pt: 'Porto de Ningbo-Zhoushan',
              tr: 'Ningbo-Zhoushan Limanı',
              ru: 'Порт Нинбо-Чжоушань',
              zh: '宁波舟山港',
              ar: 'ميناء نينغبو-تشوشان',
            },
            CNQIN: {
              en: 'Port of Qingdao',
              fr: 'Port de Qingdao',
              de: 'Hafen Qingdao',
              es: 'Puerto de Qingdao',
              it: 'Porto di Qingdao',
              nl: 'Haven van Qingdao',
              pt: 'Porto de Qingdao',
              tr: 'Qingdao Limanı',
              ru: 'Порт Циндао',
              zh: '青岛港',
              ar: 'ميناء تشينغداو',
            },
            CNGUA: {
              en: 'Port of Guangzhou',
              fr: 'Port de Guangzhou',
              de: 'Hafen Guangzhou',
              es: 'Puerto de Guangzhou',
              it: 'Porto di Guangzhou',
              nl: 'Haven van Guangzhou',
              pt: 'Porto de Guangzhou',
              tr: 'Guangzhou Limanı',
              ru: 'Порт Гуанчжоу',
              zh: '广州港',
              ar: 'ميناء غوانغتشو',
            },
            CNTIA: {
              en: 'Port of Tianjin',
              fr: 'Port de Tianjin',
              de: 'Hafen Tianjin',
              es: 'Puerto de Tianjin',
              it: 'Porto di Tianjin',
              nl: 'Haven van Tianjin',
              pt: 'Porto de Tianjin',
              tr: 'Tianjin Limanı',
              ru: 'Порт Тяньцзинь',
              zh: '天津港',
              ar: 'ميناء تيانجين',
            },
            CNPVG: {
              en: 'Shanghai Pudong International Airport',
              fr: 'Aéroport international de Shanghai Pudong',
              de: 'Internationaler Flughafen Shanghai Pudong',
              es: 'Aeropuerto Internacional de Shanghái Pudong',
              it: 'Aeroporto Internazionale di Shanghai Pudong',
              nl: 'Internationale Luchthaven Shanghai Pudong',
              pt: 'Aeroporto Internacional de Xangai Pudong',
              tr: 'Şanghay Pudong Uluslararası Havaalanı',
              ru: 'Международный аэропорт Шанхай Пудун',
              zh: '上海浦东国际机场',
              ar: 'مطار شنغهاي بودونغ الدولي',
            },
            CNPEK: {
              en: 'Beijing Capital International Airport',
              fr: 'Aéroport international de Pékin Capital',
              de: 'Internationaler Flughafen Peking Capital',
              es: 'Aeropuerto Internacional de Pekín Capital',
              it: 'Aeroporto Internazionale di Pechino Capital',
              nl: 'Internationale Luchthaven Beijing Capital',
              pt: 'Aeroporto Internacional de Pequim Capital',
              tr: 'Pekin Capital Uluslararası Havaalanı',
              ru: 'Международный аэропорт Пекин Столичный',
              zh: '北京首都国际机场',
              ar: 'مطار بكين العاصمة الدولي',
            },
            CNCAN: {
              en: 'Guangzhou Baiyun International Airport',
              fr: 'Aéroport international de Guangzhou Baiyun',
              de: 'Internationaler Flughafen Guangzhou Baiyun',
              es: 'Aeropuerto Internacional de Guangzhou Baiyun',
              it: 'Aeroporto Internazionale di Guangzhou Baiyun',
              nl: 'Internationale Luchthaven Guangzhou Baiyun',
              pt: 'Aeroporto Internacional de Guangzhou Baiyun',
              tr: 'Guangzhou Baiyun Uluslararası Havaalanı',
              ru: 'Международный аэропорт Гуанчжоу Байюнь',
              zh: '广州白云国际机场',
              ar: 'مطار غوانغتشو بايون الدولي',
            },
            CNSZX_AIR: {
              en: "Shenzhen Bao'an International Airport",
              fr: "Aéroport international de Shenzhen Bao'an",
              de: "Internationaler Flughafen Shenzhen Bao'an",
              es: "Aeropuerto Internacional de Shenzhen Bao'an",
              it: "Aeroporto Internazionale di Shenzhen Bao'an",
              nl: "Internationale Luchthaven Shenzhen Bao'an",
              pt: "Aeroporto Internacional de Shenzhen Bao'an",
              tr: "Shenzhen Bao'an Uluslararası Havaalanı",
              ru: 'Международный аэропорт Шэньчжэнь Баоань',
              zh: '深圳宝安国际机场',
              ar: 'مطار شنتشن باوآن الدولي',
            },
            CNHGH: {
              en: 'Hangzhou Xiaoshan International Airport',
              fr: 'Aéroport international de Hangzhou Xiaoshan',
              de: 'Internationaler Flughafen Hangzhou Xiaoshan',
              es: 'Aeropuerto Internacional de Hangzhou Xiaoshan',
              it: 'Aeroporto Internazionale di Hangzhou Xiaoshan',
              nl: 'Internationale Luchthaven Hangzhou Xiaoshan',
              pt: 'Aeroporto Internacional de Hangzhou Xiaoshan',
              tr: 'Hangzhou Xiaoshan Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ханчжоу Сяошань',
              zh: '杭州萧山国际机场',
              ar: 'مطار هانغتشو شياوشان الدولي',
            },
            CNBEI_RAIL: {
              en: 'Beijing Railway Station',
              fr: 'Gare ferroviaire de Pékin',
              de: 'Bahnhof Peking',
              es: 'Estación de Ferrocarril de Pekín',
              it: 'Stazione Ferroviaria di Pechino',
              nl: 'Treinstation Beijing',
              pt: 'Estação Ferroviária de Pequim',
              tr: 'Pekin Tren İstasyonu',
              ru: 'Железнодорожная станция Пекин',
              zh: '北京火车站',
              ar: 'محطة بكين للسكك الحديدية',
            },
            CNSHA_RAIL: {
              en: 'Shanghai Railway Station',
              fr: 'Gare ferroviaire de Shanghai',
              de: 'Bahnhof Shanghai',
              es: 'Estación de Ferrocarril de Shanghái',
              it: 'Stazione Ferroviaria di Shanghai',
              nl: 'Treinstation Shanghai',
              pt: 'Estação Ferroviária de Xangai',
              tr: 'Şanghay Tren İstasyonu',
              ru: 'Железнодорожная станция Шанхай',
              zh: '上海火车站',
              ar: 'محطة شنغهاي للسكك الحديدية',
            },
            CNGUA_RAIL: {
              en: 'Guangzhou Railway Station',
              fr: 'Gare ferroviaire de Guangzhou',
              de: 'Bahnhof Guangzhou',
              es: 'Estación de Ferrocarril de Guangzhou',
              it: 'Stazione Ferroviaria di Guangzhou',
              nl: 'Treinstation Guangzhou',
              pt: 'Estação Ferroviária de Guangzhou',
              tr: 'Guangzhou Tren İstasyonu',
              ru: 'Железнодорожная станция Гуанчжоу',
              zh: '广州火车站',
              ar: 'محطة غوانغتشو للسكك الحديدية',
            },
            CLVAP: {
              en: 'Port of Valparaíso',
              fr: 'Port de Valparaíso',
              de: 'Hafen Valparaíso',
              es: 'Puerto de Valparaíso',
              it: 'Porto di Valparaíso',
              nl: 'Haven van Valparaíso',
              pt: 'Porto de Valparaíso',
              tr: 'Valparaíso Limanı',
              ru: 'Порт Вальпараисо',
              zh: '瓦尔帕莱索港',
              ar: 'ميناء فالبارايسو',
            },
            CLSAI: {
              en: 'Port of San Antonio',
              fr: 'Port de San Antonio',
              de: 'Hafen San Antonio',
              es: 'Puerto de San Antonio',
              it: 'Porto di San Antonio',
              nl: 'Haven van San Antonio',
              pt: 'Porto de San Antonio',
              tr: 'San Antonio Limanı',
              ru: 'Порт Сан-Антонио',
              zh: '圣安东尼奥港',
              ar: 'ميناء سان أنطونيو',
            },
            CLSCL: {
              en: 'Santiago International Airport',
              fr: 'Aéroport international de Santiago',
              de: 'Internationaler Flughafen Santiago',
              es: 'Aeropuerto Internacional de Santiago',
              it: 'Aeroporto Internazionale di Santiago',
              nl: 'Internationale Luchthaven Santiago',
              pt: 'Aeroporto Internacional de Santiago',
              tr: 'Santiago Uluslararası Havaalanı',
              ru: 'Международный аэропорт Сантьяго',
              zh: '圣地亚哥国际机场',
              ar: 'مطار سانتياغو الدولي',
            },
            COCTG: {
              en: 'Port of Cartagena',
              fr: 'Port de Cartagena',
              de: 'Hafen Cartagena',
              es: 'Puerto de Cartagena',
              it: 'Porto di Cartagena',
              nl: 'Haven van Cartagena',
              pt: 'Porto de Cartagena',
              tr: 'Cartagena Limanı',
              ru: 'Порт Картахена',
              zh: '卡塔赫纳港',
              ar: 'ميناء قرطاجنة',
            },
            COBAR: {
              en: 'Port of Barranquilla',
              fr: 'Port de Barranquilla',
              de: 'Hafen Barranquilla',
              es: 'Puerto de Barranquilla',
              it: 'Porto di Barranquilla',
              nl: 'Haven van Barranquilla',
              pt: 'Porto de Barranquilla',
              tr: 'Barranquilla Limanı',
              ru: 'Порт Барранкилья',
              zh: '巴兰基亚港',
              ar: 'ميناء بارانكيا',
            },
            COBOG: {
              en: 'Bogotá El Dorado International Airport',
              fr: 'Aéroport international de Bogotá El Dorado',
              de: 'Internationaler Flughafen Bogotá El Dorado',
              es: 'Aeropuerto Internacional de Bogotá El Dorado',
              it: 'Aeroporto Internazionale di Bogotá El Dorado',
              nl: 'Internationale Luchthaven Bogotá El Dorado',
              pt: 'Aeroporto Internacional de Bogotá El Dorado',
              tr: 'Bogotá El Dorado Uluslararası Havaalanı',
              ru: 'Международный аэропорт Богота Эль-Дорадо',
              zh: '波哥大埃尔多拉多国际机场',
              ar: 'مطار بوغوتا إل دورادو الدولي',
            },
            CZPRG: {
              en: 'Prague Václav Havel Airport',
              fr: 'Aéroport de Prague Václav Havel',
              de: 'Flughafen Prag Václav Havel',
              es: 'Aeropuerto de Praga Václav Havel',
              it: 'Aeroporto di Praga Václav Havel',
              nl: 'Luchthaven Praag Václav Havel',
              pt: 'Aeroporto de Praga Václav Havel',
              tr: 'Prag Václav Havel Havaalanı',
              ru: 'Аэропорт Прага Вацлав Гавел',
              zh: '布拉格瓦茨拉夫·哈维尔机场',
              ar: 'مطار براغ فاتسلاف هافيل',
            },
            CZPRG_RAIL: {
              en: 'Prague Central Station',
              fr: 'Gare centrale de Prague',
              de: 'Prag Hauptbahnhof',
              es: 'Estación Central de Praga',
              it: 'Stazione Centrale di Praga',
              nl: 'Centraal Station Praag',
              pt: 'Estação Central de Praga',
              tr: 'Prag Merkez İstasyonu',
              ru: 'Центральный вокзал Праги',
              zh: '布拉格中央车站',
              ar: 'محطة براغ المركزية',
            },
            CHZUR: {
              en: 'Zurich Airport',
              fr: 'Aéroport de Zürich',
              de: 'Flughafen Zürich',
              es: 'Aeropuerto de Zúrich',
              it: 'Aeroporto di Zurigo',
              nl: 'Luchthaven Zürich',
              pt: 'Aeroporto de Zurique',
              tr: 'Zürih Havaalanı',
              ru: 'Аэропорт Цюрих',
              zh: '苏黎世机场',
              ar: 'مطار زيورخ',
            },
            CHGVA: {
              en: 'Geneva Airport',
              fr: 'Aéroport de Genève',
              de: 'Flughafen Genf',
              es: 'Aeropuerto de Ginebra',
              it: 'Aeroporto di Ginevra',
              nl: 'Luchthaven Genève',
              pt: 'Aeroporto de Genebra',
              tr: 'Cenevre Havaalanı',
              ru: 'Аэропорт Женева',
              zh: '日内瓦机场',
              ar: 'مطار جنيف',
            },
            CHZUR_RAIL: {
              en: 'Zurich Central Station',
              fr: 'Gare centrale de Zürich',
              de: 'Zürich Hauptbahnhof',
              es: 'Estación Central de Zúrich',
              it: 'Stazione Centrale di Zurigo',
              nl: 'Centraal Station Zürich',
              pt: 'Estação Central de Zurique',
              tr: 'Zürih Merkez İstasyonu',
              ru: 'Центральный вокзал Цюриха',
              zh: '苏黎世中央车站',
              ar: 'محطة زيورخ المركزية',
            },
            CHGVA_RAIL: {
              en: 'Geneva Cornavin Station',
              fr: 'Gare de Genève-Cornavin',
              de: 'Bahnhof Genf Cornavin',
              es: 'Estación de Ginebra Cornavin',
              it: 'Stazione di Ginevra Cornavin',
              nl: 'Station Genève-Cornavin',
              pt: 'Estação de Genebra Cornavin',
              tr: 'Cenevre Cornavin İstasyonu',
              ru: 'Вокзал Женева Корнавен',
              zh: '日内瓦科尔纳万车站',
              ar: 'محطة جنيف كورنافين',
            },
            CIABJ: {
              en: 'Port of Abidjan',
              fr: "Port d'Abidjan",
              de: 'Hafen Abidjan',
              es: 'Puerto de Abiyán',
              it: 'Porto di Abidjan',
              nl: 'Haven van Abidjan',
              pt: 'Porto de Abidjan',
              tr: 'Abidjan Limanı',
              ru: 'Порт Абиджан',
              zh: '阿比让港',
              ar: 'ميناء أبيدجان',
            },
            CISAN: {
              en: 'Port of San-Pédro',
              fr: 'Port de San-Pédro',
              de: 'Hafen San-Pédro',
              es: 'Puerto de San-Pédro',
              it: 'Porto di San-Pédro',
              nl: 'Haven van San-Pédro',
              pt: 'Porto de San-Pédro',
              tr: 'San-Pédro Limanı',
              ru: 'Порт Сан-Педро',
              zh: '圣佩德罗港',
              ar: 'ميناء سان بيدرو',
            },
            CIABJ_AIR: {
              en: 'Abidjan Félix Houphouët-Boigny International Airport',
              fr: "Aéroport international d'Abidjan Félix Houphouët-Boigny",
              de: 'Internationaler Flughafen Abidjan Félix Houphouët-Boigny',
              es: 'Aeropuerto Internacional de Abiyán Félix Houphouët-Boigny',
              it: 'Aeroporto Internazionale di Abidjan Félix Houphouët-Boigny',
              nl: 'Internationale Luchthaven Abidjan Félix Houphouët-Boigny',
              pt: 'Aeroporto Internacional de Abidjan Félix Houphouët-Boigny',
              tr: 'Abidjan Félix Houphouët-Boigny Uluslararası Havaalanı',
              ru: 'Международный аэропорт Абиджан Феликс Уфуэ-Буаньи',
              zh: '阿比让费利克斯·乌弗埃-博瓦尼国际机场',
              ar: 'مطار أبيدجان فيليكس هوفويت بوانيي الدولي',
            },
            CRLIM: {
              en: 'Port of Limón',
              fr: 'Port de Limón',
              de: 'Hafen Limón',
              es: 'Puerto de Limón',
              it: 'Porto di Limón',
              nl: 'Haven van Limón',
              pt: 'Porto de Limón',
              tr: 'Limón Limanı',
              ru: 'Порт Лимон',
              zh: '利蒙港',
              ar: 'ميناء ليمون',
            },
            CRPUN: {
              en: 'Port of Puntarenas',
              fr: 'Port de Puntarenas',
              de: 'Hafen Puntarenas',
              es: 'Puerto de Puntarenas',
              it: 'Porto di Puntarenas',
              nl: 'Haven van Puntarenas',
              pt: 'Porto de Puntarenas',
              tr: 'Puntarenas Limanı',
              ru: 'Порт Пунтаренас',
              zh: '蓬塔雷纳斯港',
              ar: 'ميناء بونتاريناس',
            },
            CRSJO: {
              en: 'Juan Santamaría International Airport',
              fr: 'Aéroport international Juan Santamaría',
              de: 'Internationaler Flughafen Juan Santamaría',
              es: 'Aeropuerto Internacional Juan Santamaría',
              it: 'Aeroporto Internazionale Juan Santamaría',
              nl: 'Internationale Luchthaven Juan Santamaría',
              pt: 'Aeroporto Internacional Juan Santamaría',
              tr: 'Juan Santamaría Uluslararası Havaalanı',
              ru: 'Международный аэропорт Хуан Сантамария',
              zh: '胡安·圣玛丽亚国际机场',
              ar: 'مطار خوان سانتاماريا الدولي',
            },
            CYLCA: {
              en: 'Port of Larnaca',
              fr: 'Port de Larnaca',
              de: 'Hafen Larnaka',
              es: 'Puerto de Lárnaca',
              it: 'Porto di Larnaca',
              nl: 'Haven van Larnaca',
              pt: 'Porto de Larnaca',
              tr: 'Larnaka Limanı',
              ru: 'Порт Ларнака',
              zh: '拉纳卡港',
              ar: 'ميناء لارنكا',
            },
            CYPAF: {
              en: 'Port of Paphos',
              fr: 'Port de Paphos',
              de: 'Hafen Paphos',
              es: 'Puerto de Pafos',
              it: 'Porto di Pafo',
              nl: 'Haven van Paphos',
              pt: 'Porto de Pafos',
              tr: 'Baf Limanı',
              ru: 'Порт Пафос',
              zh: '帕福斯港',
              ar: 'ميناء بافوس',
            },
            CYLCA_AIR: {
              en: 'Larnaca International Airport',
              fr: 'Aéroport international de Larnaca',
              de: 'Internationaler Flughafen Larnaka',
              es: 'Aeropuerto Internacional de Lárnaca',
              it: 'Aeroporto Internazionale di Larnaca',
              nl: 'Internationale Luchthaven Larnaca',
              pt: 'Aeroporto Internacional de Larnaca',
              tr: 'Larnaka Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ларнака',
              zh: '拉纳卡国际机场',
              ar: 'مطار لارنكا الدولي',
            },
            CYPAF_AIR: {
              en: 'Paphos International Airport',
              fr: 'Aéroport international de Paphos',
              de: 'Internationaler Flughafen Paphos',
              es: 'Aeropuerto Internacional de Pafos',
              it: 'Aeroporto Internazionale di Pafo',
              nl: 'Internationale Luchthaven Paphos',
              pt: 'Aeroporto Internacional de Pafos',
              tr: 'Baf Uluslararası Havaalanı',
              ru: 'Международный аэропорт Пафос',
              zh: '帕福斯国际机场',
              ar: 'مطار بافوس الدولي',
            },
            ESALG: {
              en: 'Port of Algeciras',
              fr: "Port d'Algésiras",
              de: 'Hafen Algeciras',
              es: 'Puerto de Algeciras',
              it: 'Porto di Algeciras',
              nl: 'Haven van Algeciras',
              pt: 'Porto de Algeciras',
              tr: 'Algeciras Limanı',
              ru: 'Порт Альхесирас',
              zh: '阿尔赫西拉斯港',
              ar: 'ميناء الجزيرة الخضراء',
            },
            ESVLC: {
              en: 'Port of Valencia',
              fr: 'Port de Valence',
              de: 'Hafen Valencia',
              es: 'Puerto de Valencia',
              it: 'Porto di Valencia',
              nl: 'Haven van Valencia',
              pt: 'Porto de Valência',
              tr: 'Valencia Limanı',
              ru: 'Порт Валенсия',
              zh: '瓦伦西亚港',
              ar: 'ميناء بلنسية',
            },
            ESBCN: {
              en: 'Port of Barcelona',
              fr: 'Port de Barcelone',
              de: 'Hafen Barcelona',
              es: 'Puerto de Barcelona',
              it: 'Porto di Barcellona',
              nl: 'Haven van Barcelona',
              pt: 'Porto de Barcelona',
              tr: 'Barselona Limanı',
              ru: 'Порт Барселона',
              zh: '巴塞罗那港',
              ar: 'ميناء برشلونة',
            },
            ESBIL: {
              en: 'Port of Bilbao',
              fr: 'Port de Bilbao',
              de: 'Hafen Bilbao',
              es: 'Puerto de Bilbao',
              it: 'Porto di Bilbao',
              nl: 'Haven van Bilbao',
              pt: 'Porto de Bilbau',
              tr: 'Bilbao Limanı',
              ru: 'Порт Бильбао',
              zh: '毕尔巴鄂港',
              ar: 'ميناء بلباو',
            },
            ESLAS: {
              en: 'Port of Las Palmas',
              fr: 'Port de Las Palmas',
              de: 'Hafen Las Palmas',
              es: 'Puerto de Las Palmas',
              it: 'Porto di Las Palmas',
              nl: 'Haven van Las Palmas',
              pt: 'Porto de Las Palmas',
              tr: 'Las Palmas Limanı',
              ru: 'Порт Лас-Пальмас',
              zh: '拉斯帕尔马斯港',
              ar: 'ميناء لاس بالماس',
            },
            ESMAD: {
              en: 'Madrid-Barajas Airport',
              fr: 'Aéroport de Madrid-Barajas',
              de: 'Flughafen Madrid-Barajas',
              es: 'Aeropuerto de Madrid-Barajas',
              it: 'Aeroporto di Madrid-Barajas',
              nl: 'Luchthaven Madrid-Barajas',
              pt: 'Aeroporto de Madrid-Barajas',
              tr: 'Madrid-Barajas Havaalanı',
              ru: 'Аэропорт Мадрид-Барахас',
              zh: '马德里-巴拉哈斯机场',
              ar: 'مطار مدريد-باراخاس',
            },
            ESBCN_AIR: {
              en: 'Barcelona Airport',
              fr: 'Aéroport de Barcelone',
              de: 'Flughafen Barcelona',
              es: 'Aeropuerto de Barcelona',
              it: 'Aeroporto di Barcellona',
              nl: 'Luchthaven Barcelona',
              pt: 'Aeroporto de Barcelona',
              tr: 'Barselona Havaalanı',
              ru: 'Аэропорт Барселона',
              zh: '巴塞罗那机场',
              ar: 'مطار برشلونة',
            },
            ESVLC_AIR: {
              en: 'Valencia Airport',
              fr: 'Aéroport de Valence',
              de: 'Flughafen Valencia',
              es: 'Aeropuerto de Valencia',
              it: 'Aeroporto di Valencia',
              nl: 'Luchthaven Valencia',
              pt: 'Aeroporto de Valência',
              tr: 'Valencia Havaalanı',
              ru: 'Аэропорт Валенсия',
              zh: '瓦伦西亚机场',
              ar: 'مطار بلنسية',
            },
            ESBIL_AIR: {
              en: 'Bilbao Airport',
              fr: 'Aéroport de Bilbao',
              de: 'Flughafen Bilbao',
              es: 'Aeropuerto de Bilbao',
              it: 'Aeroporto di Bilbao',
              nl: 'Luchthaven Bilbao',
              pt: 'Aeroporto de Bilbau',
              tr: 'Bilbao Havaalanı',
              ru: 'Аэропорт Бильбао',
              zh: '毕尔巴鄂机场',
              ar: 'مطار بلباو',
            },
            ESMAD_RAIL: {
              en: 'Madrid Atocha Station',
              fr: 'Gare de Madrid Atocha',
              de: 'Bahnhof Madrid Atocha',
              es: 'Estación de Madrid Atocha',
              it: 'Stazione di Madrid Atocha',
              nl: 'Station Madrid Atocha',
              pt: 'Estação de Madrid Atocha',
              tr: 'Madrid Atocha İstasyonu',
              ru: 'Вокзал Мадрид Аточа',
              zh: '马德里阿托查车站',
              ar: 'محطة مدريد أتوتشا',
            },
            ESBCN_RAIL: {
              en: 'Barcelona Sants Station',
              fr: 'Gare de Barcelona Sants',
              de: 'Bahnhof Barcelona Sants',
              es: 'Estación de Barcelona Sants',
              it: 'Stazione di Barcelona Sants',
              nl: 'Station Barcelona Sants',
              pt: 'Estação de Barcelona Sants',
              tr: 'Barcelona Sants İstasyonu',
              ru: 'Вокзал Барселона Сантс',
              zh: '巴塞罗那桑茨车站',
              ar: 'محطة برشلونة سانتس',
            },
            ESVLC_RAIL: {
              en: 'Valencia Joaquín Sorolla Station',
              fr: 'Gare de Valencia Joaquín Sorolla',
              de: 'Bahnhof Valencia Joaquín Sorolla',
              es: 'Estación de Valencia Joaquín Sorolla',
              it: 'Stazione di Valencia Joaquín Sorolla',
              nl: 'Station Valencia Joaquín Sorolla',
              pt: 'Estação de Valencia Joaquín Sorolla',
              tr: 'Valencia Joaquín Sorolla İstasyonu',
              ru: 'Вокзал Валенсия Хоакин Сорола',
              zh: '瓦伦西亚华金·索罗拉车站',
              ar: 'محطة بلنسية خواكين سورولا',
            },
            EGALY: {
              en: 'Port of Alexandria',
              fr: "Port d'Alexandrie",
              de: 'Hafen Alexandria',
              es: 'Puerto de Alejandría',
              it: 'Porto di Alessandria',
              nl: 'Haven van Alexandrië',
              pt: 'Porto de Alexandria',
              tr: 'İskenderiye Limanı',
              ru: 'Порт Александрия',
              zh: '亚历山大港',
              ar: 'ميناء الإسكندرية',
            },
            EGDKH: {
              en: 'Port of Damietta',
              fr: 'Port de Damiette',
              de: 'Hafen Damiette',
              es: 'Puerto de Damieta',
              it: 'Porto di Damietta',
              nl: 'Haven van Damietta',
              pt: 'Porto de Damieta',
              tr: 'Dimyat Limanı',
              ru: 'Порт Дамиетта',
              zh: '达米埃塔港',
              ar: 'ميناء دمياط',
            },
            EGSEZ: {
              en: 'Port of Suez',
              fr: 'Port de Suez',
              de: 'Hafen Suez',
              es: 'Puerto de Suez',
              it: 'Porto di Suez',
              nl: 'Haven van Suez',
              pt: 'Porto de Suez',
              tr: 'Süveyş Limanı',
              ru: 'Порт Суэц',
              zh: '苏伊士港',
              ar: 'ميناء السويس',
            },
            EGCAI: {
              en: 'Cairo International Airport',
              fr: 'Aéroport international du Caire',
              de: 'Internationaler Flughafen Kairo',
              es: 'Aeropuerto Internacional de El Cairo',
              it: 'Aeroporto Internazionale del Cairo',
              nl: 'Internationale Luchthaven Caïro',
              pt: 'Aeroporto Internacional do Cairo',
              tr: 'Kahire Uluslararası Havaalanı',
              ru: 'Международный аэропорт Каир',
              zh: '开罗国际机场',
              ar: 'مطار القاهرة الدولي',
            },
            EETLL: {
              en: 'Port of Tallinn',
              fr: 'Port de Tallinn',
              de: 'Hafen Tallinn',
              es: 'Puerto de Tallin',
              it: 'Porto di Tallinn',
              nl: 'Haven van Tallinn',
              pt: 'Porto de Tallinn',
              tr: 'Tallinn Limanı',
              ru: 'Порт Таллинн',
              zh: '塔林港',
              ar: 'ميناء تالين',
            },
            EETLL_AIR: {
              en: 'Tallinn Lennart Meri Airport',
              fr: 'Aéroport de Tallinn Lennart Meri',
              de: 'Flughafen Tallinn Lennart Meri',
              es: 'Aeropuerto de Tallin Lennart Meri',
              it: 'Aeroporto di Tallinn Lennart Meri',
              nl: 'Luchthaven Tallinn Lennart Meri',
              pt: 'Aeroporto de Tallinn Lennart Meri',
              tr: 'Tallinn Lennart Meri Havaalanı',
              ru: 'Аэропорт Таллинн Леннарт Мери',
              zh: '塔林伦纳特·梅里机场',
              ar: 'مطار تالين لينارت ميري',
            },
            EETLL_RAIL: {
              en: 'Tallinn Railway Station',
              fr: 'Gare ferroviaire de Tallinn',
              de: 'Bahnhof Tallinn',
              es: 'Estación de Ferrocarril de Tallin',
              it: 'Stazione Ferroviaria di Tallinn',
              nl: 'Treinstation Tallinn',
              pt: 'Estação Ferroviária de Tallinn',
              tr: 'Tallinn Tren İstasyonu',
              ru: 'Железнодорожная станция Таллинн',
              zh: '塔林火车站',
              ar: 'محطة تالين للسكك الحديدية',
            },
            ETADD: {
              en: 'Addis Ababa Bole International Airport',
              fr: "Aéroport international d'Addis-Abeba Bole",
              de: 'Internationaler Flughafen Addis Abeba Bole',
              es: 'Aeropuerto Internacional de Addis Abeba Bole',
              it: 'Aeroporto Internazionale di Addis Abeba Bole',
              nl: 'Internationale Luchthaven Addis Abeba Bole',
              pt: 'Aeroporto Internacional de Addis Abeba Bole',
              tr: 'Addis Ababa Bole Uluslararası Havaalanı',
              ru: 'Международный аэропорт Аддис-Абеба Боле',
              zh: '亚的斯亚贝巴博莱国际机场',
              ar: 'مطار أديس أبابا بولي الدولي',
            },
            ETADD_RAIL: {
              en: 'Addis Ababa Railway Station',
              fr: "Gare ferroviaire d'Addis-Abeba",
              de: 'Bahnhof Addis Abeba',
              es: 'Estación de Ferrocarril de Addis Abeba',
              it: 'Stazione Ferroviaria di Addis Abeba',
              nl: 'Treinstation Addis Abeba',
              pt: 'Estação Ferroviária de Addis Abeba',
              tr: 'Addis Ababa Tren İstasyonu',
              ru: 'Железнодорожная станция Аддис-Абеба',
              zh: '亚的斯亚贝巴火车站',
              ar: 'محطة أديس أبابا للسكك الحديدية',
            },
            ECGYE: {
              en: 'Port of Guayaquil',
              fr: 'Port de Guayaquil',
              de: 'Hafen Guayaquil',
              es: 'Puerto de Guayaquil',
              it: 'Porto di Guayaquil',
              nl: 'Haven van Guayaquil',
              pt: 'Porto de Guayaquil',
              tr: 'Guayaquil Limanı',
              ru: 'Порт Гуаякиль',
              zh: '瓜亚基尔港',
              ar: 'ميناء غواياكيل',
            },
            ECMNT: {
              en: 'Port of Manta',
              fr: 'Port de Manta',
              de: 'Hafen Manta',
              es: 'Puerto de Manta',
              it: 'Porto di Manta',
              nl: 'Haven van Manta',
              pt: 'Porto de Manta',
              tr: 'Manta Limanı',
              ru: 'Порт Манта',
              zh: '曼塔港',
              ar: 'ميناء مانتا',
            },
            ECUIO: {
              en: 'Quito Mariscal Sucre International Airport',
              fr: 'Aéroport international de Quito Mariscal Sucre',
              de: 'Internationaler Flughafen Quito Mariscal Sucre',
              es: 'Aeropuerto Internacional de Quito Mariscal Sucre',
              it: 'Aeroporto Internazionale di Quito Mariscal Sucre',
              nl: 'Internationale Luchthaven Quito Mariscal Sucre',
              pt: 'Aeroporto Internacional de Quito Mariscal Sucre',
              tr: 'Quito Mariscal Sucre Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кито Марискаль Сукре',
              zh: '基多马里斯卡尔苏克雷国际机场',
              ar: 'مطار كيتو ماريسكال سوكري الدولي',
            },
            ECGYE_AIR: {
              en: 'Guayaquil José Joaquín de Olmedo International Airport',
              fr: 'Aéroport international de Guayaquil José Joaquín de Olmedo',
              de: 'Internationaler Flughafen Guayaquil José Joaquín de Olmedo',
              es: 'Aeropuerto Internacional de Guayaquil José Joaquín de Olmedo',
              it: 'Aeroporto Internazionale di Guayaquil José Joaquín de Olmedo',
              nl: 'Internationale Luchthaven Guayaquil José Joaquín de Olmedo',
              pt: 'Aeroporto Internacional de Guayaquil José Joaquín de Olmedo',
              tr: 'Guayaquil José Joaquín de Olmedo Uluslararası Havaalanı',
              ru: 'Международный аэропорт Гуаякиль Хосе Хоакин де Ольмедо',
              zh: '瓜亚基尔何塞·华金·德·奥尔梅多国际机场',
              ar: 'مطار غواياكيل خوسيه خواكين دي أولميدو الدولي',
            },
            ECUIO_RAIL: {
              en: 'Quito Railway Station',
              fr: 'Gare ferroviaire de Quito',
              de: 'Bahnhof Quito',
              es: 'Estación de Ferrocarril de Quito',
              it: 'Stazione Ferroviaria di Quito',
              nl: 'Treinstation Quito',
              pt: 'Estação Ferroviária de Quito',
              tr: 'Quito Tren İstasyonu',
              ru: 'Железнодорожная станция Кито',
              zh: '基多火车站',
              ar: 'محطة كيتو للسكك الحديدية',
            },
            FRMRS: {
              en: 'Port of Marseille-Fos',
              fr: 'Port de Marseille-Fos',
              de: 'Hafen Marseille-Fos',
              es: 'Puerto de Marsella-Fos',
              it: 'Porto di Marsiglia-Fos',
              nl: 'Haven van Marseille-Fos',
              pt: 'Porto de Marselha-Fos',
              tr: 'Marsilya-Fos Limanı',
              ru: 'Порт Марсель-Фос',
              zh: '马赛-福斯港',
              ar: 'ميناء مرسيليا-فوس',
            },
            FRLEH: {
              en: 'Port of Le Havre',
              fr: 'Port du Havre',
              de: 'Hafen Le Havre',
              es: 'Puerto de Le Havre',
              it: 'Porto di Le Havre',
              nl: 'Haven van Le Havre',
              pt: 'Porto de Le Havre',
              tr: 'Le Havre Limanı',
              ru: 'Порт Гавр',
              zh: '勒阿弗尔港',
              ar: 'ميناء لو هافر',
            },
            FRDKK: {
              en: 'Port of Dunkirk',
              fr: 'Port de Dunkerque',
              de: 'Hafen Dünkirchen',
              es: 'Puerto de Dunkerque',
              it: 'Porto di Dunkerque',
              nl: 'Haven van Duinkerke',
              pt: 'Porto de Dunquerque',
              tr: 'Dunkerque Limanı',
              ru: 'Порт Дюнкерк',
              zh: '敦刻尔克港',
              ar: 'ميناء دونكيرك',
            },
            FRLRT: {
              en: 'Port of La Rochelle',
              fr: 'Port de La Rochelle',
              de: 'Hafen La Rochelle',
              es: 'Puerto de La Rochelle',
              it: 'Porto di La Rochelle',
              nl: 'Haven van La Rochelle',
              pt: 'Porto de La Rochelle',
              tr: 'La Rochelle Limanı',
              ru: 'Порт Ла-Рошель',
              zh: '拉罗谢尔港',
              ar: 'ميناء لا روشيل',
            },
            FRNTS: {
              en: 'Port of Nantes Saint-Nazaire',
              fr: 'Port de Nantes Saint-Nazaire',
              de: 'Hafen Nantes Saint-Nazaire',
              es: 'Puerto de Nantes Saint-Nazaire',
              it: 'Porto di Nantes Saint-Nazaire',
              nl: 'Haven van Nantes Saint-Nazaire',
              pt: 'Porto de Nantes Saint-Nazaire',
              tr: 'Nantes Saint-Nazaire Limanı',
              ru: 'Порт Нант Сен-Назер',
              zh: '南特圣纳泽尔港',
              ar: 'ميناء نانت سان نازير',
            },
            FRBOD: {
              en: 'Port of Bordeaux',
              fr: 'Port de Bordeaux',
              de: 'Hafen Bordeaux',
              es: 'Puerto de Burdeos',
              it: 'Porto di Bordeaux',
              nl: 'Haven van Bordeaux',
              pt: 'Porto de Bordéus',
              tr: 'Bordeaux Limanı',
              ru: 'Порт Бордо',
              zh: '波尔多港',
              ar: 'ميناء بوردو',
            },
            FRCDG: {
              en: 'Charles de Gaulle Airport',
              fr: 'Aéroport Charles de Gaulle',
              de: 'Flughafen Charles de Gaulle',
              es: 'Aeropuerto Charles de Gaulle',
              it: 'Aeroporto Charles de Gaulle',
              nl: 'Luchthaven Charles de Gaulle',
              pt: 'Aeroporto Charles de Gaulle',
              tr: 'Charles de Gaulle Havaalanı',
              ru: 'Аэропорт Шарль де Голль',
              zh: '戴高乐机场',
              ar: 'مطار شارل ديغول',
            },
            FRORY: {
              en: 'Paris-Orly Airport',
              fr: 'Aéroport Paris-Orly',
              de: 'Flughafen Paris-Orly',
              es: 'Aeropuerto París-Orly',
              it: 'Aeroporto Parigi-Orly',
              nl: 'Luchthaven Parijs-Orly',
              pt: 'Aeroporto Paris-Orly',
              tr: 'Paris-Orly Havaalanı',
              ru: 'Аэропорт Париж-Орли',
              zh: '巴黎-奥利机场',
              ar: 'مطار باريس-أورلي',
            },
            FRLYS: {
              en: 'Lyon Saint-Exupéry Airport',
              fr: 'Aéroport Lyon Saint-Exupéry',
              de: 'Flughafen Lyon Saint-Exupéry',
              es: 'Aeropuerto Lyon Saint-Exupéry',
              it: 'Aeroporto Lione Saint-Exupéry',
              nl: 'Luchthaven Lyon Saint-Exupéry',
              pt: 'Aeroporto Lyon Saint-Exupéry',
              tr: 'Lyon Saint-Exupéry Havaalanı',
              ru: 'Аэропорт Лион Сент-Экзюпери',
              zh: '里昂圣埃克苏佩里机场',
              ar: 'مطار ليون سان إكزوبيري',
            },
            FRMRS_AIR: {
              en: 'Marseille Provence Airport',
              fr: 'Aéroport Marseille Provence',
              de: 'Flughafen Marseille Provence',
              es: 'Aeropuerto Marsella Provenza',
              it: 'Aeroporto Marsiglia Provenza',
              nl: 'Luchthaven Marseille Provence',
              pt: 'Aeroporto Marselha Provence',
              tr: 'Marsilya Provence Havaalanı',
              ru: 'Аэропорт Марсель Прованс',
              zh: '马赛普罗旺斯机场',
              ar: 'مطار مرسيليا بروفانس',
            },
            FRNTE: {
              en: "Nice Côte d'Azur Airport",
              fr: "Aéroport Nice Côte d'Azur",
              de: "Flughafen Nizza Côte d'Azur",
              es: 'Aeropuerto Niza Costa Azul',
              it: 'Aeroporto Nizza Costa Azzurra',
              nl: "Luchthaven Nice Côte d'Azur",
              pt: "Aeroporto Nice Côte d'Azur",
              tr: "Nice Côte d'Azur Havaalanı",
              ru: 'Аэропорт Ницца Лазурный Берег',
              zh: '尼斯蓝色海岸机场',
              ar: 'مطار نيس كوت دازور',
            },
            FRTLS: {
              en: 'Toulouse-Blagnac Airport',
              fr: 'Aéroport Toulouse-Blagnac',
              de: 'Flughafen Toulouse-Blagnac',
              es: 'Aeropuerto Toulouse-Blagnac',
              it: 'Aeroporto Tolosa-Blagnac',
              nl: 'Luchthaven Toulouse-Blagnac',
              pt: 'Aeroporto Toulouse-Blagnac',
              tr: 'Toulouse-Blagnac Havaalanı',
              ru: 'Аэропорт Тулуза-Бланьяк',
              zh: '图卢兹-布拉尼亚克机场',
              ar: 'مطار تولوز-بلانياك',
            },
            FRPARIS_RAIL: {
              en: 'Paris Railway Terminals',
              fr: 'Gares de Paris',
              de: 'Bahnhöfe Paris',
              es: 'Estaciones de París',
              it: 'Stazioni di Parigi',
              nl: 'Stations Parijs',
              pt: 'Estações de Paris',
              tr: 'Paris Tren İstasyonları',
              ru: 'Железнодорожные вокзалы Парижа',
              zh: '巴黎火车站',
              ar: 'محطات باريس للسكك الحديدية',
            },
            FRLYON_RAIL: {
              en: 'Lyon Part-Dieu Station',
              fr: 'Gare de Lyon Part-Dieu',
              de: 'Bahnhof Lyon Part-Dieu',
              es: 'Estación de Lyon Part-Dieu',
              it: 'Stazione di Lione Part-Dieu',
              nl: 'Station Lyon Part-Dieu',
              pt: 'Estação de Lyon Part-Dieu',
              tr: 'Lyon Part-Dieu İstasyonu',
              ru: 'Вокзал Лион Пар-Дьё',
              zh: '里昂帕丢车站',
              ar: 'محطة ليون بارت ديو',
            },
            FRMARS_RAIL: {
              en: 'Marseille Saint-Charles Station',
              fr: 'Gare de Marseille Saint-Charles',
              de: 'Bahnhof Marseille Saint-Charles',
              es: 'Estación de Marsella Saint-Charles',
              it: 'Stazione di Marsiglia Saint-Charles',
              nl: 'Station Marseille Saint-Charles',
              pt: 'Estação de Marselha Saint-Charles',
              tr: 'Marsilya Saint-Charles İstasyonu',
              ru: 'Вокзал Марсель Сен-Шарль',
              zh: '马赛圣夏尔车站',
              ar: 'محطة مرسيليا سان شارل',
            },
            FIHAM: {
              en: 'Port of Hamina-Kotka',
              fr: 'Port de Hamina-Kotka',
              de: 'Hafen Hamina-Kotka',
              es: 'Puerto de Hamina-Kotka',
              it: 'Porto di Hamina-Kotka',
              nl: 'Haven van Hamina-Kotka',
              pt: 'Porto de Hamina-Kotka',
              tr: 'Hamina-Kotka Limanı',
              ru: 'Порт Хамина-Котка',
              zh: '哈米纳-科特卡港',
              ar: 'ميناء هامينا-كوتكا',
            },
            FIHEL: {
              en: 'Port of Helsinki',
              fr: "Port d'Helsinki",
              de: 'Hafen Helsinki',
              es: 'Puerto de Helsinki',
              it: 'Porto di Helsinki',
              nl: 'Haven van Helsinki',
              pt: 'Porto de Helsinki',
              tr: 'Helsinki Limanı',
              ru: 'Порт Хельсинки',
              zh: '赫尔辛基港',
              ar: 'ميناء هلسنكي',
            },
            FIHEL_AIR: {
              en: 'Helsinki-Vantaa Airport',
              fr: "Aéroport d'Helsinki-Vantaa",
              de: 'Flughafen Helsinki-Vantaa',
              es: 'Aeropuerto de Helsinki-Vantaa',
              it: 'Aeroporto di Helsinki-Vantaa',
              nl: 'Luchthaven Helsinki-Vantaa',
              pt: 'Aeroporto de Helsinki-Vantaa',
              tr: 'Helsinki-Vantaa Havaalanı',
              ru: 'Аэропорт Хельсинки-Вантаа',
              zh: '赫尔辛基-万塔机场',
              ar: 'مطار هلسنكي-فانتا',
            },
            FIHEL_RAIL: {
              en: 'Helsinki Central Station',
              fr: "Gare centrale d'Helsinki",
              de: 'Hauptbahnhof Helsinki',
              es: 'Estación Central de Helsinki',
              it: 'Stazione Centrale di Helsinki',
              nl: 'Centraal Station Helsinki',
              pt: 'Estação Central de Helsinki',
              tr: 'Helsinki Merkez İstasyonu',
              ru: 'Центральный вокзал Хельсинки',
              zh: '赫尔辛基中央车站',
              ar: 'محطة هلسنكي المركزية',
            },
            FJLAU: {
              en: 'Port of Lautoka',
              fr: 'Port de Lautoka',
              de: 'Hafen Lautoka',
              es: 'Puerto de Lautoka',
              it: 'Porto di Lautoka',
              nl: 'Haven van Lautoka',
              pt: 'Porto de Lautoka',
              tr: 'Lautoka Limanı',
              ru: 'Порт Лаутока',
              zh: '劳托卡港',
              ar: 'ميناء لاوتوكا',
            },
            FJSUV_AIR: {
              en: 'Suva Nausori Airport',
              fr: 'Aéroport de Suva Nausori',
              de: 'Flughafen Suva Nausori',
              es: 'Aeropuerto de Suva Nausori',
              it: 'Aeroporto di Suva Nausori',
              nl: 'Luchthaven Suva Nausori',
              pt: 'Aeroporto de Suva Nausori',
              tr: 'Suva Nausori Havaalanı',
              ru: 'Аэропорт Сува Наусори',
              zh: '苏瓦瑙索里机场',
              ar: 'مطار سوفا ناوسوري',
            },
            GBFXT: {
              en: 'Port of Felixstowe',
              fr: 'Port de Felixstowe',
              de: 'Hafen Felixstowe',
              es: 'Puerto de Felixstowe',
              it: 'Porto di Felixstowe',
              nl: 'Haven van Felixstowe',
              pt: 'Porto de Felixstowe',
              tr: 'Felixstowe Limanı',
              ru: 'Порт Феликстоу',
              zh: '费利克斯托港',
              ar: 'ميناء فيليكستو',
            },
            GBSOU: {
              en: 'Port of Southampton',
              fr: 'Port de Southampton',
              de: 'Hafen Southampton',
              es: 'Puerto de Southampton',
              it: 'Porto di Southampton',
              nl: 'Haven van Southampton',
              pt: 'Porto de Southampton',
              tr: 'Southampton Limanı',
              ru: 'Порт Саутгемптон',
              zh: '南安普敦港',
              ar: 'ميناء ساوثهامبتون',
            },
            GBLIV: {
              en: 'Port of Liverpool',
              fr: 'Port de Liverpool',
              de: 'Hafen Liverpool',
              es: 'Puerto de Liverpool',
              it: 'Porto di Liverpool',
              nl: 'Haven van Liverpool',
              pt: 'Porto de Liverpool',
              tr: 'Liverpool Limanı',
              ru: 'Порт Ливерпуль',
              zh: '利物浦港',
              ar: 'ميناء ليفربول',
            },
            GBLOND: {
              en: 'Port of London',
              fr: 'Port de Londres',
              de: 'Hafen London',
              es: 'Puerto de Londres',
              it: 'Porto di Londra',
              nl: 'Haven van Londen',
              pt: 'Porto de Londres',
              tr: 'Londra Limanı',
              ru: 'Порт Лондон',
              zh: '伦敦港',
              ar: 'ميناء لندن',
            },
            GBIMM: {
              en: 'Port of Immingham',
              fr: "Port d'Immingham",
              de: 'Hafen Immingham',
              es: 'Puerto de Immingham',
              it: 'Porto di Immingham',
              nl: 'Haven van Immingham',
              pt: 'Porto de Immingham',
              tr: 'Immingham Limanı',
              ru: 'Порт Иммингем',
              zh: '伊明汉姆港',
              ar: 'ميناء إيمنغهام',
            },
            GBDOV: {
              en: 'Port of Dover',
              fr: 'Port de Douvres',
              de: 'Hafen Dover',
              es: 'Puerto de Dover',
              it: 'Porto di Dover',
              nl: 'Haven van Dover',
              pt: 'Porto de Dover',
              tr: 'Dover Limanı',
              ru: 'Порт Дувр',
              zh: '多佛港',
              ar: 'ميناء دوفر',
            },
            GBLHR: {
              en: 'London Heathrow Airport',
              fr: 'Aéroport de Londres Heathrow',
              de: 'Flughafen London Heathrow',
              es: 'Aeropuerto de Londres Heathrow',
              it: 'Aeroporto di Londra Heathrow',
              nl: 'Luchthaven Londen Heathrow',
              pt: 'Aeroporto de Londres Heathrow',
              tr: 'Londra Heathrow Havaalanı',
              ru: 'Аэропорт Лондон Хитроу',
              zh: '伦敦希思罗机场',
              ar: 'مطار لندن هيثرو',
            },
            GBLGW: {
              en: 'London Gatwick Airport',
              fr: 'Aéroport de Londres Gatwick',
              de: 'Flughafen London Gatwick',
              es: 'Aeropuerto de Londres Gatwick',
              it: 'Aeroporto di Londra Gatwick',
              nl: 'Luchthaven Londen Gatwick',
              pt: 'Aeroporto de Londres Gatwick',
              tr: 'Londra Gatwick Havaalanı',
              ru: 'Аэропорт Лондон Гатвик',
              zh: '伦敦盖特威克机场',
              ar: 'مطار لندن غاتويك',
            },
            GBSTN: {
              en: 'London Stansted Airport',
              fr: 'Aéroport de Londres Stansted',
              de: 'Flughafen London Stansted',
              es: 'Aeropuerto de Londres Stansted',
              it: 'Aeroporto di Londra Stansted',
              nl: 'Luchthaven Londen Stansted',
              pt: 'Aeroporto de Londres Stansted',
              tr: 'Londra Stansted Havaalanı',
              ru: 'Аэропорт Лондон Станстед',
              zh: '伦敦斯坦斯特德机场',
              ar: 'مطار لندن ستانستيد',
            },
            GBLUTON: {
              en: 'London Luton Airport',
              fr: 'Aéroport de Londres Luton',
              de: 'Flughafen London Luton',
              es: 'Aeropuerto de Londres Luton',
              it: 'Aeroporto di Londra Luton',
              nl: 'Luchthaven Londen Luton',
              pt: 'Aeroporto de Londres Luton',
              tr: 'Londra Luton Havaalanı',
              ru: 'Аэропорт Лондон Лутон',
              zh: '伦敦卢顿机场',
              ar: 'مطار لندن لوتون',
            },
            GBMAN: {
              en: 'Manchester Airport',
              fr: 'Aéroport de Manchester',
              de: 'Flughafen Manchester',
              es: 'Aeropuerto de Manchester',
              it: 'Aeroporto di Manchester',
              nl: 'Luchthaven Manchester',
              pt: 'Aeroporto de Manchester',
              tr: 'Manchester Havaalanı',
              ru: 'Аэропорт Манчестер',
              zh: '曼彻斯特机场',
              ar: 'مطار مانشستر',
            },
            GBEDI: {
              en: 'Edinburgh Airport',
              fr: "Aéroport d'Édimbourg",
              de: 'Flughafen Edinburgh',
              es: 'Aeropuerto de Edimburgo',
              it: 'Aeroporto di Edimburgo',
              nl: 'Luchthaven Edinburgh',
              pt: 'Aeroporto de Edimburgo',
              tr: 'Edinburgh Havaalanı',
              ru: 'Аэропорт Эдинбург',
              zh: '爱丁堡机场',
              ar: 'مطار إدنبرة',
            },
            GBBHM: {
              en: 'Birmingham Airport',
              fr: 'Aéroport de Birmingham',
              de: 'Flughafen Birmingham',
              es: 'Aeropuerto de Birmingham',
              it: 'Aeroporto di Birmingham',
              nl: 'Luchthaven Birmingham',
              pt: 'Aeroporto de Birmingham',
              tr: 'Birmingham Havaalanı',
              ru: 'Аэропорт Бирмингем',
              zh: '伯明翰机场',
              ar: 'مطار برمنغهام',
            },
            GBLOND_RAIL: {
              en: 'London St Pancras International',
              fr: 'Gare de Londres St Pancras International',
              de: 'Bahnhof London St Pancras International',
              es: 'Estación de Londres St Pancras International',
              it: 'Stazione di Londra St Pancras International',
              nl: 'Station Londen St Pancras International',
              pt: 'Estação de Londres St Pancras International',
              tr: 'Londra St Pancras International İstasyonu',
              ru: 'Вокзал Лондон Сент-Панкрас Интернешнл',
              zh: '伦敦圣潘克拉斯国际车站',
              ar: 'محطة لندن سانت بانكراس الدولية',
            },
            GBMAN_RAIL: {
              en: 'Manchester Piccadilly Station',
              fr: 'Gare de Manchester Piccadilly',
              de: 'Bahnhof Manchester Piccadilly',
              es: 'Estación de Manchester Piccadilly',
              it: 'Stazione di Manchester Piccadilly',
              nl: 'Station Manchester Piccadilly',
              pt: 'Estação de Manchester Piccadilly',
              tr: 'Manchester Piccadilly İstasyonu',
              ru: 'Вокзал Манчестер Пикадилли',
              zh: '曼彻斯特皮卡迪利车站',
              ar: 'محطة مانشستر بيكاديلي',
            },
            GBBHM_RAIL: {
              en: 'Birmingham New Street Station',
              fr: 'Gare de Birmingham New Street',
              de: 'Bahnhof Birmingham New Street',
              es: 'Estación de Birmingham New Street',
              it: 'Stazione di Birmingham New Street',
              nl: 'Station Birmingham New Street',
              pt: 'Estação de Birmingham New Street',
              tr: 'Birmingham New Street İstasyonu',
              ru: 'Вокзал Бирмингем Нью-Стрит',
              zh: '伯明翰新街车站',
              ar: 'محطة برمنغهام نيو ستريت',
            },
            GRPIR: {
              en: 'Port of Piraeus',
              fr: 'Port du Pirée',
              de: 'Hafen Piräus',
              es: 'Puerto del Pireo',
              it: 'Porto del Pireo',
              nl: 'Haven van Piraeus',
              pt: 'Porto do Pireu',
              tr: 'Pire Limanı',
              ru: 'Порт Пирей',
              zh: '比雷埃夫斯港',
              ar: 'ميناء بيريوس',
            },
            GRTHE: {
              en: 'Port of Thessaloniki',
              fr: 'Port de Thessalonique',
              de: 'Hafen Thessaloniki',
              es: 'Puerto de Tesalónica',
              it: 'Porto di Salonicco',
              nl: 'Haven van Thessaloniki',
              pt: 'Porto de Tessalônica',
              tr: 'Selanik Limanı',
              ru: 'Порт Салоники',
              zh: '塞萨洛尼基港',
              ar: 'ميناء سالونيك',
            },
            GRATH: {
              en: 'Athens Eleftherios Venizelos Airport',
              fr: "Aéroport d'Athènes Elefthérios Venizélos",
              de: 'Flughafen Athen Eleftherios Venizelos',
              es: 'Aeropuerto de Atenas Eleftherios Venizelos',
              it: 'Aeroporto di Atene Eleftherios Venizelos',
              nl: 'Luchthaven Athene Eleftherios Venizelos',
              pt: 'Aeroporto de Atenas Eleftherios Venizelos',
              tr: 'Atina Eleftherios Venizelos Havaalanı',
              ru: 'Аэропорт Афины Элефтериос Венизелос',
              zh: '雅典埃莱夫塞里奥斯·韦尼泽洛斯机场',
              ar: 'مطار أثينا إليفثيريوس فينيزيلوس',
            },
            GRATH_RAIL: {
              en: 'Athens Railway Station',
              fr: "Gare d'Athènes",
              de: 'Bahnhof Athen',
              es: 'Estación de Atenas',
              it: 'Stazione di Atene',
              nl: 'Station Athene',
              pt: 'Estação de Atenas',
              tr: 'Atina Tren İstasyonu',
              ru: 'Железнодорожная станция Афины',
              zh: '雅典火车站',
              ar: 'محطة أثينا للسكك الحديدية',
            },
            GHTEM: {
              en: 'Port of Tema',
              fr: 'Port de Tema',
              de: 'Hafen Tema',
              es: 'Puerto de Tema',
              it: 'Porto di Tema',
              nl: 'Haven van Tema',
              pt: 'Porto de Tema',
              tr: 'Tema Limanı',
              ru: 'Порт Тема',
              zh: '特马港',
              ar: 'ميناء تيما',
            },
            GHTKO: {
              en: 'Port of Takoradi',
              fr: 'Port de Takoradi',
              de: 'Hafen Takoradi',
              es: 'Puerto de Takoradi',
              it: 'Porto di Takoradi',
              nl: 'Haven van Takoradi',
              pt: 'Porto de Takoradi',
              tr: 'Takoradi Limanı',
              ru: 'Порт Такоради',
              zh: '塔科拉迪港',
              ar: 'ميناء تاكورادي',
            },
            GHACC: {
              en: 'Accra Kotoka International Airport',
              fr: "Aéroport international d'Accra Kotoka",
              de: 'Internationaler Flughafen Accra Kotoka',
              es: 'Aeropuerto Internacional de Accra Kotoka',
              it: 'Aeroporto Internazionale di Accra Kotoka',
              nl: 'Internationale Luchthaven Accra Kotoka',
              pt: 'Aeroporto Internacional de Accra Kotoka',
              tr: 'Accra Kotoka Uluslararası Havaalanı',
              ru: 'Международный аэропорт Аккра Котока',
              zh: '阿克拉科托卡国际机场',
              ar: 'مطار أكرا كوتوكا الدولي',
            },
            GTGUA: {
              en: 'Port of Guatemala',
              fr: 'Port de Guatemala',
              de: 'Hafen Guatemala',
              es: 'Puerto de Guatemala',
              it: 'Porto di Guatemala',
              nl: 'Haven van Guatemala',
              pt: 'Porto da Guatemala',
              tr: 'Guatemala Limanı',
              ru: 'Порт Гватемала',
              zh: '危地马拉港',
              ar: 'ميناء غواتيمالا',
            },
            GTPAC: {
              en: 'Port Quetzal',
              fr: 'Port Quetzal',
              de: 'Hafen Quetzal',
              es: 'Puerto Quetzal',
              it: 'Porto Quetzal',
              nl: 'Haven Quetzal',
              pt: 'Porto Quetzal',
              tr: 'Quetzal Limanı',
              ru: 'Порт Кетсаль',
              zh: '克萨尔港',
              ar: 'ميناء كيتزال',
            },
            GTGUA_AIR: {
              en: 'Guatemala City La Aurora International Airport',
              fr: 'Aéroport international de Guatemala City La Aurora',
              de: 'Internationaler Flughafen Guatemala City La Aurora',
              es: 'Aeropuerto Internacional La Aurora de Ciudad de Guatemala',
              it: 'Aeroporto Internazionale La Aurora di Città del Guatemala',
              nl: 'Internationale Luchthaven Guatemala City La Aurora',
              pt: 'Aeroporto Internacional de Guatemala City La Aurora',
              tr: 'Guatemala City La Aurora Uluslararası Havaalanı',
              ru: 'Международный аэропорт Гватемала Сити Ла Аурора',
              zh: '危地马拉城拉奥罗拉国际机场',
              ar: 'مطار مدينة غواتيمالا لا أورورا الدولي',
            },
            HKHKG_AIR: {
              en: 'Hong Kong International Airport',
              fr: 'Aéroport international de Hong Kong',
              de: 'Internationaler Flughafen Hongkong',
              es: 'Aeropuerto Internacional de Hong Kong',
              it: 'Aeroporto Internazionale di Hong Kong',
              nl: 'Internationale Luchthaven Hong Kong',
              pt: 'Aeroporto Internacional de Hong Kong',
              tr: 'Hong Kong Uluslararası Havaalanı',
              ru: 'Международный аэропорт Гонконг',
              zh: '香港国际机场',
              ar: 'مطار هونغ كونغ الدولي',
            },
            HRRJK: {
              en: 'Port of Rijeka',
              fr: 'Port de Rijeka',
              de: 'Hafen Rijeka',
              es: 'Puerto de Rijeka',
              it: 'Porto di Rijeka',
              nl: 'Haven van Rijeka',
              pt: 'Porto de Rijeka',
              tr: 'Rijeka Limanı',
              ru: 'Порт Риека',
              zh: '里耶卡港',
              ar: 'ميناء رييكا',
            },
            HRSPT: {
              en: 'Port of Split',
              fr: 'Port de Split',
              de: 'Hafen Split',
              es: 'Puerto de Split',
              it: 'Porto di Spalato',
              nl: 'Haven van Split',
              pt: 'Porto de Split',
              tr: 'Split Limanı',
              ru: 'Порт Сплит',
              zh: '斯普利特港',
              ar: 'ميناء سبليت',
            },
            HRZAG: {
              en: 'Port of Zadar',
              fr: 'Port de Zadar',
              de: 'Hafen Zadar',
              es: 'Puerto de Zadar',
              it: 'Porto di Zara',
              nl: 'Haven van Zadar',
              pt: 'Porto de Zadar',
              tr: 'Zadar Limanı',
              ru: 'Порт Задар',
              zh: '扎达尔港',
              ar: 'ميناء زادار',
            },
            HRZAG_AIR: {
              en: 'Zagreb Franjo Tuđman Airport',
              fr: 'Aéroport de Zagreb Franjo Tuđman',
              de: 'Flughafen Zagreb Franjo Tuđman',
              es: 'Aeropuerto de Zagreb Franjo Tuđman',
              it: 'Aeroporto di Zagabria Franjo Tuđman',
              nl: 'Luchthaven Zagreb Franjo Tuđman',
              pt: 'Aeroporto de Zagreb Franjo Tuđman',
              tr: 'Zagreb Franjo Tuđman Havaalanı',
              ru: 'Аэропорт Загреб Франьо Туджман',
              zh: '萨格勒布弗拉尼奥·图季曼机场',
              ar: 'مطار زغرب فرانيو توجمان',
            },
            HRSPT_AIR: {
              en: 'Split Airport',
              fr: 'Aéroport de Split',
              de: 'Flughafen Split',
              es: 'Aeropuerto de Split',
              it: 'Aeroporto di Spalato',
              nl: 'Luchthaven Split',
              pt: 'Aeroporto de Split',
              tr: 'Split Havaalanı',
              ru: 'Аэропорт Сплит',
              zh: '斯普利特机场',
              ar: 'مطار سبليت',
            },
            HRZAG_RAIL: {
              en: 'Zagreb Central Station',
              fr: 'Gare centrale de Zagreb',
              de: 'Hauptbahnhof Zagreb',
              es: 'Estación Central de Zagreb',
              it: 'Stazione Centrale di Zagabria',
              nl: 'Centraal Station Zagreb',
              pt: 'Estação Central de Zagreb',
              tr: 'Zagreb Merkez İstasyonu',
              ru: 'Центральный вокзал Загреб',
              zh: '萨格勒布中央车站',
              ar: 'محطة زغرب المركزية',
            },
            HUBUD: {
              en: 'Port of Budapest',
              fr: 'Port de Budapest',
              de: 'Hafen Budapest',
              es: 'Puerto de Budapest',
              it: 'Porto di Budapest',
              nl: 'Haven van Boedapest',
              pt: 'Porto de Budapeste',
              tr: 'Budapeşte Limanı',
              ru: 'Порт Будапешт',
              zh: '布达佩斯港',
              ar: 'ميناء بودابست',
            },
            HUBUD_AIR: {
              en: 'Budapest Liszt Ferenc International Airport',
              fr: 'Aéroport international de Budapest Liszt Ferenc',
              de: 'Internationaler Flughafen Budapest Liszt Ferenc',
              es: 'Aeropuerto Internacional de Budapest Liszt Ferenc',
              it: 'Aeroporto Internazionale di Budapest Liszt Ferenc',
              nl: 'Internationale Luchthaven Budapest Liszt Ferenc',
              pt: 'Aeroporto Internacional de Budapeste Liszt Ferenc',
              tr: 'Budapeşte Liszt Ferenc Uluslararası Havaalanı',
              ru: 'Международный аэропорт Будапешт Лист Ференц',
              zh: '布达佩斯李斯特·费伦茨国际机场',
              ar: 'مطار بودابست ليست فيرينتس الدولي',
            },
            HUBUD_RAIL: {
              en: 'Budapest Keleti Railway Station',
              fr: 'Gare de Budapest Keleti',
              de: 'Bahnhof Budapest Keleti',
              es: 'Estación de Budapest Keleti',
              it: 'Stazione di Budapest Keleti',
              nl: 'Station Budapest Keleti',
              pt: 'Estação de Budapeste Keleti',
              tr: 'Budapeşte Keleti İstasyonu',
              ru: 'Вокзал Будапешт Келети',
              zh: '布达佩斯东站',
              ar: 'محطة بودابست كيليتي',
            },
            ITGOA: {
              en: 'Port of Genoa',
              fr: 'Port de Gênes',
              de: 'Hafen Genua',
              es: 'Puerto de Génova',
              it: 'Porto di Genova',
              nl: 'Haven van Genua',
              pt: 'Porto de Gênova',
              tr: 'Cenova Limanı',
              ru: 'Порт Генуя',
              zh: '热那亚港',
              ar: 'ميناء جنوة',
            },
            ITLSP: {
              en: 'Port of La Spezia',
              fr: 'Port de La Spezia',
              de: 'Hafen La Spezia',
              es: 'Puerto de La Spezia',
              it: 'Porto della Spezia',
              nl: 'Haven van La Spezia',
              pt: 'Porto de La Spezia',
              tr: 'La Spezia Limanı',
              ru: 'Порт Ла-Специя',
              zh: '拉斯佩齐亚港',
              ar: 'ميناء لا سبيتسيا',
            },
            ITLIV: {
              en: 'Port of Livorno',
              fr: 'Port de Livourne',
              de: 'Hafen Livorno',
              es: 'Puerto de Livorno',
              it: 'Porto di Livorno',
              nl: 'Haven van Livorno',
              pt: 'Porto de Livorno',
              tr: 'Livorno Limanı',
              ru: 'Порт Ливорно',
              zh: '里窝那港',
              ar: 'ميناء ليفورنو',
            },
            ITNAS: {
              en: 'Port of Naples',
              fr: 'Port de Naples',
              de: 'Hafen Neapel',
              es: 'Puerto de Nápoles',
              it: 'Porto di Napoli',
              nl: 'Haven van Napels',
              pt: 'Porto de Nápoles',
              tr: 'Napoli Limanı',
              ru: 'Порт Неаполь',
              zh: '那不勒斯港',
              ar: 'ميناء نابولي',
            },
            ITVEN: {
              en: 'Port of Venice',
              fr: 'Port de Venise',
              de: 'Hafen Venedig',
              es: 'Puerto de Venecia',
              it: 'Porto di Venezia',
              nl: 'Haven van Venetië',
              pt: 'Porto de Veneza',
              tr: 'Venedik Limanı',
              ru: 'Порт Венеция',
              zh: '威尼斯港',
              ar: 'ميناء البندقية',
            },
            ITROM: {
              en: 'Rome Fiumicino Airport',
              fr: 'Aéroport de Rome Fiumicino',
              de: 'Flughafen Rom Fiumicino',
              es: 'Aeropuerto de Roma Fiumicino',
              it: 'Aeroporto di Roma Fiumicino',
              nl: 'Luchthaven Rome Fiumicino',
              pt: 'Aeroporto de Roma Fiumicino',
              tr: 'Roma Fiumicino Havaalanı',
              ru: 'Аэропорт Рим Фьюмичино',
              zh: '罗马菲乌米奇诺机场',
              ar: 'مطار روما فيوميتشينو',
            },
            ITMIL: {
              en: 'Milan Malpensa Airport',
              fr: 'Aéroport de Milan Malpensa',
              de: 'Flughafen Mailand Malpensa',
              es: 'Aeropuerto de Milán Malpensa',
              it: 'Aeroporto di Milano Malpensa',
              nl: 'Luchthaven Milaan Malpensa',
              pt: 'Aeroporto de Milão Malpensa',
              tr: 'Milano Malpensa Havaalanı',
              ru: 'Аэропорт Милан Мальпенса',
              zh: '米兰马尔彭萨机场',
              ar: 'مطار ميلان مالبينسا',
            },
            ITVEN_AIR: {
              en: 'Venice Marco Polo Airport',
              fr: 'Aéroport de Venise Marco Polo',
              de: 'Flughafen Venedig Marco Polo',
              es: 'Aeropuerto de Venecia Marco Polo',
              it: 'Aeroporto di Venezia Marco Polo',
              nl: 'Luchthaven Venetië Marco Polo',
              pt: 'Aeroporto de Veneza Marco Polo',
              tr: 'Venedik Marco Polo Havaalanı',
              ru: 'Аэропорт Венеция Марко Поло',
              zh: '威尼斯马可波罗机场',
              ar: 'مطار البندقية ماركو بولو',
            },
            ITNAS_AIR: {
              en: 'Naples Airport',
              fr: 'Aéroport de Naples',
              de: 'Flughafen Neapel',
              es: 'Aeropuerto de Nápoles',
              it: 'Aeroporto di Napoli',
              nl: 'Luchthaven Napels',
              pt: 'Aeroporto de Nápoles',
              tr: 'Napoli Havaalanı',
              ru: 'Аэропорт Неаполь',
              zh: '那不勒斯机场',
              ar: 'مطار نابولي',
            },
            ITROM_RAIL: {
              en: 'Roma Termini Station',
              fr: 'Gare de Roma Termini',
              de: 'Bahnhof Roma Termini',
              es: 'Estación Roma Termini',
              it: 'Stazione Roma Termini',
              nl: 'Station Roma Termini',
              pt: 'Estação Roma Termini',
              tr: 'Roma Termini İstasyonu',
              ru: 'Вокзал Рома Термини',
              zh: '罗马特米尼车站',
              ar: 'محطة روما تيرميني',
            },
            ITMIL_RAIL: {
              en: 'Milano Centrale Station',
              fr: 'Gare Milano Centrale',
              de: 'Bahnhof Milano Centrale',
              es: 'Estación Milano Centrale',
              it: 'Stazione Milano Centrale',
              nl: 'Station Milano Centrale',
              pt: 'Estação Milano Centrale',
              tr: 'Milano Centrale İstasyonu',
              ru: 'Вокзал Милано Чентрале',
              zh: '米兰中央车站',
              ar: 'محطة ميلانو تشنترالي',
            },
            ITVEN_RAIL: {
              en: 'Venezia Santa Lucia Station',
              fr: 'Gare Venezia Santa Lucia',
              de: 'Bahnhof Venezia Santa Lucia',
              es: 'Estación Venezia Santa Lucia',
              it: 'Stazione Venezia Santa Lucia',
              nl: 'Station Venezia Santa Lucia',
              pt: 'Estação Venezia Santa Lucia',
              tr: 'Venezia Santa Lucia İstasyonu',
              ru: 'Вокзал Венеция Санта-Лючия',
              zh: '威尼斯圣露西亚车站',
              ar: 'محطة البندقية سانتا لوتشيا',
            },
            INJNP: {
              en: 'Jawaharlal Nehru Port',
              fr: 'Port de Jawaharlal Nehru',
              de: 'Hafen Jawaharlal Nehru',
              es: 'Puerto de Jawaharlal Nehru',
              it: 'Porto di Jawaharlal Nehru',
              nl: 'Haven van Jawaharlal Nehru',
              pt: 'Porto de Jawaharlal Nehru',
              tr: 'Jawaharlal Nehru Limanı',
              ru: 'Порт Джавахарлал Неру',
              zh: '贾瓦哈拉尔尼赫鲁港',
              ar: 'ميناء جواهرلال نهرو',
            },
            INMUN: {
              en: 'Port of Mumbai',
              fr: 'Port de Mumbai',
              de: 'Hafen Mumbai',
              es: 'Puerto de Mumbai',
              it: 'Porto di Mumbai',
              nl: 'Haven van Mumbai',
              pt: 'Porto de Mumbai',
              tr: 'Mumbai Limanı',
              ru: 'Порт Мумбаи',
              zh: '孟买港',
              ar: 'ميناء مومباي',
            },
            INCHE: {
              en: 'Port of Chennai',
              fr: 'Port de Chennai',
              de: 'Hafen Chennai',
              es: 'Puerto de Chennai',
              it: 'Porto di Chennai',
              nl: 'Haven van Chennai',
              pt: 'Porto de Chennai',
              tr: 'Chennai Limanı',
              ru: 'Порт Ченнаи',
              zh: '钦奈港',
              ar: 'ميناء تشيناي',
            },
            INCOK: {
              en: 'Port of Cochin',
              fr: 'Port de Cochin',
              de: 'Hafen Cochin',
              es: 'Puerto de Cochín',
              it: 'Porto di Cochin',
              nl: 'Haven van Cochin',
              pt: 'Porto de Cochim',
              tr: 'Cochin Limanı',
              ru: 'Порт Кочин',
              zh: '科钦港',
              ar: 'ميناء كوتشين',
            },
            INDEL: {
              en: 'Delhi Indira Gandhi International Airport',
              fr: 'Aéroport international de Delhi Indira Gandhi',
              de: 'Internationaler Flughafen Delhi Indira Gandhi',
              es: 'Aeropuerto Internacional de Delhi Indira Gandhi',
              it: 'Aeroporto Internazionale di Delhi Indira Gandhi',
              nl: 'Internationale Luchthaven Delhi Indira Gandhi',
              pt: 'Aeroporto Internacional de Delhi Indira Gandhi',
              tr: 'Delhi Indira Gandhi Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дели Индира Ганди',
              zh: '德里英迪拉·甘地国际机场',
              ar: 'مطار دلهي إنديرا غاندي الدولي',
            },
            INMUN_AIR: {
              en: 'Mumbai Chhatrapati Shivaji Maharaj International Airport',
              fr: 'Aéroport international de Mumbai Chhatrapati Shivaji Maharaj',
              de: 'Internationaler Flughafen Mumbai Chhatrapati Shivaji Maharaj',
              es: 'Aeropuerto Internacional de Mumbai Chhatrapati Shivaji Maharaj',
              it: 'Aeroporto Internazionale di Mumbai Chhatrapati Shivaji Maharaj',
              nl: 'Internationale Luchthaven Mumbai Chhatrapati Shivaji Maharaj',
              pt: 'Aeroporto Internacional de Mumbai Chhatrapati Shivaji Maharaj',
              tr: 'Mumbai Chhatrapati Shivaji Maharaj Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мумбаи Чхатрапати Шиваджи Махарадж',
              zh: '孟买贾特拉帕蒂·希瓦吉·马哈拉杰国际机场',
              ar: 'مطار مومباي تشاتراباتي شيفاجي ماهاراج الدولي',
            },
            INBLR: {
              en: 'Bangalore Kempegowda International Airport',
              fr: 'Aéroport international de Bangalore Kempegowda',
              de: 'Internationaler Flughafen Bangalore Kempegowda',
              es: 'Aeropuerto Internacional de Bangalore Kempegowda',
              it: 'Aeroporto Internazionale di Bangalore Kempegowda',
              nl: 'Internationale Luchthaven Bangalore Kempegowda',
              pt: 'Aeroporto Internacional de Bangalore Kempegowda',
              tr: 'Bangalore Kempegowda Uluslararası Havaalanı',
              ru: 'Международный аэропорт Бангалор Кемпегоуда',
              zh: '班加罗尔肯佩戈达国际机场',
              ar: 'مطار بنغالور كيمبيغودا الدولي',
            },
            INCHE_AIR: {
              en: 'Chennai International Airport',
              fr: 'Aéroport international de Chennai',
              de: 'Internationaler Flughafen Chennai',
              es: 'Aeropuerto Internacional de Chennai',
              it: 'Aeroporto Internazionale di Chennai',
              nl: 'Internationale Luchthaven Chennai',
              pt: 'Aeroporto Internacional de Chennai',
              tr: 'Chennai Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ченнаи',
              zh: '钦奈国际机场',
              ar: 'مطار تشيناي الدولي',
            },
            IEDUB: {
              en: 'Port of Dublin',
              fr: 'Port de Dublin',
              de: 'Hafen Dublin',
              es: 'Puerto de Dublín',
              it: 'Porto di Dublino',
              nl: 'Haven van Dublin',
              pt: 'Porto de Dublin',
              tr: 'Dublin Limanı',
              ru: 'Порт Дублин',
              zh: '都柏林港',
              ar: 'ميناء دبلن',
            },
            IECOR: {
              en: 'Port of Cork',
              fr: 'Port de Cork',
              de: 'Hafen Cork',
              es: 'Puerto de Cork',
              it: 'Porto di Cork',
              nl: 'Haven van Cork',
              pt: 'Porto de Cork',
              tr: 'Cork Limanı',
              ru: 'Порт Корк',
              zh: '科克港',
              ar: 'ميناء كورك',
            },
            IEDUB_AIR: {
              en: 'Dublin Airport',
              fr: 'Aéroport de Dublin',
              de: 'Flughafen Dublin',
              es: 'Aeropuerto de Dublín',
              it: 'Aeroporto di Dublino',
              nl: 'Luchthaven Dublin',
              pt: 'Aeroporto de Dublin',
              tr: 'Dublin Havaalanı',
              ru: 'Аэропорт Дублин',
              zh: '都柏林机场',
              ar: 'مطار دبلن',
            },
            IECOR_AIR: {
              en: 'Cork Airport',
              fr: 'Aéroport de Cork',
              de: 'Flughafen Cork',
              es: 'Aeropuerto de Cork',
              it: 'Aeroporto di Cork',
              nl: 'Luchthaven Cork',
              pt: 'Aeroporto de Cork',
              tr: 'Cork Havaalanı',
              ru: 'Аэропорт Корк',
              zh: '科克机场',
              ar: 'مطار كورك',
            },
            IEDUB_RAIL: {
              en: 'Dublin Heuston Station',
              fr: 'Gare de Dublin Heuston',
              de: 'Bahnhof Dublin Heuston',
              es: 'Estación de Dublín Heuston',
              it: 'Stazione di Dublino Heuston',
              nl: 'Station Dublin Heuston',
              pt: 'Estação de Dublin Heuston',
              tr: 'Dublin Heuston İstasyonu',
              ru: 'Вокзал Дублин Хьюстон',
              zh: '都柏林休斯顿车站',
              ar: 'محطة دبلن هيوستن',
            },
            IDJKT: {
              en: 'Jakarta Tanjung Priok Port',
              fr: 'Port de Jakarta Tanjung Priok',
              de: 'Hafen Jakarta Tanjung Priok',
              es: 'Puerto de Jakarta Tanjung Priok',
              it: 'Porto di Jakarta Tanjung Priok',
              nl: 'Haven van Jakarta Tanjung Priok',
              pt: 'Porto de Jakarta Tanjung Priok',
              tr: 'Jakarta Tanjung Priok Limanı',
              ru: 'Порт Джакарта Танджунг Приок',
              zh: '雅加达丹戎不碌港',
              ar: 'ميناء جاكرتا تانجونغ بريوك',
            },
            IDSUB: {
              en: 'Port of Surabaya',
              fr: 'Port de Surabaya',
              de: 'Hafen Surabaya',
              es: 'Puerto de Surabaya',
              it: 'Porto di Surabaya',
              nl: 'Haven van Surabaya',
              pt: 'Porto de Surabaya',
              tr: 'Surabaya Limanı',
              ru: 'Порт Сурабая',
              zh: '泗水港',
              ar: 'ميناء سورابايا',
            },
            IDBLW: {
              en: 'Belawan Medan Port',
              fr: 'Port de Belawan Medan',
              de: 'Hafen Belawan Medan',
              es: 'Puerto de Belawan Medan',
              it: 'Porto di Belawan Medan',
              nl: 'Haven van Belawan Medan',
              pt: 'Porto de Belawan Medan',
              tr: 'Belawan Medan Limanı',
              ru: 'Порт Белаван Медан',
              zh: '勿拉湾棉兰港',
              ar: 'ميناء بيلاوان ميدان',
            },
            IDJKT_AIR: {
              en: 'Jakarta Soekarno-Hatta International Airport',
              fr: 'Aéroport international de Jakarta Soekarno-Hatta',
              de: 'Internationaler Flughafen Jakarta Soekarno-Hatta',
              es: 'Aeropuerto Internacional de Jakarta Soekarno-Hatta',
              it: 'Aeroporto Internazionale di Jakarta Soekarno-Hatta',
              nl: 'Internationale Luchthaven Jakarta Soekarno-Hatta',
              pt: 'Aeroporto Internacional de Jakarta Soekarno-Hatta',
              tr: 'Jakarta Soekarno-Hatta Uluslararası Havaalanı',
              ru: 'Международный аэропорт Джакарта Сукарно-Хатта',
              zh: '雅加达苏加诺-哈达国际机场',
              ar: 'مطار جاكرتا سوكارنو-هاتا الدولي',
            },
            IDSUB_AIR: {
              en: 'Surabaya Juanda International Airport',
              fr: 'Aéroport international de Surabaya Juanda',
              de: 'Internationaler Flughafen Surabaya Juanda',
              es: 'Aeropuerto Internacional de Surabaya Juanda',
              it: 'Aeroporto Internazionale di Surabaya Juanda',
              nl: 'Internationale Luchthaven Surabaya Juanda',
              pt: 'Aeroporto Internacional de Surabaya Juanda',
              tr: 'Surabaya Juanda Uluslararası Havaalanı',
              ru: 'Международный аэропорт Сурабая Джуанда',
              zh: '泗水朱安达国际机场',
              ar: 'مطار سورابايا جواندا الدولي',
            },
            IDMED_AIR: {
              en: 'Medan Kualanamu International Airport',
              fr: 'Aéroport international de Medan Kualanamu',
              de: 'Internationaler Flughafen Medan Kualanamu',
              es: 'Aeropuerto Internacional de Medan Kualanamu',
              it: 'Aeroporto Internazionale di Medan Kualanamu',
              nl: 'Internationale Luchthaven Medan Kualanamu',
              pt: 'Aeroporto Internacional de Medan Kualanamu',
              tr: 'Medan Kualanamu Uluslararası Havaalanı',
              ru: 'Международный аэропорт Медан Куаланаму',
              zh: '棉兰瓜拉纳木国际机场',
              ar: 'مطار ميدان كوالانامو الدولي',
            },
            ILHFA: {
              en: 'Port of Haifa',
              fr: 'Port de Haïfa',
              de: 'Hafen Haifa',
              es: 'Puerto de Haifa',
              it: 'Porto di Haifa',
              nl: 'Haven van Haifa',
              pt: 'Porto de Haifa',
              tr: 'Hayfa Limanı',
              ru: 'Порт Хайфа',
              zh: '海法港',
              ar: 'ميناء حيفا',
            },
            ILASD: {
              en: 'Port of Ashdod',
              fr: "Port d'Ashdod",
              de: 'Hafen Ashdod',
              es: 'Puerto de Ashdod',
              it: 'Porto di Ashdod',
              nl: 'Haven van Ashdod',
              pt: 'Porto de Ashdod',
              tr: 'Aşdod Limanı',
              ru: 'Порт Ашдод',
              zh: '阿什杜德港',
              ar: 'ميناء أشدود',
            },
            ILEIL: {
              en: 'Port of Eilat',
              fr: "Port d'Eilat",
              de: 'Hafen Eilat',
              es: 'Puerto de Eilat',
              it: 'Porto di Eilat',
              nl: 'Haven van Eilat',
              pt: 'Porto de Eilat',
              tr: 'Eylat Limanı',
              ru: 'Порт Эйлат',
              zh: '埃拉特港',
              ar: 'ميناء إيلات',
            },
            ILTLV: {
              en: 'Tel Aviv Ben Gurion Airport',
              fr: 'Aéroport de Tel Aviv Ben Gurion',
              de: 'Flughafen Tel Aviv Ben Gurion',
              es: 'Aeropuerto de Tel Aviv Ben Gurion',
              it: 'Aeroporto di Tel Aviv Ben Gurion',
              nl: 'Luchthaven Tel Aviv Ben Gurion',
              pt: 'Aeroporto de Tel Aviv Ben Gurion',
              tr: 'Tel Aviv Ben Gurion Havaalanı',
              ru: 'Аэропорт Тель-Авив Бен-Гурион',
              zh: '特拉维夫本-古里安机场',
              ar: 'مطار تل أبيب بن غوريون',
            },
            ILHFA_AIR: {
              en: 'Haifa Airport',
              fr: 'Aéroport de Haïfa',
              de: 'Flughafen Haifa',
              es: 'Aeropuerto de Haifa',
              it: 'Aeroporto di Haifa',
              nl: 'Luchthaven Haifa',
              pt: 'Aeroporto de Haifa',
              tr: 'Hayfa Havaalanı',
              ru: 'Аэропорт Хайфа',
              zh: '海法机场',
              ar: 'مطار حيفا',
            },
            IRBND: {
              en: 'Port of Bandar Abbas',
              fr: 'Port de Bandar Abbas',
              de: 'Hafen Bandar Abbas',
              es: 'Puerto de Bandar Abbas',
              it: 'Porto di Bandar Abbas',
              nl: 'Haven van Bandar Abbas',
              pt: 'Porto de Bandar Abbas',
              tr: 'Bandar Abbas Limanı',
              ru: 'Порт Бендер-Аббас',
              zh: '阿巴斯港',
              ar: 'ميناء بندر عباس',
            },
            IRIMAM: {
              en: 'Imam Khomeini Port',
              fr: "Port d'Imam Khomeini",
              de: 'Hafen Imam Khomeini',
              es: 'Puerto de Imam Jomeini',
              it: 'Porto di Imam Khomeini',
              nl: 'Haven van Imam Khomeini',
              pt: 'Porto de Imam Khomeini',
              tr: 'İmam Humeyni Limanı',
              ru: 'Порт Имам Хомейни',
              zh: '伊玛目霍梅尼港',
              ar: 'ميناء الإمام الخميني',
            },
            IRBZG: {
              en: 'Port of Bushehr',
              fr: 'Port de Bushehr',
              de: 'Hafen Bushehr',
              es: 'Puerto de Bushehr',
              it: 'Porto di Bushehr',
              nl: 'Haven van Bushehr',
              pt: 'Porto de Bushehr',
              tr: 'Buşehr Limanı',
              ru: 'Порт Бушер',
              zh: '布什尔港',
              ar: 'ميناء بوشهر',
            },
            IRIKU: {
              en: 'Tehran Imam Khomeini International Airport',
              fr: 'Aéroport international de Téhéran Imam Khomeini',
              de: 'Internationaler Flughafen Teheran Imam Khomeini',
              es: 'Aeropuerto Internacional de Teherán Imam Jomeini',
              it: 'Aeroporto Internazionale di Teheran Imam Khomeini',
              nl: 'Internationale Luchthaven Teheran Imam Khomeini',
              pt: 'Aeroporto Internacional de Teerã Imam Khomeini',
              tr: 'Tahran İmam Humeyni Uluslararası Havaalanı',
              ru: 'Международный аэропорт Тегеран Имам Хомейни',
              zh: '德黑兰伊玛目霍梅尼国际机场',
              ar: 'مطار طهران الإمام الخميني الدولي',
            },
            IRMHD: {
              en: 'Mashhad Airport',
              fr: 'Aéroport de Mashhad',
              de: 'Flughafen Mashhad',
              es: 'Aeropuerto de Mashhad',
              it: 'Aeroporto di Mashhad',
              nl: 'Luchthaven Mashhad',
              pt: 'Aeroporto de Mashhad',
              tr: 'Meşhed Havaalanı',
              ru: 'Аэропорт Мешхед',
              zh: '马什哈德机场',
              ar: 'مطار مشهد',
            },
            IRTEH_RAIL: {
              en: 'Tehran Railway Station',
              fr: 'Gare de Téhéran',
              de: 'Bahnhof Teheran',
              es: 'Estación de Teherán',
              it: 'Stazione di Teheran',
              nl: 'Station Teheran',
              pt: 'Estação de Teerã',
              tr: 'Tahran Tren İstasyonu',
              ru: 'Железнодорожная станция Тегеран',
              zh: '德黑兰火车站',
              ar: 'محطة طهران للسكك الحديدية',
            },
            IRISF_RAIL: {
              en: 'Isfahan Railway Station',
              fr: "Gare d'Isfahan",
              de: 'Bahnhof Isfahan',
              es: 'Estación de Isfahan',
              it: 'Stazione di Isfahan',
              nl: 'Station Isfahan',
              pt: 'Estação de Isfahan',
              tr: 'Isfahan Tren İstasyonu',
              ru: 'Железнодорожная станция Исфахан',
              zh: '伊斯法罕火车站',
              ar: 'محطة أصفهان للسكك الحديدية',
            },
            ISAKR: {
              en: 'Port of Akranes',
              fr: "Port d'Akranes",
              de: 'Hafen Akranes',
              es: 'Puerto de Akranes',
              it: 'Porto di Akranes',
              nl: 'Haven van Akranes',
              pt: 'Porto de Akranes',
              tr: 'Akranes Limanı',
              ru: 'Порт Акранес',
              zh: '阿克拉内斯港',
              ar: 'ميناء أكرانيس',
            },
            ISREY_AIR: {
              en: 'Reykjavik Airport',
              fr: 'Aéroport de Reykjavik',
              de: 'Flughafen Reykjavik',
              es: 'Aeropuerto de Reykjavik',
              it: 'Aeroporto di Reykjavik',
              nl: 'Luchthaven Reykjavik',
              pt: 'Aeroporto de Reykjavik',
              tr: 'Reykjavik Havaalanı',
              ru: 'Аэропорт Рейкьявик',
              zh: '雷克雅未克机场',
              ar: 'مطار ريكيافيك',
            },
            JPTYO: {
              en: 'Port of Tokyo',
              fr: 'Port de Tokyo',
              de: 'Hafen Tokio',
              es: 'Puerto de Tokio',
              it: 'Porto di Tokyo',
              nl: 'Haven van Tokyo',
              pt: 'Porto de Tóquio',
              tr: 'Tokyo Limanı',
              ru: 'Порт Токио',
              zh: '东京港',
              ar: 'ميناء طوكيو',
            },
            JPYOK: {
              en: 'Port of Yokohama',
              fr: 'Port de Yokohama',
              de: 'Hafen Yokohama',
              es: 'Puerto de Yokohama',
              it: 'Porto di Yokohama',
              nl: 'Haven van Yokohama',
              pt: 'Porto de Yokohama',
              tr: 'Yokohama Limanı',
              ru: 'Порт Йокогама',
              zh: '横滨港',
              ar: 'ميناء يوكوهاما',
            },
            JPOSA: {
              en: 'Port of Osaka',
              fr: "Port d'Osaka",
              de: 'Hafen Osaka',
              es: 'Puerto de Osaka',
              it: 'Porto di Osaka',
              nl: 'Haven van Osaka',
              pt: 'Porto de Osaka',
              tr: 'Osaka Limanı',
              ru: 'Порт Осака',
              zh: '大阪港',
              ar: 'ميناء أوساكا',
            },
            JPNGO: {
              en: 'Port of Nagoya',
              fr: 'Port de Nagoya',
              de: 'Hafen Nagoya',
              es: 'Puerto de Nagoya',
              it: 'Porto di Nagoya',
              nl: 'Haven van Nagoya',
              pt: 'Porto de Nagoya',
              tr: 'Nagoya Limanı',
              ru: 'Порт Нагоя',
              zh: '名古屋港',
              ar: 'ميناء ناغويا',
            },
            JPKOB: {
              en: 'Port of Kobe',
              fr: 'Port de Kobe',
              de: 'Hafen Kobe',
              es: 'Puerto de Kobe',
              it: 'Porto di Kobe',
              nl: 'Haven van Kobe',
              pt: 'Porto de Kobe',
              tr: 'Kobe Limanı',
              ru: 'Порт Кобе',
              zh: '神户港',
              ar: 'ميناء كوبي',
            },
            JPNRT: {
              en: 'Tokyo Narita International Airport',
              fr: 'Aéroport international de Tokyo Narita',
              de: 'Internationaler Flughafen Tokyo Narita',
              es: 'Aeropuerto Internacional de Tokio Narita',
              it: 'Aeroporto Internazionale di Tokyo Narita',
              nl: 'Internationale Luchthaven Tokyo Narita',
              pt: 'Aeroporto Internacional de Tóquio Narita',
              tr: 'Tokyo Narita Uluslararası Havaalanı',
              ru: 'Международный аэропорт Токио Нарита',
              zh: '东京成田国际机场',
              ar: 'مطار طوكيو ناريتا الدولي',
            },
            JPHND: {
              en: 'Tokyo Haneda Airport',
              fr: 'Aéroport de Tokyo Haneda',
              de: 'Flughafen Tokyo Haneda',
              es: 'Aeropuerto de Tokio Haneda',
              it: 'Aeroporto di Tokyo Haneda',
              nl: 'Luchthaven Tokyo Haneda',
              pt: 'Aeroporto de Tóquio Haneda',
              tr: 'Tokyo Haneda Havaalanı',
              ru: 'Аэропорт Токио Ханеда',
              zh: '东京羽田机场',
              ar: 'مطار طوكيو هانيدا',
            },
            JPKIX: {
              en: 'Osaka Kansai International Airport',
              fr: "Aéroport international d'Osaka Kansai",
              de: 'Internationaler Flughafen Osaka Kansai',
              es: 'Aeropuerto Internacional de Osaka Kansai',
              it: 'Aeroporto Internazionale di Osaka Kansai',
              nl: 'Internationale Luchthaven Osaka Kansai',
              pt: 'Aeroporto Internacional de Osaka Kansai',
              tr: 'Osaka Kansai Uluslararası Havaalanı',
              ru: 'Международный аэропорт Осака Кансай',
              zh: '大阪关西国际机场',
              ar: 'مطار أوساكا كانساي الدولي',
            },
            JPNGO_AIR: {
              en: 'Nagoya Chubu Centrair International Airport',
              fr: 'Aéroport international de Nagoya Chubu Centrair',
              de: 'Internationaler Flughafen Nagoya Chubu Centrair',
              es: 'Aeropuerto Internacional de Nagoya Chubu Centrair',
              it: 'Aeroporto Internazionale di Nagoya Chubu Centrair',
              nl: 'Internationale Luchthaven Nagoya Chubu Centrair',
              pt: 'Aeroporto Internacional de Nagoya Chubu Centrair',
              tr: 'Nagoya Chubu Centrair Uluslararası Havaalanı',
              ru: 'Международный аэропорт Нагоя Чубу Центрэйр',
              zh: '名古屋中部国际机场',
              ar: 'مطار ناغويا تشوبو سنترير الدولي',
            },
            JPTYO_RAIL: {
              en: 'Tokyo Station',
              fr: 'Gare de Tokyo',
              de: 'Bahnhof Tokyo',
              es: 'Estación de Tokio',
              it: 'Stazione di Tokyo',
              nl: 'Station Tokyo',
              pt: 'Estação de Tóquio',
              tr: 'Tokyo İstasyonu',
              ru: 'Вокзал Токио',
              zh: '东京站',
              ar: 'محطة طوكيو',
            },
            JPOSA_RAIL: {
              en: 'Osaka Station',
              fr: "Gare d'Osaka",
              de: 'Bahnhof Osaka',
              es: 'Estación de Osaka',
              it: 'Stazione di Osaka',
              nl: 'Station Osaka',
              pt: 'Estação de Osaka',
              tr: 'Osaka İstasyonu',
              ru: 'Вокзал Осака',
              zh: '大阪站',
              ar: 'محطة أوساكا',
            },
            JPNGO_RAIL: {
              en: 'Nagoya Station',
              fr: 'Gare de Nagoya',
              de: 'Bahnhof Nagoya',
              es: 'Estación de Nagoya',
              it: 'Stazione di Nagoya',
              nl: 'Station Nagoya',
              pt: 'Estação de Nagoya',
              tr: 'Nagoya İstasyonu',
              ru: 'Вокзал Нагоя',
              zh: '名古屋站',
              ar: 'محطة ناغويا',
            },
            JOAQJ: {
              en: 'Port of Aqaba',
              fr: "Port d'Aqaba",
              de: 'Hafen Aqaba',
              es: 'Puerto de Aqaba',
              it: 'Porto di Aqaba',
              nl: 'Haven van Aqaba',
              pt: 'Porto de Aqaba',
              tr: 'Akabe Limanı',
              ru: 'Порт Акаба',
              zh: '亚喀巴港',
              ar: 'ميناء العقبة',
            },
            JOAMM: {
              en: 'Amman Queen Alia International Airport',
              fr: "Aéroport international d'Amman Queen Alia",
              de: 'Internationaler Flughafen Amman Queen Alia',
              es: 'Aeropuerto Internacional de Ammán Queen Alia',
              it: 'Aeroporto Internazionale di Amman Queen Alia',
              nl: 'Internationale Luchthaven Amman Queen Alia',
              pt: 'Aeroporto Internacional de Amã Queen Alia',
              tr: 'Amman Queen Alia Uluslararası Havaalanı',
              ru: 'Международный аэропорт Амман имени королевы Алии',
              zh: '安曼阿丽娅王后国际机场',
              ar: 'مطار عمان الملكة علياء الدولي',
            },
            JOAQJ_AIR: {
              en: 'Aqaba King Hussein International Airport',
              fr: "Aéroport international d'Aqaba King Hussein",
              de: 'Internationaler Flughafen Aqaba King Hussein',
              es: 'Aeropuerto Internacional de Aqaba King Hussein',
              it: 'Aeroporto Internazionale di Aqaba King Hussein',
              nl: 'Internationale Luchthaven Aqaba King Hussein',
              pt: 'Aeroporto Internacional de Aqaba King Hussein',
              tr: 'Akabe King Hussein Uluslararası Havaalanı',
              ru: 'Международный аэропорт Акаба имени короля Хусейна',
              zh: '亚喀巴胡塞因国王国际机场',
              ar: 'مطار العقبة الملك الحسين الدولي',
            },
            JMKIN: {
              en: 'Port of Kingston',
              fr: 'Port de Kingston',
              de: 'Hafen Kingston',
              es: 'Puerto de Kingston',
              it: 'Porto di Kingston',
              nl: 'Haven van Kingston',
              pt: 'Porto de Kingston',
              tr: 'Kingston Limanı',
              ru: 'Порт Кингстон',
              zh: '金斯敦港',
              ar: 'ميناء كينغستون',
            },
            JMMBY: {
              en: 'Port of Montego Bay',
              fr: 'Port de Montego Bay',
              de: 'Hafen Montego Bay',
              es: 'Puerto de Montego Bay',
              it: 'Porto di Montego Bay',
              nl: 'Haven van Montego Bay',
              pt: 'Porto de Montego Bay',
              tr: 'Montego Bay Limanı',
              ru: 'Порт Монтего-Бей',
              zh: '蒙特哥贝港',
              ar: 'ميناء مونتيغو باي',
            },
            JMKIN_AIR: {
              en: 'Kingston Norman Manley International Airport',
              fr: 'Aéroport international de Kingston Norman Manley',
              de: 'Internationaler Flughafen Kingston Norman Manley',
              es: 'Aeropuerto Internacional de Kingston Norman Manley',
              it: 'Aeroporto Internazionale di Kingston Norman Manley',
              nl: 'Internationale Luchthaven Kingston Norman Manley',
              pt: 'Aeroporto Internacional de Kingston Norman Manley',
              tr: 'Kingston Norman Manley Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кингстон Норман Мэнли',
              zh: '金斯敦诺曼·曼利国际机场',
              ar: 'مطار كينغستون نورمان مانلي الدولي',
            },
            JMMBY_AIR: {
              en: 'Montego Bay Sangster International Airport',
              fr: 'Aéroport international de Montego Bay Sangster',
              de: 'Internationaler Flughafen Montego Bay Sangster',
              es: 'Aeropuerto Internacional de Montego Bay Sangster',
              it: 'Aeroporto Internazionale di Montego Bay Sangster',
              nl: 'Internationale Luchthaven Montego Bay Sangster',
              pt: 'Aeroporto Internacional de Montego Bay Sangster',
              tr: 'Montego Bay Sangster Uluslararası Havaalanı',
              ru: 'Международный аэропорт Монтего-Бей Сангстер',
              zh: '蒙特哥贝桑斯特国际机场',
              ar: 'مطار مونتيغو باي سانغستر الدولي',
            },
            KRPUS: {
              en: 'Port of Busan',
              fr: 'Port de Busan',
              de: 'Hafen Busan',
              es: 'Puerto de Busan',
              it: 'Porto di Busan',
              nl: 'Haven van Busan',
              pt: 'Porto de Busan',
              tr: 'Busan Limanı',
              ru: 'Порт Пусан',
              zh: '釜山港',
              ar: 'ميناء بوسان',
            },
            KRICN: {
              en: 'Port of Incheon',
              fr: "Port d'Incheon",
              de: 'Hafen Incheon',
              es: 'Puerto de Incheon',
              it: 'Porto di Incheon',
              nl: 'Haven van Incheon',
              pt: 'Porto de Incheon',
              tr: 'Incheon Limanı',
              ru: 'Порт Инчхон',
              zh: '仁川港',
              ar: 'ميناء إنشيون',
            },
            KRULZ: {
              en: 'Port of Ulsan',
              fr: "Port d'Ulsan",
              de: 'Hafen Ulsan',
              es: 'Puerto de Ulsan',
              it: 'Porto di Ulsan',
              nl: 'Haven van Ulsan',
              pt: 'Porto de Ulsan',
              tr: 'Ulsan Limanı',
              ru: 'Порт Ульсан',
              zh: '蔚山港',
              ar: 'ميناء أولسان',
            },
            KRICN_AIR: {
              en: 'Incheon International Airport',
              fr: "Aéroport international d'Incheon",
              de: 'Internationaler Flughafen Incheon',
              es: 'Aeropuerto Internacional de Incheon',
              it: 'Aeroporto Internazionale di Incheon',
              nl: 'Internationale Luchthaven Incheon',
              pt: 'Aeroporto Internacional de Incheon',
              tr: 'Incheon Uluslararası Havaalanı',
              ru: 'Международный аэропорт Инчхон',
              zh: '仁川国际机场',
              ar: 'مطار إنشيون الدولي',
            },
            KRGMP: {
              en: 'Gimpo Airport',
              fr: 'Aéroport de Gimpo',
              de: 'Flughafen Gimpo',
              es: 'Aeropuerto de Gimpo',
              it: 'Aeroporto di Gimpo',
              nl: 'Luchthaven Gimpo',
              pt: 'Aeroporto de Gimpo',
              tr: 'Gimpo Havaalanı',
              ru: 'Аэропорт Кимпо',
              zh: '金浦机场',
              ar: 'مطار جيمبو',
            },
            KRPUS_AIR: {
              en: 'Busan Gimhae International Airport',
              fr: 'Aéroport international de Busan Gimhae',
              de: 'Internationaler Flughafen Busan Gimhae',
              es: 'Aeropuerto Internacional de Busan Gimhae',
              it: 'Aeroporto Internazionale di Busan Gimhae',
              nl: 'Internationale Luchthaven Busan Gimhae',
              pt: 'Aeroporto Internacional de Busan Gimhae',
              tr: 'Busan Gimhae Uluslararası Havaalanı',
              ru: 'Международный аэропорт Пусан Кимхэ',
              zh: '釜山金海国际机场',
              ar: 'مطار بوسان جيمهاي الدولي',
            },
            KRSEO_RAIL: {
              en: 'Seoul Station',
              fr: 'Gare de Séoul',
              de: 'Bahnhof Seoul',
              es: 'Estación de Seúl',
              it: 'Stazione di Seoul',
              nl: 'Station Seoul',
              pt: 'Estação de Seul',
              tr: 'Seoul İstasyonu',
              ru: 'Вокзал Сеул',
              zh: '首尔站',
              ar: 'محطة سيول',
            },
            KRPUS_RAIL: {
              en: 'Busan Station',
              fr: 'Gare de Busan',
              de: 'Bahnhof Busan',
              es: 'Estación de Busan',
              it: 'Stazione di Busan',
              nl: 'Station Busan',
              pt: 'Estação de Busan',
              tr: 'Busan İstasyonu',
              ru: 'Вокзал Пусан',
              zh: '釜山站',
              ar: 'محطة بوسان',
            },
            KZAKT: {
              en: 'Port of Aktau',
              fr: "Port d'Aktau",
              de: 'Hafen Aktau',
              es: 'Puerto de Aktau',
              it: 'Porto di Aktau',
              nl: 'Haven van Aktau',
              pt: 'Porto de Aktau',
              tr: 'Aktau Limanı',
              ru: 'Порт Актау',
              zh: '阿克套港',
              ar: 'ميناء أكتاو',
            },
            KZALA: {
              en: 'Almaty International Airport',
              fr: "Aéroport international d'Almaty",
              de: 'Internationaler Flughafen Almaty',
              es: 'Aeropuerto Internacional de Almaty',
              it: 'Aeroporto Internazionale di Almaty',
              nl: 'Internationale Luchthaven Almaty',
              pt: 'Aeroporto Internacional de Almaty',
              tr: 'Almatı Uluslararası Havaalanı',
              ru: 'Международный аэропорт Алматы',
              zh: '阿拉木图国际机场',
              ar: 'مطار آلماتي الدولي',
            },
            KZNUR: {
              en: 'Nur-Sultan Nazarbayev International Airport',
              fr: 'Aéroport international de Nur-Sultan Nazarbayev',
              de: 'Internationaler Flughafen Nur-Sultan Nazarbayev',
              es: 'Aeropuerto Internacional de Nur-Sultan Nazarbayev',
              it: 'Aeroporto Internazionale di Nur-Sultan Nazarbayev',
              nl: 'Internationale Luchthaven Nur-Sultan Nazarbayev',
              pt: 'Aeroporto Internacional de Nur-Sultan Nazarbayev',
              tr: 'Nur-Sultan Nazarbayev Uluslararası Havaalanı',
              ru: 'Международный аэропорт Нур-Султан Назарбаев',
              zh: '努尔苏丹纳扎尔巴耶夫国际机场',
              ar: 'مطار نور سلطان نزارباييف الدولي',
            },
            KZALA_RAIL: {
              en: 'Almaty Railway Station',
              fr: "Gare d'Almaty",
              de: 'Bahnhof Almaty',
              es: 'Estación de Almaty',
              it: 'Stazione di Almaty',
              nl: 'Station Almaty',
              pt: 'Estação de Almaty',
              tr: 'Almatı Tren İstasyonu',
              ru: 'Железнодорожная станция Алматы',
              zh: '阿拉木图火车站',
              ar: 'محطة آلماتي للسكك الحديدية',
            },
            KZNUR_RAIL: {
              en: 'Nur-Sultan Railway Station',
              fr: 'Gare de Nur-Sultan',
              de: 'Bahnhof Nur-Sultan',
              es: 'Estación de Nur-Sultan',
              it: 'Stazione di Nur-Sultan',
              nl: 'Station Nur-Sultan',
              pt: 'Estação de Nur-Sultan',
              tr: 'Nur-Sultan Tren İstasyonu',
              ru: 'Железнодорожная станция Нур-Султан',
              zh: '努尔苏丹火车站',
              ar: 'محطة نور سلطان للسكك الحديدية',
            },
            KWKWI: {
              en: 'Port of Kuwait',
              fr: 'Port de Koweït',
              de: 'Hafen Kuwait',
              es: 'Puerto de Kuwait',
              it: 'Porto del Kuwait',
              nl: 'Haven van Koeweit',
              pt: 'Porto do Kuwait',
              tr: 'Kuveyt Limanı',
              ru: 'Порт Кувейт',
              zh: '科威特港',
              ar: 'ميناء الكويت',
            },
            KWSHU: {
              en: 'Port of Shuwaikh',
              fr: 'Port de Shuwaikh',
              de: 'Hafen Shuwaikh',
              es: 'Puerto de Shuwaikh',
              it: 'Porto di Shuwaikh',
              nl: 'Haven van Shuwaikh',
              pt: 'Porto de Shuwaikh',
              tr: 'Şuveyh Limanı',
              ru: 'Порт Шувайх',
              zh: '舒瓦伊赫港',
              ar: 'ميناء الشويخ',
            },
            KWKWI_AIR: {
              en: 'Kuwait International Airport',
              fr: 'Aéroport international du Koweït',
              de: 'Internationaler Flughafen Kuwait',
              es: 'Aeropuerto Internacional de Kuwait',
              it: 'Aeroporto Internazionale del Kuwait',
              nl: 'Internationale Luchthaven Koeweit',
              pt: 'Aeroporto Internacional do Kuwait',
              tr: 'Kuveyt Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кувейт',
              zh: '科威特国际机场',
              ar: 'مطار الكويت الدولي',
            },
            KEMSA: {
              en: 'Port of Mombasa',
              fr: 'Port de Mombasa',
              de: 'Hafen Mombasa',
              es: 'Puerto de Mombasa',
              it: 'Porto di Mombasa',
              nl: 'Haven van Mombasa',
              pt: 'Porto de Mombasa',
              tr: 'Mombasa Limanı',
              ru: 'Порт Момбаса',
              zh: '蒙巴萨港',
              ar: 'ميناء مومباسا',
            },
            KEKIS: {
              en: 'Port of Kisumu',
              fr: 'Port de Kisumu',
              de: 'Hafen Kisumu',
              es: 'Puerto de Kisumu',
              it: 'Porto di Kisumu',
              nl: 'Haven van Kisumu',
              pt: 'Porto de Kisumu',
              tr: 'Kisumu Limanı',
              ru: 'Порт Кисуму',
              zh: '基苏木港',
              ar: 'ميناء كيسومو',
            },
            KENBO: {
              en: 'Nairobi Jomo Kenyatta International Airport',
              fr: 'Aéroport international de Nairobi Jomo Kenyatta',
              de: 'Internationaler Flughafen Nairobi Jomo Kenyatta',
              es: 'Aeropuerto Internacional de Nairobi Jomo Kenyatta',
              it: 'Aeroporto Internazionale di Nairobi Jomo Kenyatta',
              nl: 'Internationale Luchthaven Nairobi Jomo Kenyatta',
              pt: 'Aeroporto Internacional de Nairobi Jomo Kenyatta',
              tr: 'Nairobi Jomo Kenyatta Uluslararası Havaalanı',
              ru: 'Международный аэропорт Найроби Джомо Кениата',
              zh: '内罗毕乔莫·肯雅塔国际机场',
              ar: 'مطار نيروبي جومو كينياتا الدولي',
            },
            KEMSA_AIR: {
              en: 'Mombasa Moi International Airport',
              fr: 'Aéroport international de Mombasa Moi',
              de: 'Internationaler Flughafen Mombasa Moi',
              es: 'Aeropuerto Internacional de Mombasa Moi',
              it: 'Aeroporto Internazionale di Mombasa Moi',
              nl: 'Internationale Luchthaven Mombasa Moi',
              pt: 'Aeroporto Internacional de Mombasa Moi',
              tr: 'Mombasa Moi Uluslararası Havaalanı',
              ru: 'Международный аэропорт Момбаса Мои',
              zh: '蒙巴萨莫伊国际机场',
              ar: 'مطار مومباسا موي الدولي',
            },
            KENBO_RAIL: {
              en: 'Nairobi Railway Station',
              fr: 'Gare de Nairobi',
              de: 'Bahnhof Nairobi',
              es: 'Estación de Nairobi',
              it: 'Stazione di Nairobi',
              nl: 'Station Nairobi',
              pt: 'Estação de Nairobi',
              tr: 'Nairobi Tren İstasyonu',
              ru: 'Железнодорожная станция Найроби',
              zh: '内罗毕火车站',
              ar: 'محطة نيروبي للسكك الحديدية',
            },
            KEMSA_RAIL: {
              en: 'Mombasa Railway Station',
              fr: 'Gare de Mombasa',
              de: 'Bahnhof Mombasa',
              es: 'Estación de Mombasa',
              it: 'Stazione di Mombasa',
              nl: 'Station Mombasa',
              pt: 'Estação de Mombasa',
              tr: 'Mombasa Tren İstasyonu',
              ru: 'Железнодорожная станция Момбаса',
              zh: '蒙巴萨火车站',
              ar: 'محطة مومباسا للسكك الحديدية',
            },
            LKCMB: {
              en: 'Port of Colombo',
              fr: 'Port de Colombo',
              de: 'Hafen Colombo',
              es: 'Puerto de Colombo',
              it: 'Porto di Colombo',
              nl: 'Haven van Colombo',
              pt: 'Porto de Colombo',
              tr: 'Kolombo Limanı',
              ru: 'Порт Коломбо',
              zh: '科伦坡港',
              ar: 'ميناء كولومبو',
            },
            LKHMS: {
              en: 'Port of Hambantota',
              fr: 'Port de Hambantota',
              de: 'Hafen Hambantota',
              es: 'Puerto de Hambantota',
              it: 'Porto di Hambantota',
              nl: 'Haven van Hambantota',
              pt: 'Porto de Hambantota',
              tr: 'Hambantota Limanı',
              ru: 'Порт Хамбантота',
              zh: '汉班托塔港',
              ar: 'ميناء هامبانتوتا',
            },
            LKCMB_AIR: {
              en: 'Colombo Bandaranaike International Airport',
              fr: 'Aéroport international de Colombo Bandaranaike',
              de: 'Internationaler Flughafen Colombo Bandaranaike',
              es: 'Aeropuerto Internacional de Colombo Bandaranaike',
              it: 'Aeroporto Internazionale di Colombo Bandaranaike',
              nl: 'Internationale Luchthaven Colombo Bandaranaike',
              pt: 'Aeroporto Internacional de Colombo Bandaranaike',
              tr: 'Kolombo Bandaranaike Uluslararası Havaalanı',
              ru: 'Международный аэропорт Коломбо Бандаранаике',
              zh: '科伦坡班达拉奈克国际机场',
              ar: 'مطار كولومبو بانداراناياكا الدولي',
            },
            LBBEY: {
              en: 'Port of Beirut',
              fr: 'Port de Beyrouth',
              de: 'Hafen Beirut',
              es: 'Puerto de Beirut',
              it: 'Porto di Beirut',
              nl: 'Haven van Beiroet',
              pt: 'Porto de Beirute',
              tr: 'Beyrut Limanı',
              ru: 'Порт Бейрут',
              zh: '贝鲁特港',
              ar: 'ميناء بيروت',
            },
            LBTRI: {
              en: 'Port of Tripoli',
              fr: 'Port de Tripoli',
              de: 'Hafen Tripoli',
              es: 'Puerto de Trípoli',
              it: 'Porto di Tripoli',
              nl: 'Haven van Tripoli',
              pt: 'Porto de Trípoli',
              tr: 'Trablusşam Limanı',
              ru: 'Порт Триполи',
              zh: '的黎波里港',
              ar: 'ميناء طرابلس',
            },
            LBBEY_AIR: {
              en: 'Beirut Rafic Hariri International Airport',
              fr: 'Aéroport international de Beyrouth Rafic Hariri',
              de: 'Internationaler Flughafen Beirut Rafic Hariri',
              es: 'Aeropuerto Internacional de Beirut Rafic Hariri',
              it: 'Aeroporto Internazionale di Beirut Rafic Hariri',
              nl: 'Internationale Luchthaven Beiroet Rafic Hariri',
              pt: 'Aeroporto Internacional de Beirute Rafic Hariri',
              tr: 'Beyrut Refik Hariri Uluslararası Havaalanı',
              ru: 'Международный аэропорт Бейрут Рафика Харири',
              zh: '贝鲁特拉菲克·哈里里国际机场',
              ar: 'مطار بيروت رفيق الحريري الدولي',
            },
            LTKLA: {
              en: 'Port of Klaipeda',
              fr: 'Port de Klaipeda',
              de: 'Hafen Klaipeda',
              es: 'Puerto de Klaipeda',
              it: 'Porto di Klaipeda',
              nl: 'Haven van Klaipeda',
              pt: 'Porto de Klaipeda',
              tr: 'Klaipeda Limanı',
              ru: 'Порт Клайпеда',
              zh: '克莱佩达港',
              ar: 'ميناء كلايبيدا',
            },
            LTVIL: {
              en: 'Vilnius Airport',
              fr: 'Aéroport de Vilnius',
              de: 'Flughafen Vilnius',
              es: 'Aeropuerto de Vilnius',
              it: 'Aeroporto di Vilnius',
              nl: 'Luchthaven Vilnius',
              pt: 'Aeroporto de Vilnius',
              tr: 'Vilnius Havaalanı',
              ru: 'Аэропорт Вильнюс',
              zh: '维尔纽斯机场',
              ar: 'مطار فيلنيوس',
            },
            LTKUN: {
              en: 'Kaunas Airport',
              fr: 'Aéroport de Kaunas',
              de: 'Flughafen Kaunas',
              es: 'Aeropuerto de Kaunas',
              it: 'Aeroporto di Kaunas',
              nl: 'Luchthaven Kaunas',
              pt: 'Aeroporto de Kaunas',
              tr: 'Kaunas Havaalanı',
              ru: 'Аэропорт Каунас',
              zh: '考纳斯机场',
              ar: 'مطار كاوناس',
            },
            LTVIL_RAIL: {
              en: 'Vilnius Railway Station',
              fr: 'Gare de Vilnius',
              de: 'Bahnhof Vilnius',
              es: 'Estación de Vilnius',
              it: 'Stazione di Vilnius',
              nl: 'Station Vilnius',
              pt: 'Estação de Vilnius',
              tr: 'Vilnius Tren İstasyonu',
              ru: 'Железнодорожная станция Вильнюс',
              zh: '维尔纽斯火车站',
              ar: 'محطة فيلنيوس للسكك الحديدية',
            },
            LTKLA_RAIL: {
              en: 'Klaipeda Railway Station',
              fr: 'Gare de Klaipeda',
              de: 'Bahnhof Klaipeda',
              es: 'Estación de Klaipeda',
              it: 'Stazione di Klaipeda',
              nl: 'Station Klaipeda',
              pt: 'Estação de Klaipeda',
              tr: 'Klaipeda Tren İstasyonu',
              ru: 'Железнодорожная станция Клайпеда',
              zh: '克莱佩达火车站',
              ar: 'محطة كلايبيدا للسكك الحديدية',
            },
            LVRIX: {
              en: 'Port of Riga',
              fr: 'Port de Riga',
              de: 'Hafen Riga',
              es: 'Puerto de Riga',
              it: 'Porto di Riga',
              nl: 'Haven van Riga',
              pt: 'Porto de Riga',
              tr: 'Riga Limanı',
              ru: 'Порт Рига',
              zh: '里加港',
              ar: 'ميناء ريغا',
            },
            LVVEN: {
              en: 'Port of Ventspils',
              fr: 'Port de Ventspils',
              de: 'Hafen Ventspils',
              es: 'Puerto de Ventspils',
              it: 'Porto di Ventspils',
              nl: 'Haven van Ventspils',
              pt: 'Porto de Ventspils',
              tr: 'Ventspils Limanı',
              ru: 'Порт Вентспилс',
              zh: '文茨皮尔斯港',
              ar: 'ميناء فينتسبيلس',
            },
            LVRIX_AIR: {
              en: 'Riga Airport',
              fr: 'Aéroport de Riga',
              de: 'Flughafen Riga',
              es: 'Aeropuerto de Riga',
              it: 'Aeroporto di Riga',
              nl: 'Luchthaven Riga',
              pt: 'Aeroporto de Riga',
              tr: 'Riga Havaalanı',
              ru: 'Аэропорт Рига',
              zh: '里加机场',
              ar: 'مطار ريغا',
            },
            LVRIX_RAIL: {
              en: 'Riga Central Station',
              fr: 'Gare centrale de Riga',
              de: 'Hauptbahnhof Riga',
              es: 'Estación Central de Riga',
              it: 'Stazione Centrale di Riga',
              nl: 'Centraal Station Riga',
              pt: 'Estação Central de Riga',
              tr: 'Riga Merkez İstasyonu',
              ru: 'Центральный вокзал Рига',
              zh: '里加中央车站',
              ar: 'محطة ريغا المركزية',
            },
            LULUX_RAIL: {
              en: 'Luxembourg Central Station',
              fr: 'Gare centrale de Luxembourg',
              de: 'Hauptbahnhof Luxemburg',
              es: 'Estación Central de Luxemburgo',
              it: 'Stazione Centrale di Lussemburgo',
              nl: 'Centraal Station Luxemburg',
              pt: 'Estação Central de Luxemburgo',
              tr: 'Lüksemburg Merkez İstasyonu',
              ru: 'Центральный вокзал Люксембург',
              zh: '卢森堡中央车站',
              ar: 'محطة لوكسمبورغ المركزية',
            },
            LIVAD_RAIL: {
              en: 'Vaduz Railway Connection',
              fr: 'Connexion ferroviaire de Vaduz',
              de: 'Bahnverbindung Vaduz',
              es: 'Conexión ferroviaria de Vaduz',
              it: 'Collegamento ferroviario di Vaduz',
              nl: 'Spoorverbinding Vaduz',
              pt: 'Conexão ferroviária de Vaduz',
              tr: 'Vaduz Demiryolu Bağlantısı',
              ru: 'Железнодорожное соединение Вадуц',
              zh: '瓦杜兹铁路连接',
              ar: 'اتصال السكك الحديدية في فادوتس',
            },
            MYPKG: {
              en: 'Port Klang',
              fr: 'Port Klang',
              de: 'Hafen Klang',
              es: 'Puerto Klang',
              it: 'Porto Klang',
              nl: 'Haven van Klang',
              pt: 'Porto Klang',
              tr: 'Klang Limanı',
              ru: 'Порт Кланг',
              zh: '巴生港',
              ar: 'ميناء كلانغ',
            },
            MYTPP: {
              en: 'Port of Tanjung Pelepas',
              fr: 'Port de Tanjung Pelepas',
              de: 'Hafen Tanjung Pelepas',
              es: 'Puerto de Tanjung Pelepas',
              it: 'Porto di Tanjung Pelepas',
              nl: 'Haven van Tanjung Pelepas',
              pt: 'Porto de Tanjung Pelepas',
              tr: 'Tanjung Pelepas Limanı',
              ru: 'Порт Танджунг Пелепас',
              zh: '丹戎帕拉帕斯港',
              ar: 'ميناء تانجونغ بيليباس',
            },
            MYKUL: {
              en: 'Kuala Lumpur International Airport',
              fr: 'Aéroport international de Kuala Lumpur',
              de: 'Internationaler Flughafen Kuala Lumpur',
              es: 'Aeropuerto Internacional de Kuala Lumpur',
              it: 'Aeroporto Internazionale di Kuala Lumpur',
              nl: 'Internationale Luchthaven Kuala Lumpur',
              pt: 'Aeroporto Internacional de Kuala Lumpur',
              tr: 'Kuala Lumpur Uluslararası Havaalanı',
              ru: 'Международный аэропорт Куала-Лумпур',
              zh: '吉隆坡国际机场',
              ar: 'مطار كوالالمبور الدولي',
            },
            MXMAN: {
              en: 'Port of Manzanillo',
              fr: 'Port de Manzanillo',
              de: 'Hafen Manzanillo',
              es: 'Puerto de Manzanillo',
              it: 'Porto di Manzanillo',
              nl: 'Haven van Manzanillo',
              pt: 'Porto de Manzanillo',
              tr: 'Manzanillo Limanı',
              ru: 'Порт Мансанильо',
              zh: '曼萨尼约港',
              ar: 'ميناء مانزانيلو',
            },
            MXLAZ: {
              en: 'Port of Lázaro Cárdenas',
              fr: 'Port de Lázaro Cárdenas',
              de: 'Hafen Lázaro Cárdenas',
              es: 'Puerto de Lázaro Cárdenas',
              it: 'Porto di Lázaro Cárdenas',
              nl: 'Haven van Lázaro Cárdenas',
              pt: 'Porto de Lázaro Cárdenas',
              tr: 'Lázaro Cárdenas Limanı',
              ru: 'Порт Ласаро Карденас',
              zh: '拉萨罗卡德纳斯港',
              ar: 'ميناء لازارو كارديناس',
            },
            MXVER: {
              en: 'Port of Veracruz',
              fr: 'Port de Veracruz',
              de: 'Hafen Veracruz',
              es: 'Puerto de Veracruz',
              it: 'Porto di Veracruz',
              nl: 'Haven van Veracruz',
              pt: 'Porto de Veracruz',
              tr: 'Veracruz Limanı',
              ru: 'Порт Веракрус',
              zh: '韦拉克鲁斯港',
              ar: 'ميناء فيراكروز',
            },
            MXMEX: {
              en: 'Mexico City International Airport',
              fr: 'Aéroport international de Mexico',
              de: 'Internationaler Flughafen Mexiko-Stadt',
              es: 'Aeropuerto Internacional de la Ciudad de México',
              it: 'Aeroporto Internazionale di Città del Messico',
              nl: 'Internationale Luchthaven Mexico-Stad',
              pt: 'Aeroporto Internacional da Cidade do México',
              tr: 'Mexico City Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мехико',
              zh: '墨西哥城国际机场',
              ar: 'مطار مكسيكو سيتي الدولي',
            },
            MXCUN: {
              en: 'Cancún International Airport',
              fr: 'Aéroport international de Cancún',
              de: 'Internationaler Flughafen Cancún',
              es: 'Aeropuerto Internacional de Cancún',
              it: 'Aeroporto Internazionale di Cancún',
              nl: 'Internationale Luchthaven Cancún',
              pt: 'Aeroporto Internacional de Cancún',
              tr: 'Cancún Uluslararası Havaalanı',
              ru: 'Международный аэропорт Канкун',
              zh: '坎昆国际机场',
              ar: 'مطار كانكون الدولي',
            },
            MACAS: {
              en: 'Port of Casablanca',
              fr: 'Port de Casablanca',
              de: 'Hafen Casablanca',
              es: 'Puerto de Casablanca',
              it: 'Porto di Casablanca',
              nl: 'Haven van Casablanca',
              pt: 'Porto de Casablanca',
              tr: 'Kazablanka Limanı',
              ru: 'Порт Касабланка',
              zh: '卡萨布兰卡港',
              ar: 'ميناء الدار البيضاء',
            },
            MATAN: {
              en: 'Port of Tanger Med',
              fr: 'Port de Tanger Med',
              de: 'Hafen Tanger Med',
              es: 'Puerto de Tánger Med',
              it: 'Porto di Tangeri Med',
              nl: 'Haven van Tanger Med',
              pt: 'Porto de Tânger Med',
              tr: 'Tanger Med Limanı',
              ru: 'Порт Танжер Мед',
              zh: '丹吉尔地中海港',
              ar: 'ميناء طنجة المتوسط',
            },
            MACMN: {
              en: 'Casablanca Mohammed V International Airport',
              fr: 'Aéroport international de Casablanca Mohammed V',
              de: 'Internationaler Flughafen Casablanca Mohammed V',
              es: 'Aeropuerto Internacional de Casablanca Mohammed V',
              it: 'Aeroporto Internazionale di Casablanca Mohammed V',
              nl: 'Internationale Luchthaven Casablanca Mohammed V',
              pt: 'Aeroporto Internacional de Casablanca Mohammed V',
              tr: 'Kazablanka Mohammed V Uluslararası Havaalanı',
              ru: 'Международный аэропорт Касабланка Мохаммед V',
              zh: '卡萨布兰卡穆罕默德五世国际机场',
              ar: 'مطار الدار البيضاء محمد الخامس الدولي',
            },
            MZMPM: {
              en: 'Port of Maputo',
              fr: 'Port de Maputo',
              de: 'Hafen Maputo',
              es: 'Puerto de Maputo',
              it: 'Porto di Maputo',
              nl: 'Haven van Maputo',
              pt: 'Porto de Maputo',
              tr: 'Maputo Limanı',
              ru: 'Порт Мапуту',
              zh: '马普托港',
              ar: 'ميناء مابوتو',
            },
            MZBEI: {
              en: 'Port of Beira',
              fr: 'Port de Beira',
              de: 'Hafen Beira',
              es: 'Puerto de Beira',
              it: 'Porto di Beira',
              nl: 'Haven van Beira',
              pt: 'Porto da Beira',
              tr: 'Beira Limanı',
              ru: 'Порт Бейра',
              zh: '贝拉港',
              ar: 'ميناء بيرا',
            },
            MZNAC: {
              en: 'Port of Nacala',
              fr: 'Port de Nacala',
              de: 'Hafen Nacala',
              es: 'Puerto de Nacala',
              it: 'Porto di Nacala',
              nl: 'Haven van Nacala',
              pt: 'Porto de Nacala',
              tr: 'Nacala Limanı',
              ru: 'Порт Накала',
              zh: '纳卡拉港',
              ar: 'ميناء ناكالا',
            },
            MZMPM_AIR: {
              en: 'Maputo International Airport',
              fr: 'Aéroport international de Maputo',
              de: 'Internationaler Flughafen Maputo',
              es: 'Aeropuerto Internacional de Maputo',
              it: 'Aeroporto Internazionale di Maputo',
              nl: 'Internationale Luchthaven Maputo',
              pt: 'Aeroporto Internacional de Maputo',
              tr: 'Maputo Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мапуту',
              zh: '马普托国际机场',
              ar: 'مطار مابوتو الدولي',
            },
            MZMPM_RAIL: {
              en: 'Maputo Railway Station',
              fr: 'Gare de Maputo',
              de: 'Bahnhof Maputo',
              es: 'Estación de Maputo',
              it: 'Stazione di Maputo',
              nl: 'Station Maputo',
              pt: 'Estação de Maputo',
              tr: 'Maputo Tren İstasyonu',
              ru: 'Железнодорожная станция Мапуту',
              zh: '马普托火车站',
              ar: 'محطة مابوتو للسكك الحديدية',
            },
            MCNCE: {
              en: "Nice Côte d'Azur Airport",
              fr: "Aéroport de Nice Côte d'Azur",
              de: "Flughafen Nizza Côte d'Azur",
              es: 'Aeropuerto de Niza Costa Azul',
              it: 'Aeroporto di Nizza Costa Azzurra',
              nl: "Luchthaven Nice Côte d'Azur",
              pt: "Aeroporto de Nice Côte d'Azur",
              tr: "Nice Côte d'Azur Havaalanı",
              ru: 'Аэропорт Ницца Лазурный Берег',
              zh: '尼斯蓝色海岸机场',
              ar: 'مطار نيس كوت دازور',
            },
            MTMLA_AIR: {
              en: 'Malta International Airport',
              fr: 'Aéroport international de Malte',
              de: 'Internationaler Flughafen Malta',
              es: 'Aeropuerto Internacional de Malta',
              it: 'Aeroporto Internazionale di Malta',
              nl: 'Internationale Luchthaven Malta',
              pt: 'Aeroporto Internacional de Malta',
              tr: 'Malta Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мальта',
              zh: '马耳他国际机场',
              ar: 'مطار مالطا الدولي',
            },
            MUPLN: {
              en: 'Plaine Corail Airport',
              fr: 'Aéroport de Plaine Corail',
              de: 'Flughafen Plaine Corail',
              es: 'Aeropuerto de Plaine Corail',
              it: 'Aeroporto di Plaine Corail',
              nl: 'Luchthaven Plaine Corail',
              pt: 'Aeroporto de Plaine Corail',
              tr: 'Plaine Corail Havaalanı',
              ru: 'Аэропорт Плейн Корайл',
              zh: '平原珊瑚机场',
              ar: 'مطار بلين كورايل',
            },
            MVMAL: {
              en: 'Port of Malé',
              fr: 'Port de Malé',
              de: 'Hafen Malé',
              es: 'Puerto de Malé',
              it: 'Porto di Malé',
              nl: 'Haven van Malé',
              pt: 'Porto de Malé',
              tr: 'Male Limanı',
              ru: 'Порт Мале',
              zh: '马累港',
              ar: 'ميناء ماليه',
            },
            MVGAN: {
              en: 'Port of Gan',
              fr: 'Port de Gan',
              de: 'Hafen Gan',
              es: 'Puerto de Gan',
              it: 'Porto di Gan',
              nl: 'Haven van Gan',
              pt: 'Porto de Gan',
              tr: 'Gan Limanı',
              ru: 'Порт Ган',
              zh: '甘港',
              ar: 'ميناء غان',
            },
            MVGAN_AIR: {
              en: 'Gan International Airport',
              fr: 'Aéroport international de Gan',
              de: 'Internationaler Flughafen Gan',
              es: 'Aeropuerto Internacional de Gan',
              it: 'Aeroporto Internazionale di Gan',
              nl: 'Internationale Luchthaven Gan',
              pt: 'Aeroporto Internacional de Gan',
              tr: 'Gan Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ган',
              zh: '甘国际机场',
              ar: 'مطار غان الدولي',
            },
            NLRTM: {
              en: 'Port of Rotterdam',
              fr: 'Port de Rotterdam',
              de: 'Hafen Rotterdam',
              es: 'Puerto de Rotterdam',
              it: 'Porto di Rotterdam',
              nl: 'Haven van Rotterdam',
              pt: 'Porto de Roterdão',
              tr: 'Rotterdam Limanı',
              ru: 'Порт Роттердам',
              zh: '鹿特丹港',
              ar: 'ميناء روتردام',
            },
            NLAMS: {
              en: 'Port of Amsterdam',
              fr: "Port d'Amsterdam",
              de: 'Hafen Amsterdam',
              es: 'Puerto de Ámsterdam',
              it: 'Porto di Amsterdam',
              nl: 'Haven van Amsterdam',
              pt: 'Porto de Amsterdã',
              tr: 'Amsterdam Limanı',
              ru: 'Порт Амстердам',
              zh: '阿姆斯特丹港',
              ar: 'ميناء أمستردام',
            },
            NLAMS_AIR: {
              en: 'Amsterdam Schiphol Airport',
              fr: "Aéroport d'Amsterdam Schiphol",
              de: 'Flughafen Amsterdam Schiphol',
              es: 'Aeropuerto de Ámsterdam Schiphol',
              it: 'Aeroporto di Amsterdam Schiphol',
              nl: 'Luchthaven Amsterdam Schiphol',
              pt: 'Aeroporto de Amsterdã Schiphol',
              tr: 'Amsterdam Schiphol Havaalanı',
              ru: 'Аэропорт Амстердам Схипхол',
              zh: '阿姆斯特丹史基浦机场',
              ar: 'مطار أمستردام شيبهول',
            },
            NLEIN: {
              en: 'Eindhoven Airport',
              fr: "Aéroport d'Eindhoven",
              de: 'Flughafen Eindhoven',
              es: 'Aeropuerto de Eindhoven',
              it: 'Aeroporto di Eindhoven',
              nl: 'Luchthaven Eindhoven',
              pt: 'Aeroporto de Eindhoven',
              tr: 'Eindhoven Havaalanı',
              ru: 'Аэропорт Эйндховен',
              zh: '埃因霍温机场',
              ar: 'مطار آيندهوفن',
            },
            NLAMS_RAIL: {
              en: 'Amsterdam Centraal Station',
              fr: "Gare centrale d'Amsterdam",
              de: 'Hauptbahnhof Amsterdam',
              es: 'Estación Central de Ámsterdam',
              it: 'Stazione Centrale di Amsterdam',
              nl: 'Amsterdam Centraal',
              pt: 'Estação Central de Amsterdã',
              tr: 'Amsterdam Merkez İstasyonu',
              ru: 'Центральный вокзал Амстердам',
              zh: '阿姆斯特丹中央车站',
              ar: 'محطة أمستردام المركزية',
            },
            NLRTM_RAIL: {
              en: 'Rotterdam Centraal Station',
              fr: 'Gare centrale de Rotterdam',
              de: 'Hauptbahnhof Rotterdam',
              es: 'Estación Central de Rotterdam',
              it: 'Stazione Centrale di Rotterdam',
              nl: 'Rotterdam Centraal',
              pt: 'Estação Central de Roterdão',
              tr: 'Rotterdam Merkez İstasyonu',
              ru: 'Центральный вокзал Роттердам',
              zh: '鹿特丹中央车站',
              ar: 'محطة روتردام المركزية',
            },
            NLHAG_RAIL: {
              en: 'Den Haag Centraal Station',
              fr: 'Gare centrale de La Haye',
              de: 'Hauptbahnhof Den Haag',
              es: 'Estación Central de La Haya',
              it: "Stazione Centrale dell'Aia",
              nl: 'Den Haag Centraal',
              pt: 'Estação Central de Haia',
              tr: 'Den Haag Merkez İstasyonu',
              ru: 'Центральный вокзал Гаага',
              zh: '海牙中央车站',
              ar: 'محطة لاهاي المركزية',
            },
            NGLAG: {
              en: 'Port of Lagos Apapa',
              fr: 'Port de Lagos Apapa',
              de: 'Hafen Lagos Apapa',
              es: 'Puerto de Lagos Apapa',
              it: 'Porto di Lagos Apapa',
              nl: 'Haven van Lagos Apapa',
              pt: 'Porto de Lagos Apapa',
              tr: 'Lagos Apapa Limanı',
              ru: 'Порт Лагос Апапа',
              zh: '拉各斯阿帕帕港',
              ar: 'ميناء لاغوس أبابا',
            },
            NGTCR: {
              en: 'Port of Tin Can Island',
              fr: 'Port de Tin Can Island',
              de: 'Hafen Tin Can Island',
              es: 'Puerto de Tin Can Island',
              it: 'Porto di Tin Can Island',
              nl: 'Haven van Tin Can Island',
              pt: 'Porto de Tin Can Island',
              tr: 'Tin Can Island Limanı',
              ru: 'Порт Тин Кан Айленд',
              zh: '锡罐岛港',
              ar: 'ميناء تين كان آيلاند',
            },
            NGLOS: {
              en: 'Lagos Murtala Muhammed International Airport',
              fr: 'Aéroport international de Lagos Murtala Muhammed',
              de: 'Internationaler Flughafen Lagos Murtala Muhammed',
              es: 'Aeropuerto Internacional de Lagos Murtala Muhammed',
              it: 'Aeroporto Internazionale di Lagos Murtala Muhammed',
              nl: 'Internationale Luchthaven Lagos Murtala Muhammed',
              pt: 'Aeroporto Internacional de Lagos Murtala Muhammed',
              tr: 'Lagos Murtala Muhammed Uluslararası Havaalanı',
              ru: 'Международный аэропорт Лагос Муртала Мухаммед',
              zh: '拉各斯穆尔塔拉·穆罕默德国际机场',
              ar: 'مطار لاغوس مرتضى محمد الدولي',
            },
            NOOSL: {
              en: 'Port of Oslo',
              fr: "Port d'Oslo",
              de: 'Hafen Oslo',
              es: 'Puerto de Oslo',
              it: 'Porto di Oslo',
              nl: 'Haven van Oslo',
              pt: 'Porto de Oslo',
              tr: 'Oslo Limanı',
              ru: 'Порт Осло',
              zh: '奥斯陆港',
              ar: 'ميناء أوسلو',
            },
            NOBERG: {
              en: 'Port of Bergen',
              fr: 'Port de Bergen',
              de: 'Hafen Bergen',
              es: 'Puerto de Bergen',
              it: 'Porto di Bergen',
              nl: 'Haven van Bergen',
              pt: 'Porto de Bergen',
              tr: 'Bergen Limanı',
              ru: 'Порт Берген',
              zh: '卑尔根港',
              ar: 'ميناء بيرغن',
            },
            NOOSL_AIR: {
              en: 'Oslo Gardermoen Airport',
              fr: "Aéroport d'Oslo Gardermoen",
              de: 'Flughafen Oslo Gardermoen',
              es: 'Aeropuerto de Oslo Gardermoen',
              it: 'Aeroporto di Oslo Gardermoen',
              nl: 'Luchthaven Oslo Gardermoen',
              pt: 'Aeroporto de Oslo Gardermoen',
              tr: 'Oslo Gardermoen Havaalanı',
              ru: 'Аэропорт Осло Гардермуэн',
              zh: '奥斯陆加勒穆恩机场',
              ar: 'مطار أوسلو غاردرموين',
            },
            NOOSL_RAIL: {
              en: 'Oslo Central Station',
              fr: "Gare centrale d'Oslo",
              de: 'Hauptbahnhof Oslo',
              es: 'Estación Central de Oslo',
              it: 'Stazione Centrale di Oslo',
              nl: 'Centraal Station Oslo',
              pt: 'Estação Central de Oslo',
              tr: 'Oslo Merkez İstasyonu',
              ru: 'Центральный вокзал Осло',
              zh: '奥斯陆中央车站',
              ar: 'محطة أوسلو المركزية',
            },
            NZAKL: {
              en: 'Port of Auckland',
              fr: "Port d'Auckland",
              de: 'Hafen Auckland',
              es: 'Puerto de Auckland',
              it: 'Porto di Auckland',
              nl: 'Haven van Auckland',
              pt: 'Porto de Auckland',
              tr: 'Auckland Limanı',
              ru: 'Порт Окленд',
              zh: '奥克兰港',
              ar: 'ميناء أوكلاند',
            },
            NZTRG: {
              en: 'Port of Tauranga',
              fr: 'Port de Tauranga',
              de: 'Hafen Tauranga',
              es: 'Puerto de Tauranga',
              it: 'Porto di Tauranga',
              nl: 'Haven van Tauranga',
              pt: 'Porto de Tauranga',
              tr: 'Tauranga Limanı',
              ru: 'Порт Тауранга',
              zh: '陶朗加港',
              ar: 'ميناء تاورانغا',
            },
            NZWEL: {
              en: 'Port of Wellington',
              fr: 'Port de Wellington',
              de: 'Hafen Wellington',
              es: 'Puerto de Wellington',
              it: 'Porto di Wellington',
              nl: 'Haven van Wellington',
              pt: 'Porto de Wellington',
              tr: 'Wellington Limanı',
              ru: 'Порт Веллингтон',
              zh: '惠灵顿港',
              ar: 'ميناء ويلينغتون',
            },
            NZAKL_AIR: {
              en: 'Auckland Airport',
              fr: "Aéroport d'Auckland",
              de: 'Flughafen Auckland',
              es: 'Aeropuerto de Auckland',
              it: 'Aeroporto di Auckland',
              nl: 'Luchthaven Auckland',
              pt: 'Aeroporto de Auckland',
              tr: 'Auckland Havaalanı',
              ru: 'Аэропорт Окленд',
              zh: '奥克兰机场',
              ar: 'مطار أوكلاند',
            },
            NZWEL_AIR: {
              en: 'Wellington Airport',
              fr: 'Aéroport de Wellington',
              de: 'Flughafen Wellington',
              es: 'Aeropuerto de Wellington',
              it: 'Aeroporto di Wellington',
              nl: 'Luchthaven Wellington',
              pt: 'Aeroporto de Wellington',
              tr: 'Wellington Havaalanı',
              ru: 'Аэропорт Веллингтон',
              zh: '惠灵顿机场',
              ar: 'مطار ويلينغتون',
            },
            NZCHC_AIR: {
              en: 'Christchurch Airport',
              fr: 'Aéroport de Christchurch',
              de: 'Flughafen Christchurch',
              es: 'Aeropuerto de Christchurch',
              it: 'Aeroporto di Christchurch',
              nl: 'Luchthaven Christchurch',
              pt: 'Aeroporto de Christchurch',
              tr: 'Christchurch Havaalanı',
              ru: 'Аэропорт Крайстчерч',
              zh: '基督城机场',
              ar: 'مطار كرايستشيرش',
            },
            OMSAL: {
              en: 'Port of Salalah',
              fr: 'Port de Salalah',
              de: 'Hafen Salalah',
              es: 'Puerto de Salalah',
              it: 'Porto di Salalah',
              nl: 'Haven van Salalah',
              pt: 'Porto de Salalah',
              tr: 'Salalah Limanı',
              ru: 'Порт Салала',
              zh: '萨拉拉港',
              ar: 'ميناء صلالة',
            },
            OMMUS: {
              en: 'Port of Muscat',
              fr: 'Port de Mascate',
              de: 'Hafen Maskat',
              es: 'Puerto de Mascate',
              it: 'Porto di Mascate',
              nl: 'Haven van Muscat',
              pt: 'Porto de Mascate',
              tr: 'Maskat Limanı',
              ru: 'Порт Маскат',
              zh: '马斯喀特港',
              ar: 'ميناء مسقط',
            },
            OMSOH: {
              en: 'Port of Sohar',
              fr: 'Port de Sohar',
              de: 'Hafen Sohar',
              es: 'Puerto de Sohar',
              it: 'Porto di Sohar',
              nl: 'Haven van Sohar',
              pt: 'Porto de Sohar',
              tr: 'Sohar Limanı',
              ru: 'Порт Сохар',
              zh: '苏哈尔港',
              ar: 'ميناء صحار',
            },
            OMMUS_AIR: {
              en: 'Muscat International Airport',
              fr: 'Aéroport international de Mascate',
              de: 'Internationaler Flughafen Maskat',
              es: 'Aeropuerto Internacional de Mascate',
              it: 'Aeroporto Internazionale di Mascate',
              nl: 'Internationale Luchthaven Muscat',
              pt: 'Aeroporto Internacional de Mascate',
              tr: 'Maskat Uluslararası Havaalanı',
              ru: 'Международный аэропорт Маскат',
              zh: '马斯喀特国际机场',
              ar: 'مطار مسقط الدولي',
            },
            OMSAL_AIR: {
              en: 'Salalah Airport',
              fr: 'Aéroport de Salalah',
              de: 'Flughafen Salalah',
              es: 'Aeropuerto de Salalah',
              it: 'Aeroporto di Salalah',
              nl: 'Luchthaven Salalah',
              pt: 'Aeroporto de Salalah',
              tr: 'Salalah Havaalanı',
              ru: 'Аэропорт Салала',
              zh: '萨拉拉机场',
              ar: 'مطار صلالة',
            },
            QADOH: {
              en: 'Port of Doha',
              fr: 'Port de Doha',
              de: 'Hafen Doha',
              es: 'Puerto de Doha',
              it: 'Porto di Doha',
              nl: 'Haven van Doha',
              pt: 'Porto de Doha',
              tr: 'Doha Limanı',
              ru: 'Порт Доха',
              zh: '多哈港',
              ar: 'ميناء الدوحة',
            },
            QAMES: {
              en: 'Port of Mesaieed',
              fr: 'Port de Mesaieed',
              de: 'Hafen Mesaieed',
              es: 'Puerto de Mesaieed',
              it: 'Porto di Mesaieed',
              nl: 'Haven van Mesaieed',
              pt: 'Porto de Mesaieed',
              tr: 'Mesaieed Limanı',
              ru: 'Порт Месайеед',
              zh: '梅赛义德港',
              ar: 'ميناء مسيعيد',
            },
            RULED: {
              en: 'Port of Saint Petersburg',
              fr: 'Port de Saint-Pétersbourg',
              de: 'Hafen Sankt Petersburg',
              es: 'Puerto de San Petersburgo',
              it: 'Porto di San Pietroburgo',
              nl: 'Haven van Sint-Petersburg',
              pt: 'Porto de São Petersburgo',
              tr: 'Sankt Petersburg Limanı',
              ru: 'Порт Санкт-Петербург',
              zh: '圣彼得堡港',
              ar: 'ميناء سانت بطرسبرغ',
            },
            RUNVS: {
              en: 'Port of Novorossiysk',
              fr: 'Port de Novorossiysk',
              de: 'Hafen Noworossijsk',
              es: 'Puerto de Novorossiysk',
              it: 'Porto di Novorossiysk',
              nl: 'Haven van Novorossiysk',
              pt: 'Porto de Novorossiysk',
              tr: 'Novorossiysk Limanı',
              ru: 'Порт Новороссийск',
              zh: '新罗西斯克港',
              ar: 'ميناء نوفوروسيسك',
            },
            RUVVO: {
              en: 'Port of Vladivostok',
              fr: 'Port de Vladivostok',
              de: 'Hafen Wladiwostok',
              es: 'Puerto de Vladivostok',
              it: 'Porto di Vladivostok',
              nl: 'Haven van Vladivostok',
              pt: 'Porto de Vladivostok',
              tr: 'Vladivostok Limanı',
              ru: 'Порт Владивосток',
              zh: '符拉迪沃斯托克港',
              ar: 'ميناء فلاديفوستوك',
            },
            RUSVO: {
              en: 'Moscow Sheremetyevo International Airport',
              fr: 'Aéroport international de Moscou Sheremetyevo',
              de: 'Internationaler Flughafen Moskau Scheremetjewo',
              es: 'Aeropuerto Internacional de Moscú Sheremetyevo',
              it: 'Aeroporto Internazionale di Mosca Sheremetyevo',
              nl: 'Internationale Luchthaven Moskou Sheremetyevo',
              pt: 'Aeroporto Internacional de Moscou Sheremetyevo',
              tr: 'Moskova Şeremetyevo Uluslararası Havaalanı',
              ru: 'Международный аэропорт Москва Шереметьево',
              zh: '莫斯科谢列梅捷沃国际机场',
              ar: 'مطار موسكو شيريميتيفو الدولي',
            },
            RULED_AIR: {
              en: 'Saint Petersburg Pulkovo Airport',
              fr: 'Aéroport de Saint-Pétersbourg Pulkovo',
              de: 'Flughafen Sankt Petersburg Pulkowo',
              es: 'Aeropuerto de San Petersburgo Pulkovo',
              it: 'Aeroporto di San Pietroburgo Pulkovo',
              nl: 'Luchthaven Sint-Petersburg Pulkovo',
              pt: 'Aeroporto de São Petersburgo Pulkovo',
              tr: 'Sankt Petersburg Pulkovo Havaalanı',
              ru: 'Аэропорт Санкт-Петербург Пулково',
              zh: '圣彼得堡普尔科沃机场',
              ar: 'مطار سانت بطرسبرغ بولكوفو',
            },
            RUMOS_RAIL: {
              en: 'Moscow Kazansky Railway Station',
              fr: 'Gare de Moscou Kazansky',
              de: 'Bahnhof Moskau Kasanski',
              es: 'Estación de Moscú Kazansky',
              it: 'Stazione di Mosca Kazansky',
              nl: 'Station Moskou Kazansky',
              pt: 'Estação de Moscou Kazansky',
              tr: 'Moskova Kazansky Tren İstasyonu',
              ru: 'Казанский вокзал',
              zh: '莫斯科喀山火车站',
              ar: 'محطة موسكو كازانسكي',
            },
            RULED_RAIL: {
              en: 'Saint Petersburg Baltic Station',
              fr: 'Gare baltique de Saint-Pétersbourg',
              de: 'Baltischer Bahnhof Sankt Petersburg',
              es: 'Estación Báltica de San Petersburgo',
              it: 'Stazione Baltica di San Pietroburgo',
              nl: 'Baltisch Station Sint-Petersburg',
              pt: 'Estação Báltica de São Petersburgo',
              tr: 'Sankt Petersburg Baltık İstasyonu',
              ru: 'Балтийский вокзал',
              zh: '圣彼得堡波罗的海火车站',
              ar: 'محطة سانت بطرسبرغ البلطيقية',
            },
            ROCND_AIR: {
              en: 'Constanta Airport',
              fr: 'Aéroport de Constanta',
              de: 'Flughafen Konstanza',
              es: 'Aeropuerto de Constanza',
              it: 'Aeroporto di Costanza',
              nl: 'Luchthaven Constanta',
              pt: 'Aeroporto de Constanta',
              tr: 'Köstence Havaalanı',
              ru: 'Аэропорт Констанца',
              zh: '康斯坦察机场',
              ar: 'مطار كونستانتا',
            },
            ROBUH_RAIL: {
              en: 'Bucharest North Railway Station',
              fr: 'Gare du Nord de Bucarest',
              de: 'Nordbahnhof Bukarest',
              es: 'Estación Norte de Bucarest',
              it: 'Stazione Nord di Bucarest',
              nl: 'Noordstation Boekarest',
              pt: 'Estação Norte de Bucareste',
              tr: 'Bükreş Kuzey Tren İstasyonu',
              ru: 'Северный вокзал Бухарест',
              zh: '布加勒斯特北站',
              ar: 'محطة بوخارست الشمالية',
            },
            ROCND_RAIL: {
              en: 'Constanta Railway Station',
              fr: 'Gare de Constanta',
              de: 'Bahnhof Konstanza',
              es: 'Estación de Constanza',
              it: 'Stazione di Costanza',
              nl: 'Station Constanta',
              pt: 'Estação de Constanta',
              tr: 'Köstence Tren İstasyonu',
              ru: 'Железнодорожная станция Констанца',
              zh: '康斯坦察火车站',
              ar: 'محطة كونستانتا للسكك الحديدية',
            },
            RSBEG: {
              en: 'Port of Belgrade',
              fr: 'Port de Belgrade',
              de: 'Hafen Belgrad',
              es: 'Puerto de Belgrado',
              it: 'Porto di Belgrado',
              nl: 'Haven van Belgrado',
              pt: 'Porto de Belgrado',
              tr: 'Belgrad Limanı',
              ru: 'Порт Белград',
              zh: '贝尔格莱德港',
              ar: 'ميناء بلغراد',
            },
            RSNOV: {
              en: 'Port of Novi Sad',
              fr: 'Port de Novi Sad',
              de: 'Hafen Novi Sad',
              es: 'Puerto de Novi Sad',
              it: 'Porto di Novi Sad',
              nl: 'Haven van Novi Sad',
              pt: 'Porto de Novi Sad',
              tr: 'Novi Sad Limanı',
              ru: 'Порт Нови Сад',
              zh: '诺维萨德港',
              ar: 'ميناء نوفي ساد',
            },
            RSBEG_AIR: {
              en: 'Belgrade Nikola Tesla Airport',
              fr: 'Aéroport de Belgrade Nikola Tesla',
              de: 'Flughafen Belgrad Nikola Tesla',
              es: 'Aeropuerto de Belgrado Nikola Tesla',
              it: 'Aeroporto di Belgrado Nikola Tesla',
              nl: 'Luchthaven Belgrado Nikola Tesla',
              pt: 'Aeroporto de Belgrado Nikola Tesla',
              tr: 'Belgrad Nikola Tesla Havaalanı',
              ru: 'Аэропорт Белград имени Николы Теслы',
              zh: '贝尔格莱德尼古拉·特斯拉机场',
              ar: 'مطار بلغراد نيكولا تيسلا',
            },
            RSBEG_RAIL: {
              en: 'Belgrade Central Station',
              fr: 'Gare centrale de Belgrade',
              de: 'Hauptbahnhof Belgrad',
              es: 'Estación Central de Belgrado',
              it: 'Stazione Centrale di Belgrado',
              nl: 'Centraal Station Belgrado',
              pt: 'Estação Central de Belgrado',
              tr: 'Belgrad Merkez İstasyonu',
              ru: 'Центральный вокзал Белград',
              zh: '贝尔格莱德中央车站',
              ar: 'محطة بلغراد المركزية',
            },
            RWKGL_RAIL: {
              en: 'Kigali Railway Station',
              fr: 'Gare de Kigali',
              de: 'Bahnhof Kigali',
              es: 'Estación de Kigali',
              it: 'Stazione di Kigali',
              nl: 'Station Kigali',
              pt: 'Estação de Kigali',
              tr: 'Kigali Tren İstasyonu',
              ru: 'Железнодорожная станция Кигали',
              zh: '基加利火车站',
              ar: 'محطة كيغالي للسكك الحديدية',
            },
            SGSIN: {
              en: 'Port of Singapore',
              fr: 'Port de Singapour',
              de: 'Hafen Singapur',
              es: 'Puerto de Singapur',
              it: 'Porto di Singapore',
              nl: 'Haven van Singapore',
              pt: 'Porto de Singapura',
              tr: 'Singapur Limanı',
              ru: 'Порт Сингапур',
              zh: '新加坡港',
              ar: 'ميناء سنغافورة',
            },
            SGSIN_AIR: {
              en: 'Singapore Changi Airport',
              fr: 'Aéroport de Singapour Changi',
              de: 'Flughafen Singapur Changi',
              es: 'Aeropuerto de Singapur Changi',
              it: 'Aeroporto di Singapore Changi',
              nl: 'Luchthaven Singapore Changi',
              pt: 'Aeroporto de Singapura Changi',
              tr: 'Singapur Changi Havaalanı',
              ru: 'Аэропорт Сингапур Чанги',
              zh: '新加坡樟宜机场',
              ar: 'مطار سنغافورة تشانغي',
            },
            SEGOT: {
              en: 'Port of Gothenburg',
              fr: 'Port de Göteborg',
              de: 'Hafen Göteborg',
              es: 'Puerto de Gotemburgo',
              it: 'Porto di Göteborg',
              nl: 'Haven van Göteborg',
              pt: 'Porto de Gotemburgo',
              tr: 'Göteborg Limanı',
              ru: 'Порт Гётеборг',
              zh: '哥德堡港',
              ar: 'ميناء غوتنبرغ',
            },
            SESTO: {
              en: 'Port of Stockholm',
              fr: 'Port de Stockholm',
              de: 'Hafen Stockholm',
              es: 'Puerto de Estocolmo',
              it: 'Porto di Stoccolma',
              nl: 'Haven van Stockholm',
              pt: 'Porto de Estocolmo',
              tr: 'Stockholm Limanı',
              ru: 'Порт Стокгольм',
              zh: '斯德哥尔摩港',
              ar: 'ميناء ستوكهولم',
            },
            SEARN: {
              en: 'Stockholm Arlanda Airport',
              fr: 'Aéroport de Stockholm Arlanda',
              de: 'Flughafen Stockholm Arlanda',
              es: 'Aeropuerto de Estocolmo Arlanda',
              it: 'Aeroporto di Stoccolma Arlanda',
              nl: 'Luchthaven Stockholm Arlanda',
              pt: 'Aeroporto de Estocolmo Arlanda',
              tr: 'Stockholm Arlanda Havaalanı',
              ru: 'Аэропорт Стокгольм Арланда',
              zh: '斯德哥尔摩阿兰达机场',
              ar: 'مطار ستوكهولم أرلاندا',
            },
            SEGOT_AIR: {
              en: 'Gothenburg Landvetter Airport',
              fr: 'Aéroport de Göteborg Landvetter',
              de: 'Flughafen Göteborg Landvetter',
              es: 'Aeropuerto de Gotemburgo Landvetter',
              it: 'Aeroporto di Göteborg Landvetter',
              nl: 'Luchthaven Göteborg Landvetter',
              pt: 'Aeroporto de Gotemburgo Landvetter',
              tr: 'Göteborg Landvetter Havaalanı',
              ru: 'Аэропорт Гётеборг Ландветтер',
              zh: '哥德堡兰德维特机场',
              ar: 'مطار غوتنبرغ لاندفيتر',
            },
            SESTO_RAIL: {
              en: 'Stockholm Central Station',
              fr: 'Gare centrale de Stockholm',
              de: 'Hauptbahnhof Stockholm',
              es: 'Estación Central de Estocolmo',
              it: 'Stazione Centrale di Stoccolma',
              nl: 'Centraal Station Stockholm',
              pt: 'Estação Central de Estocolmo',
              tr: 'Stockholm Merkez İstasyonu',
              ru: 'Центральный вокзал Стокгольм',
              zh: '斯德哥尔摩中央车站',
              ar: 'محطة ستوكهولم المركزية',
            },
            SEGOT_RAIL: {
              en: 'Gothenburg Central Station',
              fr: 'Gare centrale de Göteborg',
              de: 'Hauptbahnhof Göteborg',
              es: 'Estación Central de Gotemburgo',
              it: 'Stazione Centrale di Göteborg',
              nl: 'Centraal Station Göteborg',
              pt: 'Estação Central de Gotemburgo',
              tr: 'Göteborg Merkez İstasyonu',
              ru: 'Центральный вокзал Гётеборг',
              zh: '哥德堡中央车站',
              ar: 'محطة غوتنبرغ المركزية',
            },
            SADAM: {
              en: 'Port of Dammam',
              fr: 'Port de Dammam',
              de: 'Hafen Dammam',
              es: 'Puerto de Dammam',
              it: 'Porto di Dammam',
              nl: 'Haven van Dammam',
              pt: 'Porto de Dammam',
              tr: 'Dammam Limanı',
              ru: 'Порт Даммам',
              zh: '达曼港',
              ar: 'ميناء الدمام',
            },
            SAYAN: {
              en: 'Port of Yanbu',
              fr: 'Port de Yanbu',
              de: 'Hafen Yanbu',
              es: 'Puerto de Yanbu',
              it: 'Porto di Yanbu',
              nl: 'Haven van Yanbu',
              pt: 'Porto de Yanbu',
              tr: 'Yanbu Limanı',
              ru: 'Порт Янбу',
              zh: '延布港',
              ar: 'ميناء ينبع',
            },
            SAJED_AIR: {
              en: 'Jeddah King Abdulaziz International Airport',
              fr: 'Aéroport international de Jeddah King Abdulaziz',
              de: 'Internationaler Flughafen Dschidda King Abdulaziz',
              es: 'Aeropuerto Internacional de Jeddah King Abdulaziz',
              it: 'Aeroporto Internazionale di Jeddah King Abdulaziz',
              nl: 'Internationale Luchthaven Jeddah King Abdulaziz',
              pt: 'Aeroporto Internacional de Jeddah King Abdulaziz',
              tr: 'Cidde Kral Abdülaziz Uluslararası Havaalanı',
              ru: 'Международный аэропорт Джидда имени короля Абдул-Азиза',
              zh: '吉达阿卜杜勒-阿齐兹国王国际机场',
              ar: 'مطار الملك عبد العزيز الدولي',
            },
            SADAM_AIR: {
              en: 'Dammam King Fahd International Airport',
              fr: 'Aéroport international de Dammam King Fahd',
              de: 'Internationaler Flughafen Dammam King Fahd',
              es: 'Aeropuerto Internacional de Dammam King Fahd',
              it: 'Aeroporto Internazionale di Dammam King Fahd',
              nl: 'Internationale Luchthaven Dammam King Fahd',
              pt: 'Aeroporto Internacional de Dammam King Fahd',
              tr: 'Dammam Kral Fahd Uluslararası Havaalanı',
              ru: 'Международный аэропорт Даммам имени короля Фахда',
              zh: '达曼法赫德国王国际机场',
              ar: 'مطار الملك فهد الدولي',
            },
            SKBTS: {
              en: 'Bratislava Milan Rastislav Štefánik Airport',
              fr: 'Aéroport de Bratislava Milan Rastislav Štefánik',
              de: 'Flughafen Bratislava Milan Rastislav Štefánik',
              es: 'Aeropuerto de Bratislava Milan Rastislav Štefánik',
              it: 'Aeroporto di Bratislava Milan Rastislav Štefánik',
              nl: 'Luchthaven Bratislava Milan Rastislav Štefánik',
              pt: 'Aeroporto de Bratislava Milan Rastislav Štefánik',
              tr: 'Bratislava Milan Rastislav Štefánik Havaalanı',
              ru: 'Аэропорт Братислава имени Милана Растислава Штефаника',
              zh: '布拉迪斯拉发米兰·拉斯蒂斯拉夫·什捷法尼克机场',
              ar: 'مطار براتيسلافا ميلان راستيسلاف شتيفانيك',
            },
            SKBTS_RAIL: {
              en: 'Bratislava Central Station',
              fr: 'Gare centrale de Bratislava',
              de: 'Hauptbahnhof Bratislava',
              es: 'Estación Central de Bratislava',
              it: 'Stazione Centrale di Bratislava',
              nl: 'Centraal Station Bratislava',
              pt: 'Estação Central de Bratislava',
              tr: 'Bratislava Merkez İstasyonu',
              ru: 'Центральный вокзал Братислава',
              zh: '布拉迪斯拉发中央车站',
              ar: 'محطة براتيسلافا المركزية',
            },
            SIKOP: {
              en: 'Port of Koper',
              fr: 'Port de Koper',
              de: 'Hafen Koper',
              es: 'Puerto de Koper',
              it: 'Porto di Koper',
              nl: 'Haven van Koper',
              pt: 'Porto de Koper',
              tr: 'Koper Limanı',
              ru: 'Порт Копер',
              zh: '科佩尔港',
              ar: 'ميناء كوبر',
            },
            SILJU: {
              en: 'Ljubljana Jože Pučnik Airport',
              fr: 'Aéroport de Ljubljana Jože Pučnik',
              de: 'Flughafen Ljubljana Jože Pučnik',
              es: 'Aeropuerto de Liubliana Jože Pučnik',
              it: 'Aeroporto di Lubiana Jože Pučnik',
              nl: 'Luchthaven Ljubljana Jože Pučnik',
              pt: 'Aeroporto de Ljubljana Jože Pučnik',
              tr: 'Ljubljana Jože Pučnik Havaalanı',
              ru: 'Аэропорт Любляна имени Йоже Пучника',
              zh: '卢布尔雅那约热·普奇尼克机场',
              ar: 'مطار ليوبليانا يوجي بوتشنيك',
            },
            SILJU_RAIL: {
              en: 'Ljubljana Railway Station',
              fr: 'Gare de Ljubljana',
              de: 'Bahnhof Ljubljana',
              es: 'Estación de Liubliana',
              it: 'Stazione di Lubiana',
              nl: 'Station Ljubljana',
              pt: 'Estação de Ljubljana',
              tr: 'Ljubljana Tren İstasyonu',
              ru: 'Железнодорожная станция Любляна',
              zh: '卢布尔雅那火车站',
              ar: 'محطة ليوبليانا للسكك الحديدية',
            },
            SNDKR: {
              en: 'Port of Dakar',
              fr: 'Port de Dakar',
              de: 'Hafen Dakar',
              es: 'Puerto de Dakar',
              it: 'Porto di Dakar',
              nl: 'Haven van Dakar',
              pt: 'Porto de Dakar',
              tr: 'Dakar Limanı',
              ru: 'Порт Дакар',
              zh: '达喀尔港',
              ar: 'ميناء داكار',
            },
            SNDSS: {
              en: 'Dakar Blaise Diagne International Airport',
              fr: 'Aéroport international de Dakar Blaise Diagne',
              de: 'Internationaler Flughafen Dakar Blaise Diagne',
              es: 'Aeropuerto Internacional de Dakar Blaise Diagne',
              it: 'Aeroporto Internazionale di Dakar Blaise Diagne',
              nl: 'Internationale Luchthaven Dakar Blaise Diagne',
              pt: 'Aeroporto Internacional de Dakar Blaise Diagne',
              tr: 'Dakar Blaise Diagne Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дакар имени Блеза Диана',
              zh: '达喀尔布莱兹·迪亚涅国际机场',
              ar: 'مطار داكار بليز دياغني الدولي',
            },
            SNDKR_RAIL: {
              en: 'Dakar Railway Station',
              fr: 'Gare de Dakar',
              de: 'Bahnhof Dakar',
              es: 'Estación de Dakar',
              it: 'Stazione di Dakar',
              nl: 'Station Dakar',
              pt: 'Estação de Dakar',
              tr: 'Dakar Tren İstasyonu',
              ru: 'Железнодорожная станция Дакар',
              zh: '达喀尔火车站',
              ar: 'محطة داكار للسكك الحديدية',
            },
            SCPRS: {
              en: 'Port of Praslin',
              fr: 'Port de Praslin',
              de: 'Hafen Praslin',
              es: 'Puerto de Praslin',
              it: 'Porto di Praslin',
              nl: 'Haven van Praslin',
              pt: 'Porto de Praslin',
              tr: 'Praslin Limanı',
              ru: 'Порт Праслин',
              zh: '普拉兰港',
              ar: 'ميناء براسلين',
            },
            SCVIC_AIR: {
              en: 'Mahé Seychelles International Airport',
              fr: 'Aéroport international de Mahé Seychelles',
              de: 'Internationaler Flughafen Mahé Seychellen',
              es: 'Aeropuerto Internacional de Mahé Seychelles',
              it: 'Aeroporto Internazionale di Mahé Seychelles',
              nl: 'Internationale Luchthaven Mahé Seychellen',
              pt: 'Aeroporto Internacional de Mahé Seychelles',
              tr: 'Mahé Seyşeller Uluslararası Havaalanı',
              ru: 'Международный аэропорт Маэ Сейшелы',
              zh: '马埃塞舌尔国际机场',
              ar: 'مطار ماهي سيشيل الدولي',
            },
            SCPRS_AIR: {
              en: 'Praslin Airport',
              fr: 'Aéroport de Praslin',
              de: 'Flughafen Praslin',
              es: 'Aeropuerto de Praslin',
              it: 'Aeroporto di Praslin',
              nl: 'Luchthaven Praslin',
              pt: 'Aeroporto de Praslin',
              tr: 'Praslin Havaalanı',
              ru: 'Аэропорт Праслин',
              zh: '普拉兰机场',
              ar: 'مطار براسلين',
            },
            THLCH: {
              en: 'Port of Laem Chabang',
              fr: 'Port de Laem Chabang',
              de: 'Hafen Laem Chabang',
              es: 'Puerto de Laem Chabang',
              it: 'Porto di Laem Chabang',
              nl: 'Haven van Laem Chabang',
              pt: 'Porto de Laem Chabang',
              tr: 'Laem Chabang Limanı',
              ru: 'Порт Лаем Чабанг',
              zh: '林查班港',
              ar: 'ميناء ليم تشابانغ',
            },
            THBKK: {
              en: 'Port of Bangkok',
              fr: 'Port de Bangkok',
              de: 'Hafen Bangkok',
              es: 'Puerto de Bangkok',
              it: 'Porto di Bangkok',
              nl: 'Haven van Bangkok',
              pt: 'Porto de Bangkok',
              tr: 'Bangkok Limanı',
              ru: 'Порт Бангкок',
              zh: '曼谷港',
              ar: 'ميناء بانكوك',
            },
            THBKK_AIR: {
              en: 'Bangkok Suvarnabhumi Airport',
              fr: 'Aéroport de Bangkok Suvarnabhumi',
              de: 'Flughafen Bangkok Suvarnabhumi',
              es: 'Aeropuerto de Bangkok Suvarnabhumi',
              it: 'Aeroporto di Bangkok Suvarnabhumi',
              nl: 'Luchthaven Bangkok Suvarnabhumi',
              pt: 'Aeroporto de Bangkok Suvarnabhumi',
              tr: 'Bangkok Suvarnabhumi Havaalanı',
              ru: 'Аэропорт Бангкок Суварнабхуми',
              zh: '曼谷素万那普机场',
              ar: 'مطار بانكوك سوفارنابومي',
            },
            TRAMB: {
              en: 'Port of Ambarli',
              fr: "Port d'Ambarli",
              de: 'Hafen Ambarli',
              es: 'Puerto de Ambarli',
              it: 'Porto di Ambarli',
              nl: 'Haven van Ambarli',
              pt: 'Porto de Ambarli',
              tr: 'Ambarlı Limanı',
              ru: 'Порт Амбарлы',
              zh: '安巴利港',
              ar: 'ميناء أمبارلي',
            },
            TRIST: {
              en: 'Port of Istanbul',
              fr: "Port d'Istanbul",
              de: 'Hafen Istanbul',
              es: 'Puerto de Estambul',
              it: 'Porto di Istanbul',
              nl: 'Haven van Istanbul',
              pt: 'Porto de Istambul',
              tr: 'İstanbul Limanı',
              ru: 'Порт Стамбул',
              zh: '伊斯坦布尔港',
              ar: 'ميناء اسطنبول',
            },
            TRIZM: {
              en: 'Port of Izmir',
              fr: "Port d'Izmir",
              de: 'Hafen Izmir',
              es: 'Puerto de Esmirna',
              it: 'Porto di Smirne',
              nl: 'Haven van Izmir',
              pt: 'Porto de Esmirna',
              tr: 'İzmir Limanı',
              ru: 'Порт Измир',
              zh: '伊兹密尔港',
              ar: 'ميناء إزمير',
            },
            TRIST_AIR: {
              en: 'Istanbul Airport',
              fr: "Aéroport d'Istanbul",
              de: 'Flughafen Istanbul',
              es: 'Aeropuerto de Estambul',
              it: 'Aeroporto di Istanbul',
              nl: 'Luchthaven Istanbul',
              pt: 'Aeroporto de Istambul',
              tr: 'İstanbul Havaalanı',
              ru: 'Аэропорт Стамбул',
              zh: '伊斯坦布尔机场',
              ar: 'مطار اسطنبول',
            },
            TRSAW: {
              en: 'Sabiha Gökçen Airport',
              fr: 'Aéroport de Sabiha Gökçen',
              de: 'Flughafen Sabiha Gökçen',
              es: 'Aeropuerto de Sabiha Gökçen',
              it: 'Aeroporto di Sabiha Gökçen',
              nl: 'Luchthaven Sabiha Gökçen',
              pt: 'Aeroporto de Sabiha Gökçen',
              tr: 'Sabiha Gökçen Havaalanı',
              ru: 'Аэропорт Сабиха Гёкчен',
              zh: '萨比哈·格克琴机场',
              ar: 'مطار صبيحة غوكتشين',
            },
            TRIZM_AIR: {
              en: 'Izmir Adnan Menderes Airport',
              fr: "Aéroport d'Izmir Adnan Menderes",
              de: 'Flughafen Izmir Adnan Menderes',
              es: 'Aeropuerto de Esmirna Adnan Menderes',
              it: 'Aeroporto di Smirne Adnan Menderes',
              nl: 'Luchthaven Izmir Adnan Menderes',
              pt: 'Aeroporto de Esmirna Adnan Menderes',
              tr: 'İzmir Adnan Menderes Havaalanı',
              ru: 'Аэропорт Измир имени Аднана Мендереса',
              zh: '伊兹密尔阿德南·门德雷斯机场',
              ar: 'مطار إزمير عدنان مندريس',
            },
            TWTPE: {
              en: 'Port of Taipei',
              fr: 'Port de Taipei',
              de: 'Hafen Taipei',
              es: 'Puerto de Taipéi',
              it: 'Porto di Taipei',
              nl: 'Haven van Taipei',
              pt: 'Porto de Taipei',
              tr: 'Taipei Limanı',
              ru: 'Порт Тайбэй',
              zh: '台北港',
              ar: 'ميناء تايبيه',
            },
            TWTCG: {
              en: 'Port of Taichung',
              fr: 'Port de Taichung',
              de: 'Hafen Taichung',
              es: 'Puerto de Taichung',
              it: 'Porto di Taichung',
              nl: 'Haven van Taichung',
              pt: 'Porto de Taichung',
              tr: 'Taichung Limanı',
              ru: 'Порт Тайчжун',
              zh: '台中港',
              ar: 'ميناء تايتشونغ',
            },
            TWKHH_AIR: {
              en: 'Kaohsiung International Airport',
              fr: 'Aéroport international de Kaohsiung',
              de: 'Internationaler Flughafen Kaohsiung',
              es: 'Aeropuerto Internacional de Kaohsiung',
              it: 'Aeroporto Internazionale di Kaohsiung',
              nl: 'Internationale Luchthaven Kaohsiung',
              pt: 'Aeroporto Internacional de Kaohsiung',
              tr: 'Kaohsiung Uluslararası Havaalanı',
              ru: 'Международный аэропорт Гаосюн',
              zh: '高雄国际机场',
              ar: 'مطار كاوهسيونغ الدولي',
            },
            TWTPE_RAIL: {
              en: 'Taipei Main Station',
              fr: 'Gare principale de Taipei',
              de: 'Hauptbahnhof Taipei',
              es: 'Estación Principal de Taipéi',
              it: 'Stazione Principale di Taipei',
              nl: 'Hoofdstation Taipei',
              pt: 'Estação Principal de Taipei',
              tr: 'Taipei Ana İstasyonu',
              ru: 'Главный вокзал Тайбэй',
              zh: '台北车站',
              ar: 'محطة تايبيه الرئيسية',
            },
            TWKHH_RAIL: {
              en: 'Kaohsiung Railway Station',
              fr: 'Gare de Kaohsiung',
              de: 'Bahnhof Kaohsiung',
              es: 'Estación de Kaohsiung',
              it: 'Stazione di Kaohsiung',
              nl: 'Station Kaohsiung',
              pt: 'Estação de Kaohsiung',
              tr: 'Kaohsiung Tren İstasyonu',
              ru: 'Железнодорожная станция Гаосюн',
              zh: '高雄车站',
              ar: 'محطة كاوهسيونغ للسكك الحديدية',
            },
            TNTU1: {
              en: 'Port of Tunis',
              fr: 'Port de Tunis',
              de: 'Hafen Tunis',
              es: 'Puerto de Túnez',
              it: 'Porto di Tunisi',
              nl: 'Haven van Tunis',
              pt: 'Porto de Tunes',
              tr: 'Tunus Limanı',
              ru: 'Порт Тунис',
              zh: '突尼斯港',
              ar: 'ميناء تونس',
            },
            TNSFA: {
              en: 'Port of Sfax',
              fr: 'Port de Sfax',
              de: 'Hafen Sfax',
              es: 'Puerto de Sfax',
              it: 'Porto di Sfax',
              nl: 'Haven van Sfax',
              pt: 'Porto de Sfax',
              tr: 'Sfaks Limanı',
              ru: 'Порт Сфакс',
              zh: '斯法克斯港',
              ar: 'ميناء صفاقس',
            },
            TNRAD: {
              en: 'Port of Radès',
              fr: 'Port de Radès',
              de: 'Hafen Radès',
              es: 'Puerto de Radès',
              it: 'Porto di Radès',
              nl: 'Haven van Radès',
              pt: 'Porto de Radès',
              tr: 'Radès Limanı',
              ru: 'Порт Радес',
              zh: '拉代斯港',
              ar: 'ميناء رادس',
            },
            TNTU1_AIR: {
              en: 'Tunis-Carthage Airport',
              fr: 'Aéroport de Tunis-Carthage',
              de: 'Flughafen Tunis-Karthago',
              es: 'Aeropuerto de Túnez-Cartago',
              it: 'Aeroporto di Tunisi-Cartagine',
              nl: 'Luchthaven Tunis-Carthago',
              pt: 'Aeroporto de Tunes-Cartago',
              tr: 'Tunus-Kartaca Havaalanı',
              ru: 'Аэропорт Тунис-Карфаген',
              zh: '突尼斯-迦太基机场',
              ar: 'مطار تونس قرطاج',
            },
            TNTU1_RAIL: {
              en: 'Tunis Central Station',
              fr: 'Gare centrale de Tunis',
              de: 'Hauptbahnhof Tunis',
              es: 'Estación Central de Túnez',
              it: 'Stazione Centrale di Tunisi',
              nl: 'Centraal Station Tunis',
              pt: 'Estação Central de Tunes',
              tr: 'Tunus Merkez İstasyonu',
              ru: 'Центральный вокзал Тунис',
              zh: '突尼斯中央车站',
              ar: 'محطة تونس المركزية',
            },
            TTPOS: {
              en: 'Port of Port of Spain',
              fr: 'Port de Port of Spain',
              de: 'Hafen Port of Spain',
              es: 'Puerto de Puerto España',
              it: 'Porto di Port of Spain',
              nl: 'Haven van Port of Spain',
              pt: 'Porto de Port of Spain',
              tr: 'Port of Spain Limanı',
              ru: 'Порт Порт-оф-Спейн',
              zh: '西班牙港港口',
              ar: 'ميناء بورت أوف سبين',
            },
            TTCOU: {
              en: 'Port of Point Lisas',
              fr: 'Port de Point Lisas',
              de: 'Hafen Point Lisas',
              es: 'Puerto de Point Lisas',
              it: 'Porto di Point Lisas',
              nl: 'Haven van Point Lisas',
              pt: 'Porto de Point Lisas',
              tr: 'Point Lisas Limanı',
              ru: 'Порт Пойнт Лисас',
              zh: '利萨斯角港',
              ar: 'ميناء بوينت ليساس',
            },
            TTPOS_AIR: {
              en: 'Port of Spain Piarco International Airport',
              fr: 'Aéroport international de Port of Spain Piarco',
              de: 'Internationaler Flughafen Port of Spain Piarco',
              es: 'Aeropuerto Internacional de Puerto España Piarco',
              it: 'Aeroporto Internazionale di Port of Spain Piarco',
              nl: 'Internationale Luchthaven Port of Spain Piarco',
              pt: 'Aeroporto Internacional de Port of Spain Piarco',
              tr: 'Port of Spain Piarco Uluslararası Havaalanı',
              ru: 'Международный аэропорт Порт-оф-Спейн Пиарко',
              zh: '西班牙港皮亚尔科国际机场',
              ar: 'مطار بورت أوف سبين بيارko الدولي',
            },
            TZMTW: {
              en: 'Port of Mtwara',
              fr: 'Port de Mtwara',
              de: 'Hafen Mtwara',
              es: 'Puerto de Mtwara',
              it: 'Porto di Mtwara',
              nl: 'Haven van Mtwara',
              pt: 'Porto de Mtwara',
              tr: 'Mtwara Limanı',
              ru: 'Порт Мтвара',
              zh: '姆特瓦拉港',
              ar: 'ميناء متوارا',
            },
            TZMZA: {
              en: 'Port of Mwanza',
              fr: 'Port de Mwanza',
              de: 'Hafen Mwanza',
              es: 'Puerto de Mwanza',
              it: 'Porto di Mwanza',
              nl: 'Haven van Mwanza',
              pt: 'Porto de Mwanza',
              tr: 'Mwanza Limanı',
              ru: 'Порт Мванза',
              zh: '姆万扎港',
              ar: 'ميناء موانزا',
            },
            TZDAR_AIR: {
              en: 'Dar es Salaam Julius Nyerere International Airport',
              fr: 'Aéroport international de Dar es Salaam Julius Nyerere',
              de: 'Internationaler Flughafen Dar es Salaam Julius Nyerere',
              es: 'Aeropuerto Internacional de Dar es Salaam Julius Nyerere',
              it: 'Aeroporto Internazionale di Dar es Salaam Julius Nyerere',
              nl: 'Internationale Luchthaven Dar es Salaam Julius Nyerere',
              pt: 'Aeroporto Internacional de Dar es Salaam Julius Nyerere',
              tr: 'Dar es Salaam Julius Nyerere Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дар-эс-Салам имени Джулиуса Ньерере',
              zh: '达累斯萨拉姆朱利叶斯·尼雷尔国际机场',
              ar: 'مطار دار السلام جوليوس نيريري الدولي',
            },
            TZKIL: {
              en: 'Kilimanjaro International Airport',
              fr: 'Aéroport international du Kilimandjaro',
              de: 'Internationaler Flughafen Kilimandscharo',
              es: 'Aeropuerto Internacional del Kilimanjaro',
              it: 'Aeroporto Internazionale del Kilimanjaro',
              nl: 'Internationale Luchthaven Kilimanjaro',
              pt: 'Aeroporto Internacional do Kilimanjaro',
              tr: 'Kilimanjaro Uluslararası Havaalanı',
              ru: 'Международный аэропорт Килиманджаро',
              zh: '乞力马扎罗国际机场',
              ar: 'مطار كليمنجارو الدولي',
            },
            TZDAR_RAIL: {
              en: 'Dar es Salaam Railway Station',
              fr: 'Gare de Dar es Salaam',
              de: 'Bahnhof Dar es Salaam',
              es: 'Estación de Dar es Salaam',
              it: 'Stazione di Dar es Salaam',
              nl: 'Station Dar es Salaam',
              pt: 'Estação de Dar es Salaam',
              tr: 'Dar es Salaam Tren İstasyonu',
              ru: 'Железнодорожная станция Дар-эс-Салам',
              zh: '达累斯萨拉姆火车站',
              ar: 'محطة دار السلام للسكك الحديدية',
            },
            TZMZA_RAIL: {
              en: 'Mwanza Railway Station',
              fr: 'Gare de Mwanza',
              de: 'Bahnhof Mwanza',
              es: 'Estación de Mwanza',
              it: 'Stazione di Mwanza',
              nl: 'Station Mwanza',
              pt: 'Estação de Mwanza',
              tr: 'Mwanza Tren İstasyonu',
              ru: 'Железнодорожная станция Мванза',
              zh: '姆万扎火车站',
              ar: 'محطة موانزا للسكك الحديدية',
            },
            USLAX: {
              en: 'Port of Los Angeles',
              fr: 'Port de Los Angeles',
              de: 'Hafen Los Angeles',
              es: 'Puerto de Los Ángeles',
              it: 'Porto di Los Angeles',
              nl: 'Haven van Los Angeles',
              pt: 'Porto de Los Angeles',
              tr: 'Los Angeles Limanı',
              ru: 'Порт Лос-Анджелес',
              zh: '洛杉矶港',
              ar: 'ميناء لوس أنجلوس',
            },
            USLGB: {
              en: 'Port of Long Beach',
              fr: 'Port de Long Beach',
              de: 'Hafen Long Beach',
              es: 'Puerto de Long Beach',
              it: 'Porto di Long Beach',
              nl: 'Haven van Long Beach',
              pt: 'Porto de Long Beach',
              tr: 'Long Beach Limanı',
              ru: 'Порт Лонг-Бич',
              zh: '长滩港',
              ar: 'ميناء لونغ بيتش',
            },
            USNYC: {
              en: 'Port of New York/New Jersey',
              fr: 'Port de New York/New Jersey',
              de: 'Hafen New York/New Jersey',
              es: 'Puerto de Nueva York/Nueva Jersey',
              it: 'Porto di New York/New Jersey',
              nl: 'Haven van New York/New Jersey',
              pt: 'Porto de Nova York/Nova Jersey',
              tr: 'New York/New Jersey Limanı',
              ru: 'Порт Нью-Йорк/Нью-Джерси',
              zh: '纽约/新泽西港',
              ar: 'ميناء نيويورك/نيو جيرسي',
            },
            USSAV: {
              en: 'Port of Savannah',
              fr: 'Port de Savannah',
              de: 'Hafen Savannah',
              es: 'Puerto de Savannah',
              it: 'Porto di Savannah',
              nl: 'Haven van Savannah',
              pt: 'Porto de Savannah',
              tr: 'Savannah Limanı',
              ru: 'Порт Саванна',
              zh: '萨凡纳港',
              ar: 'ميناء سافانا',
            },
            USSEA: {
              en: 'Port of Seattle',
              fr: 'Port de Seattle',
              de: 'Hafen Seattle',
              es: 'Puerto de Seattle',
              it: 'Porto di Seattle',
              nl: 'Haven van Seattle',
              pt: 'Porto de Seattle',
              tr: 'Seattle Limanı',
              ru: 'Порт Сиэтл',
              zh: '西雅图港',
              ar: 'ميناء سياتل',
            },
            USTAC: {
              en: 'Port of Tacoma',
              fr: 'Port de Tacoma',
              de: 'Hafen Tacoma',
              es: 'Puerto de Tacoma',
              it: 'Porto di Tacoma',
              nl: 'Haven van Tacoma',
              pt: 'Porto de Tacoma',
              tr: 'Tacoma Limanı',
              ru: 'Порт Такома',
              zh: '塔科马港',
              ar: 'ميناء تاكوما',
            },
            USHOU: {
              en: 'Port of Houston',
              fr: 'Port de Houston',
              de: 'Hafen Houston',
              es: 'Puerto de Houston',
              it: 'Porto di Houston',
              nl: 'Haven van Houston',
              pt: 'Porto de Houston',
              tr: 'Houston Limanı',
              ru: 'Порт Хьюстон',
              zh: '休斯顿港',
              ar: 'ميناء هيوستن',
            },
            USMIA: {
              en: 'Port of Miami',
              fr: 'Port de Miami',
              de: 'Hafen Miami',
              es: 'Puerto de Miami',
              it: 'Porto di Miami',
              nl: 'Haven van Miami',
              pt: 'Porto de Miami',
              tr: 'Miami Limanı',
              ru: 'Порт Майами',
              zh: '迈阿密港',
              ar: 'ميناء ميامي',
            },
            USMEM: {
              en: 'Memphis International Airport',
              fr: 'Aéroport international de Memphis',
              de: 'Internationaler Flughafen Memphis',
              es: 'Aeropuerto Internacional de Memphis',
              it: 'Aeroporto Internazionale di Memphis',
              nl: 'Internationale Luchthaven Memphis',
              pt: 'Aeroporto Internacional de Memphis',
              tr: 'Memphis Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мемфис',
              zh: '孟菲斯国际机场',
              ar: 'مطار ممفيس الدولي',
            },
            USANC: {
              en: 'Anchorage Ted Stevens Airport',
              fr: "Aéroport Ted Stevens d'Anchorage",
              de: 'Flughafen Anchorage Ted Stevens',
              es: 'Aeropuerto Ted Stevens de Anchorage',
              it: 'Aeroporto Ted Stevens di Anchorage',
              nl: 'Luchthaven Anchorage Ted Stevens',
              pt: 'Aeroporto Ted Stevens de Anchorage',
              tr: 'Anchorage Ted Stevens Havaalanı',
              ru: 'Аэропорт Анкоридж имени Теда Стивенса',
              zh: '安克雷奇泰德·史蒂文斯机场',
              ar: 'مطار أنكوريج تيد ستيفنز',
            },
            USMIA_AIR: {
              en: 'Miami International Airport',
              fr: 'Aéroport international de Miami',
              de: 'Internationaler Flughafen Miami',
              es: 'Aeropuerto Internacional de Miami',
              it: 'Aeroporto Internazionale di Miami',
              nl: 'Internationale Luchthaven Miami',
              pt: 'Aeroporto Internacional de Miami',
              tr: 'Miami Uluslararası Havaalanı',
              ru: 'Международный аэропорт Майами',
              zh: '迈阿密国际机场',
              ar: 'مطار ميامي الدولي',
            },
            USNYC_RAIL: {
              en: 'New York Penn Station',
              fr: 'Gare Pennsylvania de New York',
              de: 'Bahnhof New York Penn Station',
              es: 'Estación Pennsylvania de Nueva York',
              it: 'Stazione Pennsylvania di New York',
              nl: 'Penn Station New York',
              pt: 'Estação Pennsylvania de Nova York',
              tr: 'New York Penn İstasyonu',
              ru: 'Пенсильванский вокзал Нью-Йорк',
              zh: '纽约宾夕法尼亚车站',
              ar: 'محطة نيويورك بنسلفانيا',
            },
            USCHI_RAIL: {
              en: 'Chicago Union Station',
              fr: 'Gare Union de Chicago',
              de: 'Union Station Chicago',
              es: 'Estación Union de Chicago',
              it: 'Stazione Union di Chicago',
              nl: 'Union Station Chicago',
              pt: 'Estação Union de Chicago',
              tr: 'Chicago Union İstasyonu',
              ru: 'Юнион-стейшн Чикаго',
              zh: '芝加哥联合车站',
              ar: 'محطة شيكاغو يونيون',
            },
            USLAX_RAIL: {
              en: 'Los Angeles Union Station',
              fr: 'Gare Union de Los Angeles',
              de: 'Union Station Los Angeles',
              es: 'Estación Union de Los Ángeles',
              it: 'Stazione Union di Los Angeles',
              nl: 'Union Station Los Angeles',
              pt: 'Estação Union de Los Angeles',
              tr: 'Los Angeles Union İstasyonu',
              ru: 'Юнион-стейшн Лос-Анджелес',
              zh: '洛杉矶联合车站',
              ar: 'محطة لوس أنجلوس يونيون',
            },
            UAODE: {
              en: 'Port of Odesa',
              fr: "Port d'Odessa",
              de: 'Hafen Odessa',
              es: 'Puerto de Odesa',
              it: 'Porto di Odessa',
              nl: 'Haven van Odessa',
              pt: 'Porto de Odessa',
              tr: 'Odessa Limanı',
              ru: 'Порт Одесса',
              zh: '敖德萨港',
              ar: 'ميناء أوديسا',
            },
            UAIEV: {
              en: 'Port of Chornomorsk',
              fr: 'Port de Chornomorsk',
              de: 'Hafen Tschornomorsk',
              es: 'Puerto de Chornomorsk',
              it: 'Porto di Chornomorsk',
              nl: 'Haven van Chornomorsk',
              pt: 'Porto de Chornomorsk',
              tr: 'Çornomorsk Limanı',
              ru: 'Порт Черноморск',
              zh: '切尔诺莫尔斯克港',
              ar: 'ميناء تشورنومورسك',
            },
            UAMYK: {
              en: 'Port of Mykolaiv',
              fr: 'Port de Mykolaiv',
              de: 'Hafen Mykolajiw',
              es: 'Puerto de Mykolaiv',
              it: 'Porto di Mykolaiv',
              nl: 'Haven van Mykolaiv',
              pt: 'Porto de Mykolaiv',
              tr: 'Mikolayiv Limanı',
              ru: 'Порт Николаев',
              zh: '尼古拉耶夫港',
              ar: 'ميناء ميكولايف',
            },
            UAKBP: {
              en: 'Kyiv Boryspil International Airport',
              fr: 'Aéroport international de Kiev Boryspil',
              de: 'Internationaler Flughafen Kiew Boryspil',
              es: 'Aeropuerto Internacional de Kiev Boryspil',
              it: 'Aeroporto Internazionale di Kiev Boryspil',
              nl: 'Internationale Luchthaven Kiev Boryspil',
              pt: 'Aeroporto Internacional de Kiev Boryspil',
              tr: 'Kiev Boryspil Uluslararası Havaalanı',
              ru: 'Международный аэропорт Киев Борисполь',
              zh: '基辅鲍里斯波尔国际机场',
              ar: 'مطار كييف بوريسبيل الدولي',
            },
            UAODS: {
              en: 'Odesa International Airport',
              fr: "Aéroport international d'Odessa",
              de: 'Internationaler Flughafen Odessa',
              es: 'Aeropuerto Internacional de Odesa',
              it: 'Aeroporto Internazionale di Odessa',
              nl: 'Internationale Luchthaven Odessa',
              pt: 'Aeroporto Internacional de Odessa',
              tr: 'Odessa Uluslararası Havaalanı',
              ru: 'Международный аэропорт Одесса',
              zh: '敖德萨国际机场',
              ar: 'مطار أوديسا الدولي',
            },
            UAKIV_RAIL: {
              en: 'Kyiv Central Railway Station',
              fr: 'Gare centrale de Kiev',
              de: 'Hauptbahnhof Kiew',
              es: 'Estación Central de Kiev',
              it: 'Stazione Centrale di Kiev',
              nl: 'Centraal Station Kiev',
              pt: 'Estação Central de Kiev',
              tr: 'Kiev Merkez Tren İstasyonu',
              ru: 'Центральный железнодорожный вокзал Киев',
              zh: '基辅中央火车站',
              ar: 'محطة كييف المركزية للسكك الحديدية',
            },
            UAODE_RAIL: {
              en: 'Odesa Railway Station',
              fr: "Gare d'Odessa",
              de: 'Bahnhof Odessa',
              es: 'Estación de Odesa',
              it: 'Stazione di Odessa',
              nl: 'Station Odessa',
              pt: 'Estação de Odessa',
              tr: 'Odessa Tren İstasyonu',
              ru: 'Железнодорожная станция Одесса',
              zh: '敖德萨火车站',
              ar: 'محطة أوديسا للسكك الحديدية',
            },
            UYMVD: {
              en: 'Port of Montevideo',
              fr: 'Port de Montevideo',
              de: 'Hafen Montevideo',
              es: 'Puerto de Montevideo',
              it: 'Porto di Montevideo',
              nl: 'Haven van Montevideo',
              pt: 'Porto de Montevidéu',
              tr: 'Montevideo Limanı',
              ru: 'Порт Монтевидео',
              zh: '蒙得维的亚港',
              ar: 'ميناء مونتيفيديو',
            },
            UYMVD_AIR: {
              en: 'Montevideo Carrasco International Airport',
              fr: 'Aéroport international de Montevideo Carrasco',
              de: 'Internationaler Flughafen Montevideo Carrasco',
              es: 'Aeropuerto Internacional de Montevideo Carrasco',
              it: 'Aeroporto Internazionale di Montevideo Carrasco',
              nl: 'Internationale Luchthaven Montevideo Carrasco',
              pt: 'Aeroporto Internacional de Montevidéu Carrasco',
              tr: 'Montevideo Carrasco Uluslararası Havaalanı',
              ru: 'Международный аэропорт Монтевидео Карраско',
              zh: '蒙得维的亚卡拉斯科国际机场',
              ar: 'مطار مونتيفيديو كاراسكو الدولي',
            },
            UYMVD_RAIL: {
              en: 'Montevideo Central Station',
              fr: 'Gare centrale de Montevideo',
              de: 'Hauptbahnhof Montevideo',
              es: 'Estación Central de Montevideo',
              it: 'Stazione Centrale di Montevideo',
              nl: 'Centraal Station Montevideo',
              pt: 'Estação Central de Montevidéu',
              tr: 'Montevideo Merkez İstasyonu',
              ru: 'Центральный вокзал Монтевидео',
              zh: '蒙得维的亚中央车站',
              ar: 'محطة مونتيفيديو المركزية',
            },
            UGKMP: {
              en: 'Port of Kampala',
              fr: 'Port de Kampala',
              de: 'Hafen Kampala',
              es: 'Puerto de Kampala',
              it: 'Porto di Kampala',
              nl: 'Haven van Kampala',
              pt: 'Porto de Kampala',
              tr: 'Kampala Limanı',
              ru: 'Порт Кампала',
              zh: '坎帕拉港',
              ar: 'ميناء كامبالا',
            },
            UGENT: {
              en: 'Port of Entebbe',
              fr: "Port d'Entebbe",
              de: 'Hafen Entebbe',
              es: 'Puerto de Entebbe',
              it: 'Porto di Entebbe',
              nl: 'Haven van Entebbe',
              pt: 'Porto de Entebbe',
              tr: 'Entebbe Limanı',
              ru: 'Порт Энтеббе',
              zh: '恩德培港',
              ar: 'ميناء عنتيبي',
            },
            UGKMP_RAIL: {
              en: 'Kampala Railway Station',
              fr: 'Gare de Kampala',
              de: 'Bahnhof Kampala',
              es: 'Estación de Kampala',
              it: 'Stazione di Kampala',
              nl: 'Station Kampala',
              pt: 'Estação de Kampala',
              tr: 'Kampala Tren İstasyonu',
              ru: 'Железнодорожная станция Кампала',
              zh: '坎帕拉火车站',
              ar: 'محطة كامبالا للسكك الحديدية',
            },
            VNSGN: {
              en: 'Port of Ho Chi Minh City',
              fr: "Port d'Hô Chi Minh-Ville",
              de: 'Hafen Ho-Chi-Minh-Stadt',
              es: 'Puerto de Ciudad Ho Chi Minh',
              it: 'Porto di Ho Chi Minh',
              nl: 'Haven van Ho Chi Minh Stad',
              pt: 'Porto de Ho Chi Minh',
              tr: 'Ho Chi Minh Şehri Limanı',
              ru: 'Порт Хошимин',
              zh: '胡志明市港',
              ar: 'ميناء هو تشي مين',
            },
            VNHAN: {
              en: 'Port of Haiphong',
              fr: 'Port de Haïphong',
              de: 'Hafen Haiphong',
              es: 'Puerto de Haiphong',
              it: 'Porto di Haiphong',
              nl: 'Haven van Haiphong',
              pt: 'Porto de Haiphong',
              tr: 'Haiphong Limanı',
              ru: 'Порт Хайфон',
              zh: '海防港',
              ar: 'ميناء هايفونغ',
            },
            VNDAN: {
              en: 'Port of Da Nang',
              fr: 'Port de Da Nang',
              de: 'Hafen Da Nang',
              es: 'Puerto de Da Nang',
              it: 'Porto di Da Nang',
              nl: 'Haven van Da Nang',
              pt: 'Porto de Da Nang',
              tr: 'Da Nang Limanı',
              ru: 'Порт Дананг',
              zh: '岘港',
              ar: 'ميناء دا نانغ',
            },
            VNSGN_AIR: {
              en: 'Ho Chi Minh City Tan Son Nhat International Airport',
              fr: "Aéroport international Tan Son Nhat d'Hô Chi Minh-Ville",
              de: 'Internationaler Flughafen Tan Son Nhat Ho-Chi-Minh-Stadt',
              es: 'Aeropuerto Internacional Tan Son Nhat de Ciudad Ho Chi Minh',
              it: 'Aeroporto Internazionale Tan Son Nhat di Ho Chi Minh',
              nl: 'Internationale Luchthaven Tan Son Nhat Ho Chi Minh Stad',
              pt: 'Aeroporto Internacional Tan Son Nhat de Ho Chi Minh',
              tr: 'Ho Chi Minh Şehri Tan Son Nhat Uluslararası Havaalanı',
              ru: 'Международный аэропорт Таншоннят Хошимин',
              zh: '胡志明市新山一国际机场',
              ar: 'مطار هو تشي مين تان سون نهات الدولي',
            },
            VNHAN_AIR: {
              en: 'Hanoi Noi Bai International Airport',
              fr: 'Aéroport international Noi Bai de Hanoï',
              de: 'Internationaler Flughafen Noi Bai Hanoi',
              es: 'Aeropuerto Internacional Noi Bai de Hanoi',
              it: 'Aeroporto Internazionale Noi Bai di Hanoi',
              nl: 'Internationale Luchthaven Noi Bai Hanoi',
              pt: 'Aeroporto Internacional Noi Bai de Hanói',
              tr: 'Hanoi Noi Bai Uluslararası Havaalanı',
              ru: 'Международный аэропорт Нойбай Ханой',
              zh: '河内内排国际机场',
              ar: 'مطار هانوي نوي باي الدولي',
            },
            VNDAN_AIR: {
              en: 'Da Nang International Airport',
              fr: 'Aéroport international de Da Nang',
              de: 'Internationaler Flughafen Da Nang',
              es: 'Aeropuerto Internacional de Da Nang',
              it: 'Aeroporto Internazionale di Da Nang',
              nl: 'Internationale Luchthaven Da Nang',
              pt: 'Aeroporto Internacional de Da Nang',
              tr: 'Da Nang Uluslararası Havaalanı',
              ru: 'Международный аэропорт Дананг',
              zh: '岘港国际机场',
              ar: 'مطار دا نانغ الدولي',
            },
            VNHAN_RAIL: {
              en: 'Hanoi Railway Station',
              fr: 'Gare de Hanoï',
              de: 'Bahnhof Hanoi',
              es: 'Estación de Hanoi',
              it: 'Stazione di Hanoi',
              nl: 'Station Hanoi',
              pt: 'Estação de Hanói',
              tr: 'Hanoi Tren İstasyonu',
              ru: 'Железнодорожная станция Ханой',
              zh: '河内火车站',
              ar: 'محطة هانوي للسكك الحديدية',
            },
            VNSGN_RAIL: {
              en: 'Ho Chi Minh City Railway Station',
              fr: "Gare d'Hô Chi Minh-Ville",
              de: 'Bahnhof Ho-Chi-Minh-Stadt',
              es: 'Estación de Ciudad Ho Chi Minh',
              it: 'Stazione di Ho Chi Minh',
              nl: 'Station Ho Chi Minh Stad',
              pt: 'Estação de Ho Chi Minh',
              tr: 'Ho Chi Minh Şehri Tren İstasyonu',
              ru: 'Железнодорожная станция Хошимин',
              zh: '胡志明市火车站',
              ar: 'محطة هو تشي مين للسكك الحديدية',
            },
            VELAS: {
              en: 'Port of La Guaira',
              fr: 'Port de La Guaira',
              de: 'Hafen La Guaira',
              es: 'Puerto de La Guaira',
              it: 'Porto di La Guaira',
              nl: 'Haven van La Guaira',
              pt: 'Porto de La Guaira',
              tr: 'La Guaira Limanı',
              ru: 'Порт Ла-Гуайра',
              zh: '拉瓜伊拉港',
              ar: 'ميناء لا غوايرا',
            },
            VEPZO: {
              en: 'Port of Puerto Cabello',
              fr: 'Port de Puerto Cabello',
              de: 'Hafen Puerto Cabello',
              es: 'Puerto de Puerto Cabello',
              it: 'Porto di Puerto Cabello',
              nl: 'Haven van Puerto Cabello',
              pt: 'Porto de Puerto Cabello',
              tr: 'Puerto Cabello Limanı',
              ru: 'Порт Пуэрто-Кабельо',
              zh: '卡贝略港',
              ar: 'ميناء بويرتو كابيلو',
            },
            VEMCB: {
              en: 'Port of Maracaibo',
              fr: 'Port de Maracaibo',
              de: 'Hafen Maracaibo',
              es: 'Puerto de Maracaibo',
              it: 'Porto di Maracaibo',
              nl: 'Haven van Maracaibo',
              pt: 'Porto de Maracaibo',
              tr: 'Maracaibo Limanı',
              ru: 'Порт Маракайбо',
              zh: '马拉开波港',
              ar: 'ميناء ماراكايبو',
            },
            VECCS: {
              en: 'Caracas Simón Bolívar International Airport',
              fr: 'Aéroport international Simón Bolívar de Caracas',
              de: 'Internationaler Flughafen Simón Bolívar Caracas',
              es: 'Aeropuerto Internacional Simón Bolívar de Caracas',
              it: 'Aeroporto Internazionale Simón Bolívar di Caracas',
              nl: 'Internationale Luchthaven Simón Bolívar Caracas',
              pt: 'Aeroporto Internacional Simón Bolívar de Caracas',
              tr: 'Caracas Simón Bolívar Uluslararası Havaalanı',
              ru: 'Международный аэропорт Симон Боливар Каракас',
              zh: '加拉加斯西蒙·玻利瓦尔国际机场',
              ar: 'مطار كاراكاس سيمون بوليفار الدولي',
            },
            VECCS_RAIL: {
              en: 'Caracas Railway Station',
              fr: 'Gare de Caracas',
              de: 'Bahnhof Caracas',
              es: 'Estación de Caracas',
              it: 'Stazione di Caracas',
              nl: 'Station Caracas',
              pt: 'Estação de Caracas',
              tr: 'Caracas Tren İstasyonu',
              ru: 'Железнодорожная станция Каракас',
              zh: '加拉加斯火车站',
              ar: 'محطة كاراكاس للسكك الحديدية',
            },
            PECLL: {
              en: 'Port of Callao',
              fr: 'Port de Callao',
              de: 'Hafen Callao',
              es: 'Puerto del Callao',
              it: 'Porto di Callao',
              nl: 'Haven van Callao',
              pt: 'Porto de Callao',
              tr: 'Callao Limanı',
              ru: 'Порт Кальяо',
              zh: '卡亚俄港',
              ar: 'ميناء كالاو',
            },
            PELIM: {
              en: 'Jorge Chávez International Airport',
              fr: 'Aéroport international Jorge Chávez',
              de: 'Internationaler Flughafen Jorge Chávez',
              es: 'Aeropuerto Internacional Jorge Chávez',
              it: 'Aeroporto Internazionale Jorge Chávez',
              nl: 'Internationale Luchthaven Jorge Chávez',
              pt: 'Aeroporto Internacional Jorge Chávez',
              tr: 'Jorge Chávez Uluslararası Havaalanı',
              ru: 'Международный аэропорт Хорхе Чавес',
              zh: '豪尔赫·查韦斯国际机场',
              ar: 'مطار خورخي تشافيز الدولي',
            },
            PLGDY: {
              en: 'Port of Gdynia',
              fr: 'Port de Gdynia',
              de: 'Hafen Gdingen',
              es: 'Puerto de Gdynia',
              it: 'Porto di Gdynia',
              nl: 'Haven van Gdynia',
              pt: 'Porto de Gdynia',
              tr: 'Gdynia Limanı',
              ru: 'Порт Гдыня',
              zh: '格丁尼亚港',
              ar: 'ميناء غدينيا',
            },
            PLSZZ: {
              en: 'Port of Szczecin',
              fr: 'Port de Szczecin',
              de: 'Hafen Stettin',
              es: 'Puerto de Szczecin',
              it: 'Porto di Stettino',
              nl: 'Haven van Szczecin',
              pt: 'Porto de Szczecin',
              tr: 'Szczecin Limanı',
              ru: 'Порт Щецин',
              zh: '什切青港',
              ar: 'ميناء شتشيتشين',
            },
            PLWAW: {
              en: 'Warsaw Chopin Airport',
              fr: 'Aéroport Chopin de Varsovie',
              de: 'Flughafen Warschau-Chopin',
              es: 'Aeropuerto Chopin de Varsovia',
              it: 'Aeroporto Chopin di Varsavia',
              nl: 'Luchthaven Warschau Chopin',
              pt: 'Aeroporto Chopin de Varsóvia',
              tr: 'Varşova Chopin Havaalanı',
              ru: 'Аэропорт Варшава-Шопен',
              zh: '华沙肖邦机场',
              ar: 'مطار وارسو شوبان',
            },
            PLKRK: {
              en: 'Kraków John Paul II International Airport',
              fr: 'Aéroport international Jean-Paul II de Cracovie',
              de: 'Internationaler Flughafen Johannes Paul II. Krakau',
              es: 'Aeropuerto Internacional Juan Pablo II de Cracovia',
              it: 'Aeroporto Internazionale Giovanni Paolo II di Cracovia',
              nl: 'Internationale Luchthaven Johannes Paulus II Krakau',
              pt: 'Aeroporto Internacional João Paulo II de Cracóvia',
              tr: 'Krakow II. John Paul Uluslararası Havaalanı',
              ru: 'Международный аэропорт Краков-Балице',
              zh: '克拉科夫约翰·保罗二世国际机场',
              ar: 'مطار كراكوف يوحنا بولس الثاني الدولي',
            },
            PLWAR_RAIL: {
              en: 'Warsaw Central Station',
              fr: 'Gare centrale de Varsovie',
              de: 'Warschau Hauptbahnhof',
              es: 'Estación Central de Varsovia',
              it: 'Stazione Centrale di Varsavia',
              nl: 'Centraal Station Warschau',
              pt: 'Estação Central de Varsóvia',
              tr: 'Varşova Merkez İstasyonu',
              ru: 'Центральная станция Варшава',
              zh: '华沙中央车站',
              ar: 'محطة وارسو المركزية',
            },
            PLKRK_RAIL: {
              en: 'Kraków Main Station',
              fr: 'Gare principale de Cracovie',
              de: 'Krakau Hauptbahnhof',
              es: 'Estación Principal de Cracovia',
              it: 'Stazione Principale di Cracovia',
              nl: 'Hoofdstation Krakau',
              pt: 'Estação Principal de Cracóvia',
              tr: 'Krakow Ana İstasyonu',
              ru: 'Главная станция Краков',
              zh: '克拉科夫主火车站',
              ar: 'محطة كراكوف الرئيسية',
            },
            PTLIS: {
              en: 'Port of Lisbon',
              fr: 'Port de Lisbonne',
              de: 'Hafen Lissabon',
              es: 'Puerto de Lisboa',
              it: 'Porto di Lisbona',
              nl: 'Haven van Lissabon',
              pt: 'Porto de Lisboa',
              tr: 'Lizbon Limanı',
              ru: 'Порт Лиссабон',
              zh: '里斯本港',
              ar: 'ميناء لشبونة',
            },
            PTLEI: {
              en: 'Port of Leixões',
              fr: 'Port de Leixões',
              de: 'Hafen Leixões',
              es: 'Puerto de Leixões',
              it: 'Porto di Leixões',
              nl: 'Haven van Leixões',
              pt: 'Porto de Leixões',
              tr: 'Leixões Limanı',
              ru: 'Порт Лейшойнш',
              zh: '莱绍英斯港',
              ar: 'ميناء ليشويس',
            },
            PTLIS_AIR: {
              en: 'Lisbon Portela Airport',
              fr: 'Aéroport de Lisbonne Portela',
              de: 'Flughafen Lissabon-Portela',
              es: 'Aeropuerto de Lisboa Portela',
              it: 'Aeroporto di Lisbona Portela',
              nl: 'Luchthaven Lissabon Portela',
              pt: 'Aeroporto de Lisboa Portela',
              tr: 'Lizbon Portela Havaalanı',
              ru: 'Аэропорт Лиссабон-Портела',
              zh: '里斯本波尔特拉机场',
              ar: 'مطار لشبونة بورتيلا',
            },
            PTOPO: {
              en: 'Porto Francisco Sá Carneiro Airport',
              fr: 'Aéroport Francisco Sá Carneiro de Porto',
              de: 'Flughafen Porto Francisco Sá Carneiro',
              es: 'Aeropuerto Francisco Sá Carneiro de Oporto',
              it: 'Aeroporto Francisco Sá Carneiro di Porto',
              nl: 'Luchthaven Porto Francisco Sá Carneiro',
              pt: 'Aeroporto Francisco Sá Carneiro do Porto',
              tr: 'Porto Francisco Sá Carneiro Havaalanı',
              ru: 'Аэропорт Порту Франсишку Са Карнейру',
              zh: '波尔图弗朗西斯科·萨·卡内罗机场',
              ar: 'مطار بورتو فرانسيسكو سا كارنيرو',
            },
            PTLIS_RAIL: {
              en: 'Lisbon Santa Apolónia Station',
              fr: 'Gare de Lisbonne Santa Apolónia',
              de: 'Bahnhof Lissabon Santa Apolónia',
              es: 'Estación de Lisboa Santa Apolónia',
              it: 'Stazione di Lisbona Santa Apolónia',
              nl: 'Station Lissabon Santa Apolónia',
              pt: 'Estação de Lisboa Santa Apolónia',
              tr: 'Lizbon Santa Apolónia İstasyonu',
              ru: 'Станция Лиссабон Санта-Аполония',
              zh: '里斯本圣阿波洛尼亚车站',
              ar: 'محطة لشبونة سانتا أبولونيا',
            },
            PTOPO_RAIL: {
              en: 'Porto Campanhã Station',
              fr: 'Gare de Porto Campanhã',
              de: 'Bahnhof Porto Campanhã',
              es: 'Estación de Oporto Campanhã',
              it: 'Stazione di Porto Campanhã',
              nl: 'Station Porto Campanhã',
              pt: 'Estação de Porto Campanhã',
              tr: 'Porto Campanhã İstasyonu',
              ru: 'Станция Порту Кампанья',
              zh: '波尔图坎帕尼亚车站',
              ar: 'محطة بورتو كامبانها',
            },
            PHMNL: {
              en: 'Port of Manila',
              fr: 'Port de Manille',
              de: 'Hafen Manila',
              es: 'Puerto de Manila',
              it: 'Porto di Manila',
              nl: 'Haven van Manila',
              pt: 'Porto de Manila',
              tr: 'Manila Limanı',
              ru: 'Порт Манила',
              zh: '马尼拉港',
              ar: 'ميناء مانيلا',
            },
            PHCEB: {
              en: 'Port of Cebu',
              fr: 'Port de Cebu',
              de: 'Hafen Cebu',
              es: 'Puerto de Cebú',
              it: 'Porto di Cebu',
              nl: 'Haven van Cebu',
              pt: 'Porto de Cebu',
              tr: 'Cebu Limanı',
              ru: 'Порт Себу',
              zh: '宿务港',
              ar: 'ميناء سيبو',
            },
            PHBAT: {
              en: 'Port of Batangas',
              fr: 'Port de Batangas',
              de: 'Hafen Batangas',
              es: 'Puerto de Batangas',
              it: 'Porto di Batangas',
              nl: 'Haven van Batangas',
              pt: 'Porto de Batangas',
              tr: 'Batangas Limanı',
              ru: 'Порт Батангас',
              zh: '八打雁港',
              ar: 'ميناء باتانغاس',
            },
            PHMNL_AIR: {
              en: 'Ninoy Aquino International Airport',
              fr: 'Aéroport international Ninoy Aquino',
              de: 'Internationaler Flughafen Ninoy Aquino',
              es: 'Aeropuerto Internacional Ninoy Aquino',
              it: 'Aeroporto Internazionale Ninoy Aquino',
              nl: 'Internationale Luchthaven Ninoy Aquino',
              pt: 'Aeroporto Internacional Ninoy Aquino',
              tr: 'Ninoy Aquino Uluslararası Havaalanı',
              ru: 'Международный аэропорт Ниной Акино',
              zh: '尼诺·阿基诺国际机场',
              ar: 'مطار نينوي أكينو الدولي',
            },
            PHCEB_AIR: {
              en: 'Mactan-Cebu International Airport',
              fr: 'Aéroport international Mactan-Cebu',
              de: 'Internationaler Flughafen Mactan-Cebu',
              es: 'Aeropuerto Internacional Mactan-Cebú',
              it: 'Aeroporto Internazionale Mactan-Cebu',
              nl: 'Internationale Luchthaven Mactan-Cebu',
              pt: 'Aeroporto Internacional Mactan-Cebu',
              tr: 'Mactan-Cebu Uluslararası Havaalanı',
              ru: 'Международный аэропорт Мактан-Себу',
              zh: '马克坦-宿务国际机场',
              ar: 'مطار ماكتان-سيبو الدولي',
            },
            PHCRK: {
              en: 'Clark International Airport',
              fr: 'Aéroport international de Clark',
              de: 'Internationaler Flughafen Clark',
              es: 'Aeropuerto Internacional de Clark',
              it: 'Aeroporto Internazionale di Clark',
              nl: 'Internationale Luchthaven Clark',
              pt: 'Aeroporto Internacional de Clark',
              tr: 'Clark Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кларк',
              zh: '克拉克国际机场',
              ar: 'مطار كلارك الدولي',
            },
            PKKAR: {
              en: 'Port of Karachi',
              fr: 'Port de Karachi',
              de: 'Hafen Karatschi',
              es: 'Puerto de Karachi',
              it: 'Porto di Karachi',
              nl: 'Haven van Karachi',
              pt: 'Porto de Karachi',
              tr: 'Karaçi Limanı',
              ru: 'Порт Карачи',
              zh: '卡拉奇港',
              ar: 'ميناء كراتشي',
            },
            PKQAS: {
              en: 'Port Qasim',
              fr: 'Port Qasim',
              de: 'Hafen Qasim',
              es: 'Puerto Qasim',
              it: 'Porto Qasim',
              nl: 'Haven Qasim',
              pt: 'Porto Qasim',
              tr: 'Qasim Limanı',
              ru: 'Порт Касим',
              zh: '卡西姆港',
              ar: 'ميناء قاسم',
            },
            PKGWA: {
              en: 'Port of Gwadar',
              fr: 'Port de Gwadar',
              de: 'Hafen Gwadar',
              es: 'Puerto de Gwadar',
              it: 'Porto di Gwadar',
              nl: 'Haven van Gwadar',
              pt: 'Porto de Gwadar',
              tr: 'Gwadar Limanı',
              ru: 'Порт Гвадар',
              zh: '瓜达尔港',
              ar: 'ميناء جوادر',
            },
            PKKAR_AIR: {
              en: 'Jinnah International Airport',
              fr: 'Aéroport international Jinnah',
              de: 'Internationaler Flughafen Jinnah',
              es: 'Aeropuerto Internacional Jinnah',
              it: 'Aeroporto Internazionale Jinnah',
              nl: 'Internationale Luchthaven Jinnah',
              pt: 'Aeroporto Internacional Jinnah',
              tr: 'Jinnah Uluslararası Havaalanı',
              ru: 'Международный аэропорт Джинна',
              zh: '真纳国际机场',
              ar: 'مطار جناح الدولي',
            },
            PKLHE: {
              en: 'Allama Iqbal International Airport',
              fr: 'Aéroport international Allama Iqbal',
              de: 'Internationaler Flughafen Allama Iqbal',
              es: 'Aeropuerto Internacional Allama Iqbal',
              it: 'Aeroporto Internazionale Allama Iqbal',
              nl: 'Internationale Luchthaven Allama Iqbal',
              pt: 'Aeroporto Internacional Allama Iqbal',
              tr: 'Allama Iqbal Uluslararası Havaalanı',
              ru: 'Международный аэропорт Аллама Икбал',
              zh: '阿拉马·伊克巴尔国际机场',
              ar: 'مطار علامة إقبال الدولي',
            },
            PKISB: {
              en: 'Islamabad International Airport',
              fr: "Aéroport international d'Islamabad",
              de: 'Internationaler Flughafen Islamabad',
              es: 'Aeropuerto Internacional de Islamabad',
              it: 'Aeroporto Internazionale di Islamabad',
              nl: 'Internationale Luchthaven Islamabad',
              pt: 'Aeroporto Internacional de Islamabad',
              tr: 'İslamabad Uluslararası Havaalanı',
              ru: 'Международный аэропорт Исламабад',
              zh: '伊斯兰堡国际机场',
              ar: 'مطار إسلام أباد الدولي',
            },
            PKKAR_RAIL: {
              en: 'Karachi City Railway Station',
              fr: 'Gare de Karachi',
              de: 'Bahnhof Karatschi',
              es: 'Estación de Karachi',
              it: 'Stazione di Karachi',
              nl: 'Station Karachi',
              pt: 'Estação de Karachi',
              tr: 'Karaçi Tren İstasyonu',
              ru: 'Железнодорожная станция Карачи',
              zh: '卡拉奇火车站',
              ar: 'محطة كراتشي للسكك الحديدية',
            },
            PKLHE_RAIL: {
              en: 'Lahore Railway Station',
              fr: 'Gare de Lahore',
              de: 'Bahnhof Lahore',
              es: 'Estación de Lahore',
              it: 'Stazione di Lahore',
              nl: 'Station Lahore',
              pt: 'Estação de Lahore',
              tr: 'Lahore Tren İstasyonu',
              ru: 'Железнодорожная станция Лахор',
              zh: '拉合尔火车站',
              ar: 'محطة لاهور للسكك الحديدية',
            },
            PYASU: {
              en: 'Port of Asunción',
              fr: "Port d'Asunción",
              de: 'Hafen Asunción',
              es: 'Puerto de Asunción',
              it: 'Porto di Asunción',
              nl: 'Haven van Asunción',
              pt: 'Porto de Assunção',
              tr: 'Asunción Limanı',
              ru: 'Порт Асунсьон',
              zh: '亚松森港',
              ar: 'ميناء أسونسيون',
            },
            PYASU_AIR: {
              en: 'Silvio Pettirossi International Airport',
              fr: 'Aéroport international Silvio Pettirossi',
              de: 'Internationaler Flughafen Silvio Pettirossi',
              es: 'Aeropuerto Internacional Silvio Pettirossi',
              it: 'Aeroporto Internazionale Silvio Pettirossi',
              nl: 'Internationale Luchthaven Silvio Pettirossi',
              pt: 'Aeroporto Internacional Silvio Pettirossi',
              tr: 'Silvio Pettirossi Uluslararası Havaalanı',
              ru: 'Международный аэропорт Сильвио Петтиросси',
              zh: '西尔维奥·佩蒂罗西国际机场',
              ar: 'مطار سيلفيو بيتيروسي الدولي',
            },
            PYASU_RAIL: {
              en: 'Asunción Railway Station',
              fr: "Gare d'Asunción",
              de: 'Bahnhof Asunción',
              es: 'Estación de Asunción',
              it: 'Stazione di Asunción',
              nl: 'Station Asunción',
              pt: 'Estação de Assunção',
              tr: 'Asunción Tren İstasyonu',
              ru: 'Железнодорожная станция Асунсьон',
              zh: '亚松森火车站',
              ar: 'محطة أسونسيون للسكك الحديدية',
            },
            PABAL: {
              en: 'Port of Balboa',
              fr: 'Port de Balboa',
              de: 'Hafen Balboa',
              es: 'Puerto de Balboa',
              it: 'Porto di Balboa',
              nl: 'Haven van Balboa',
              pt: 'Porto de Balboa',
              tr: 'Balboa Limanı',
              ru: 'Порт Бальбоа',
              zh: '巴尔博亚港',
              ar: 'ميناء بالبوا',
            },
            PACOL: {
              en: 'Port of Colón',
              fr: 'Port de Colón',
              de: 'Hafen Colón',
              es: 'Puerto de Colón',
              it: 'Porto di Colón',
              nl: 'Haven van Colón',
              pt: 'Porto de Colón',
              tr: 'Colón Limanı',
              ru: 'Порт Колон',
              zh: '科隆港',
              ar: 'ميناء كولون',
            },
            PACRZ: {
              en: 'Port of Cristóbal',
              fr: 'Port de Cristóbal',
              de: 'Hafen Cristóbal',
              es: 'Puerto de Cristóbal',
              it: 'Porto di Cristóbal',
              nl: 'Haven van Cristóbal',
              pt: 'Porto de Cristóbal',
              tr: 'Cristóbal Limanı',
              ru: 'Порт Кристобаль',
              zh: '克里斯托瓦尔港',
              ar: 'ميناء كريستوبال',
            },
            PAPTY: {
              en: 'Tocumen International Airport',
              fr: 'Aéroport international de Tocumen',
              de: 'Internationaler Flughafen Tocumen',
              es: 'Aeropuerto Internacional de Tocumen',
              it: 'Aeroporto Internazionale di Tocumen',
              nl: 'Internationale Luchthaven Tocumen',
              pt: 'Aeroporto Internacional de Tocumen',
              tr: 'Tocumen Uluslararası Havaalanı',
              ru: 'Международный аэропорт Токумен',
              zh: '托库门国际机场',
              ar: 'مطار توكومين الدولي',
            },
            DEWVN: {
              en: 'Port of Wilhelmshaven',
              fr: 'Port de Wilhelmshaven',
              de: 'Hafen Wilhelmshaven',
              es: 'Puerto de Wilhelmshaven',
              it: 'Porto di Wilhelmshaven',
              nl: 'Haven van Wilhelmshaven',
              pt: 'Porto de Wilhelmshaven',
              tr: 'Wilhelmshaven Limanı',
              ru: 'Порт Вильгельмсхафен',
              zh: '威廉港',
              ar: 'ميناء فيلهلمسهافن',
            },
            DELUB: {
              en: 'Port of Lübeck',
              fr: 'Port de Lübeck',
              de: 'Hafen Lübeck',
              es: 'Puerto de Lübeck',
              it: 'Porto di Lubecca',
              nl: 'Haven van Lübeck',
              pt: 'Porto de Lübeck',
              tr: 'Lübeck Limanı',
              ru: 'Порт Любек',
              zh: '吕贝克港',
              ar: 'ميناء لوبيك',
            },
            DEROS: {
              en: 'Port of Rostock',
              fr: 'Port de Rostock',
              de: 'Hafen Rostock',
              es: 'Puerto de Rostock',
              it: 'Porto di Rostock',
              nl: 'Haven van Rostock',
              pt: 'Porto de Rostock',
              tr: 'Rostock Limanı',
              ru: 'Порт Росток',
              zh: '罗斯托克港',
              ar: 'ميناء روستوك',
            },
            DEBER: {
              en: 'Berlin Brandenburg Airport',
              fr: 'Aéroport de Berlin-Brandebourg',
              de: 'Flughafen Berlin Brandenburg',
              es: 'Aeropuerto de Berlín-Brandeburgo',
              it: 'Aeroporto di Berlino-Brandeburgo',
              nl: 'Luchthaven Berlijn Brandenburg',
              pt: 'Aeroporto de Berlim-Brandemburgo',
              tr: 'Berlin Brandenburg Havaalanı',
              ru: 'Аэропорт Берлин-Бранденбург',
              zh: '柏林勃兰登堡机场',
              ar: 'مطار برلين براندنبورغ',
            },
            DEDUS: {
              en: 'Düsseldorf Airport',
              fr: 'Aéroport de Düsseldorf',
              de: 'Flughafen Düsseldorf',
              es: 'Aeropuerto de Düsseldorf',
              it: 'Aeroporto di Düsseldorf',
              nl: 'Luchthaven Düsseldorf',
              pt: 'Aeroporto de Düsseldorf',
              tr: 'Düsseldorf Havaalanı',
              ru: 'Аэропорт Дюссельдорф',
              zh: '杜塞尔多夫机场',
              ar: 'مطار دوسلدورف',
            },
            DEHAM_AIR: {
              en: 'Hamburg Airport',
              fr: 'Aéroport de Hambourg',
              de: 'Flughafen Hamburg',
              es: 'Aeropuerto de Hamburgo',
              it: 'Aeroporto di Amburgo',
              nl: 'Luchthaven Hamburg',
              pt: 'Aeroporto de Hamburgo',
              tr: 'Hamburg Havaalanı',
              ru: 'Аэропорт Гамбург',
              zh: '汉堡机场',
              ar: 'مطار هامبورغ',
            },
            DECGN: {
              en: 'Cologne Bonn Airport',
              fr: 'Aéroport de Cologne/Bonn',
              de: 'Flughafen Köln/Bonn',
              es: 'Aeropuerto de Colonia/Bonn',
              it: 'Aeroporto di Colonia/Bonn',
              nl: 'Luchthaven Keulen/Bonn',
              pt: 'Aeroporto de Colônia/Bonn',
              tr: 'Köln/Bonn Havaalanı',
              ru: 'Аэропорт Кёльн/Бонн',
              zh: '科隆/波恩机场',
              ar: 'مطار كولونيا/بون',
            },
            DESTR: {
              en: 'Stuttgart Airport',
              fr: 'Aéroport de Stuttgart',
              de: 'Flughafen Stuttgart',
              es: 'Aeropuerto de Stuttgart',
              it: 'Aeroporto di Stoccarda',
              nl: 'Luchthaven Stuttgart',
              pt: 'Aeroporto de Stuttgart',
              tr: 'Stuttgart Havaalanı',
              ru: 'Аэропорт Штутгарт',
              zh: '斯图加特机场',
              ar: 'مطار شتوتغارت',
            },
            DENUR: {
              en: 'Nuremberg Airport',
              fr: 'Aéroport de Nuremberg',
              de: 'Flughafen Nürnberg',
              es: 'Aeropuerto de Núremberg',
              it: 'Aeroporto di Norimberga',
              nl: 'Luchthaven Neurenberg',
              pt: 'Aeroporto de Nuremberga',
              tr: 'Nürnberg Havaalanı',
              ru: 'Аэропорт Нюрнберг',
              zh: '纽伦堡机场',
              ar: 'مطار نورمبرغ',
            },
            DEBER_RAIL: {
              en: 'Berlin Central Station',
              fr: 'Gare centrale de Berlin',
              de: 'Berlin Hauptbahnhof',
              es: 'Estación Central de Berlín',
              it: 'Stazione Centrale di Berlino',
              nl: 'Centraal Station Berlijn',
              pt: 'Estação Central de Berlim',
              tr: 'Berlin Merkez İstasyonu',
              ru: 'Центральная станция Берлин',
              zh: '柏林中央车站',
              ar: 'محطة برلين المركزية',
            },
            DEFRA_RAIL: {
              en: 'Frankfurt Central Station',
              fr: 'Gare centrale de Francfort',
              de: 'Frankfurt Hauptbahnhof',
              es: 'Estación Central de Fráncfort',
              it: 'Stazione Centrale di Francoforte',
              nl: 'Centraal Station Frankfurt',
              pt: 'Estação Central de Frankfurt',
              tr: 'Frankfurt Merkez İstasyonu',
              ru: 'Центральная станция Франкфурт',
              zh: '法兰克福中央车站',
              ar: 'محطة فرانكفورت المركزية',
            },
            DEHAM_RAIL: {
              en: 'Hamburg Central Station',
              fr: 'Gare centrale de Hambourg',
              de: 'Hamburg Hauptbahnhof',
              es: 'Estación Central de Hamburgo',
              it: 'Stazione Centrale di Amburgo',
              nl: 'Centraal Station Hamburg',
              pt: 'Estação Central de Hamburgo',
              tr: 'Hamburg Merkez İstasyonu',
              ru: 'Центральная станция Гамбург',
              zh: '汉堡中央车站',
              ar: 'محطة هامبورغ المركزية',
            },
            DEMUC_RAIL: {
              en: 'Munich Central Station',
              fr: 'Gare centrale de Munich',
              de: 'München Hauptbahnhof',
              es: 'Estación Central de Múnich',
              it: 'Stazione Centrale di Monaco',
              nl: 'Centraal Station München',
              pt: 'Estação Central de Munique',
              tr: 'Münih Merkez İstasyonu',
              ru: 'Центральная станция Мюнхен',
              zh: '慕尼黑中央车站',
              ar: 'محطة ميونيخ المركزية',
            },
            DECGN_RAIL: {
              en: 'Cologne Central Station',
              fr: 'Gare centrale de Cologne',
              de: 'Köln Hauptbahnhof',
              es: 'Estación Central de Colonia',
              it: 'Stazione Centrale di Colonia',
              nl: 'Centraal Station Keulen',
              pt: 'Estação Central de Colônia',
              tr: 'Köln Merkez İstasyonu',
              ru: 'Центральная станция Кёльн',
              zh: '科隆中央车站',
              ar: 'محطة كولونيا المركزية',
            },
            DKAAR: {
              en: 'Port of Aarhus',
              fr: "Port d'Aarhus",
              de: 'Hafen Aarhus',
              es: 'Puerto de Aarhus',
              it: 'Porto di Aarhus',
              nl: 'Haven van Aarhus',
              pt: 'Porto de Aarhus',
              tr: 'Aarhus Limanı',
              ru: 'Порт Орхус',
              zh: '奥胡斯港',
              ar: 'ميناء آرهوس',
            },
            DKCPH: {
              en: 'Port of Copenhagen',
              fr: 'Port de Copenhague',
              de: 'Hafen Kopenhagen',
              es: 'Puerto de Copenhague',
              it: 'Porto di Copenaghen',
              nl: 'Haven van Kopenhagen',
              pt: 'Porto de Copenhague',
              tr: 'Kopenhag Limanı',
              ru: 'Порт Копенгаген',
              zh: '哥本哈根港',
              ar: 'ميناء كوبنهاغن',
            },
            DKCPH_AIR: {
              en: 'Copenhagen Airport',
              fr: 'Aéroport de Copenhague',
              de: 'Flughafen Kopenhagen',
              es: 'Aeropuerto de Copenhague',
              it: 'Aeroporto di Copenaghen',
              nl: 'Luchthaven Kopenhagen',
              pt: 'Aeroporto de Copenhague',
              tr: 'Kopenhag Havaalanı',
              ru: 'Аэропорт Копенгаген',
              zh: '哥本哈根机场',
              ar: 'مطار كوبنهاغن',
            },
            DKCPH_RAIL: {
              en: 'Copenhagen Central Station',
              fr: 'Gare centrale de Copenhague',
              de: 'Kopenhagen Hauptbahnhof',
              es: 'Estación Central de Copenhague',
              it: 'Stazione Centrale di Copenaghen',
              nl: 'Centraal Station Kopenhagen',
              pt: 'Estação Central de Copenhague',
              tr: 'Kopenhag Merkez İstasyonu',
              ru: 'Центральная станция Копенгаген',
              zh: '哥本哈根中央车站',
              ar: 'محطة كوبنهاغن المركزية',
            },
            DOSDQ: {
              en: 'Port of Santo Domingo',
              fr: 'Port de Saint-Domingue',
              de: 'Hafen Santo Domingo',
              es: 'Puerto de Santo Domingo',
              it: 'Porto di Santo Domingo',
              nl: 'Haven van Santo Domingo',
              pt: 'Porto de Santo Domingo',
              tr: 'Santo Domingo Limanı',
              ru: 'Порт Санто-Доминго',
              zh: '圣多明各港',
              ar: 'ميناء سانتو دومينغو',
            },
            DOHIG: {
              en: 'Port of Haina',
              fr: 'Port de Haina',
              de: 'Hafen Haina',
              es: 'Puerto de Haina',
              it: 'Porto di Haina',
              nl: 'Haven van Haina',
              pt: 'Porto de Haina',
              tr: 'Haina Limanı',
              ru: 'Порт Хайна',
              zh: '海纳港',
              ar: 'ميناء هاينا',
            },
            DOSDQ_AIR: {
              en: 'Santo Domingo Las Américas International Airport',
              fr: 'Aéroport international Las Américas de Saint-Domingue',
              de: 'Internationaler Flughafen Las Américas Santo Domingo',
              es: 'Aeropuerto Internacional Las Américas de Santo Domingo',
              it: 'Aeroporto Internazionale Las Américas di Santo Domingo',
              nl: 'Internationale Luchthaven Las Américas Santo Domingo',
              pt: 'Aeroporto Internacional Las Américas de Santo Domingo',
              tr: 'Santo Domingo Las Américas Uluslararası Havaalanı',
              ru: 'Международный аэропорт Лас-Америкас Санто-Доминго',
              zh: '圣多明各拉斯美洲国际机场',
              ar: 'مطار سانتو دومينغو لاس أمريكاس الدولي',
            },
            DOPOP: {
              en: 'Puerto Plata Gregorio Luperón International Airport',
              fr: 'Aéroport international Gregorio Luperón de Puerto Plata',
              de: 'Internationaler Flughafen Gregorio Luperón Puerto Plata',
              es: 'Aeropuerto Internacional Gregorio Luperón de Puerto Plata',
              it: 'Aeroporto Internazionale Gregorio Luperón di Puerto Plata',
              nl: 'Internationale Luchthaven Gregorio Luperón Puerto Plata',
              pt: 'Aeroporto Internacional Gregorio Luperón de Puerto Plata',
              tr: 'Puerto Plata Gregorio Luperón Uluslararası Havaalanı',
              ru: 'Международный аэропорт Грегорио Луперон Пуэрто-Плата',
              zh: '普拉塔港格雷戈里奥·卢佩龙国际机场',
              ar: 'مطار بويرتو بلاتا غريغوريو لوبيرون الدولي',
            },
            ZADUR: {
              en: 'Port of Durban',
              fr: 'Port de Durban',
              de: 'Hafen Durban',
              es: 'Puerto de Durban',
              it: 'Porto di Durban',
              nl: 'Haven van Durban',
              pt: 'Porto de Durban',
              tr: 'Durban Limanı',
              ru: 'Порт Дурбан',
              zh: '德班港',
              ar: 'ميناء ديربان',
            },
            ZACPT: {
              en: 'Port of Cape Town',
              fr: 'Port du Cap',
              de: 'Hafen Kapstadt',
              es: 'Puerto de Ciudad del Cabo',
              it: 'Porto di Città del Capo',
              nl: 'Haven van Kaapstad',
              pt: 'Porto da Cidade do Cabo',
              tr: 'Cape Town Limanı',
              ru: 'Порт Кейптаун',
              zh: '开普敦港',
              ar: 'ميناء كيب تاون',
            },
            ZAJNB: {
              en: 'OR Tambo International Airport',
              fr: 'Aéroport international OR Tambo',
              de: 'Internationaler Flughafen OR Tambo',
              es: 'Aeropuerto Internacional OR Tambo',
              it: 'Aeroporto Internazionale OR Tambo',
              nl: 'Internationale Luchthaven OR Tambo',
              pt: 'Aeroporto Internacional OR Tambo',
              tr: 'OR Tambo Uluslararası Havaalanı',
              ru: 'Международный аэропорт О. Р. Тамбо',
              zh: 'OR坦博国际机场',
              ar: 'مطار أو آر تامبو الدولي',
            },
            ZACPT_AIR: {
              en: 'Cape Town International Airport',
              fr: 'Aéroport international du Cap',
              de: 'Internationaler Flughafen Kapstadt',
              es: 'Aeropuerto Internacional de Ciudad del Cabo',
              it: 'Aeroporto Internazionale di Città del Capo',
              nl: 'Internationale Luchthaven Kaapstad',
              pt: 'Aeroporto Internacional da Cidade do Cabo',
              tr: 'Cape Town Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кейптаун',
              zh: '开普敦国际机场',
              ar: 'مطار كيب تاون الدولي',
            },
            ZWHRE: {
              en: 'Port of Harare',
              fr: 'Port de Harare',
              de: 'Hafen Harare',
              es: 'Puerto de Harare',
              it: 'Porto di Harare',
              nl: 'Haven van Harare',
              pt: 'Porto de Harare',
              tr: 'Harare Limanı',
              ru: 'Порт Хараре',
              zh: '哈拉雷港',
              ar: 'ميناء هراري',
            },
            ZWBYO: {
              en: 'Port of Bulawayo',
              fr: 'Port de Bulawayo',
              de: 'Hafen Bulawayo',
              es: 'Puerto de Bulawayo',
              it: 'Porto di Bulawayo',
              nl: 'Haven van Bulawayo',
              pt: 'Porto de Bulawayo',
              tr: 'Bulawayo Limanı',
              ru: 'Порт Булавайо',
              zh: '布拉瓦约港',
              ar: 'ميناء بولاوايو',
            },
            ZWHRE_AIR: {
              en: 'Harare International Airport',
              fr: 'Aéroport international de Harare',
              de: 'Internationaler Flughafen Harare',
              es: 'Aeropuerto Internacional de Harare',
              it: 'Aeroporto Internazionale di Harare',
              nl: 'Internationale Luchthaven Harare',
              pt: 'Aeroporto Internacional de Harare',
              tr: 'Harare Uluslararası Havaalanı',
              ru: 'Международный аэропорт Хараре',
              zh: '哈拉雷国际机场',
              ar: 'مطار هراري الدولي',
            },
            ZWBYO_AIR: {
              en: 'Bulawayo Airport',
              fr: 'Aéroport de Bulawayo',
              de: 'Flughafen Bulawayo',
              es: 'Aeropuerto de Bulawayo',
              it: 'Aeroporto di Bulawayo',
              nl: 'Luchthaven Bulawayo',
              pt: 'Aeroporto de Bulawayo',
              tr: 'Bulawayo Havaalanı',
              ru: 'Аэропорт Булавайо',
              zh: '布拉瓦约机场',
              ar: 'مطار بولاوايو',
            },
            ZWHRE_RAIL: {
              en: 'Harare Railway Station',
              fr: 'Gare de Harare',
              de: 'Bahnhof Harare',
              es: 'Estación de Harare',
              it: 'Stazione di Harare',
              nl: 'Station Harare',
              pt: 'Estação de Harare',
              tr: 'Harare Tren İstasyonu',
              ru: 'Железнодорожная станция Хараре',
              zh: '哈拉雷火车站',
              ar: 'محطة هراري للسكك الحديدية',
            },
            ZWBYO_RAIL: {
              en: 'Bulawayo Railway Station',
              fr: 'Gare de Bulawayo',
              de: 'Bahnhof Bulawayo',
              es: 'Estación de Bulawayo',
              it: 'Stazione di Bulawayo',
              nl: 'Station Bulawayo',
              pt: 'Estação de Bulawayo',
              tr: 'Bulawayo Tren İstasyonu',
              ru: 'Железнодорожная станция Булавайо',
              zh: '布拉瓦约火车站',
              ar: 'محطة بولاوايو للسكك الحديدية',
            },
            ZMLUN: {
              en: 'Port of Lusaka',
              fr: 'Port de Lusaka',
              de: 'Hafen Lusaka',
              es: 'Puerto de Lusaka',
              it: 'Porto di Lusaka',
              nl: 'Haven van Lusaka',
              pt: 'Porto de Lusaka',
              tr: 'Lusaka Limanı',
              ru: 'Порт Лусака',
              zh: '卢萨卡港',
              ar: 'ميناء لوساكا',
            },
            ZMKAP: {
              en: 'Port of Kapiri Mposhi',
              fr: 'Port de Kapiri Mposhi',
              de: 'Hafen Kapiri Mposhi',
              es: 'Puerto de Kapiri Mposhi',
              it: 'Porto di Kapiri Mposhi',
              nl: 'Haven van Kapiri Mposhi',
              pt: 'Porto de Kapiri Mposhi',
              tr: 'Kapiri Mposhi Limanı',
              ru: 'Порт Капири-Мпоши',
              zh: '卡皮里姆波希港',
              ar: 'ميناء كابيري مبوشي',
            },
            ZMLUN_AIR: {
              en: 'Kenneth Kaunda International Airport',
              fr: 'Aéroport international Kenneth Kaunda',
              de: 'Internationaler Flughafen Kenneth Kaunda',
              es: 'Aeropuerto Internacional Kenneth Kaunda',
              it: 'Aeroporto Internazionale Kenneth Kaunda',
              nl: 'Internationale Luchthaven Kenneth Kaunda',
              pt: 'Aeroporto Internacional Kenneth Kaunda',
              tr: 'Kenneth Kaunda Uluslararası Havaalanı',
              ru: 'Международный аэропорт Кеннет Каунда',
              zh: '肯尼思·卡翁达国际机场',
              ar: 'مطار كينيث كاوندا الدولي',
            },
            ZMNDO: {
              en: 'Ndola Airport',
              fr: 'Aéroport de Ndola',
              de: 'Flughafen Ndola',
              es: 'Aeropuerto de Ndola',
              it: 'Aeroporto di Ndola',
              nl: 'Luchthaven Ndola',
              pt: 'Aeroporto de Ndola',
              tr: 'Ndola Havaalanı',
              ru: 'Аэропорт Ндола',
              zh: '恩多拉机场',
              ar: 'مطار ندولا',
            },
            ZMLUN_RAIL: {
              en: 'Lusaka Railway Station',
              fr: 'Gare de Lusaka',
              de: 'Bahnhof Lusaka',
              es: 'Estación de Lusaka',
              it: 'Stazione di Lusaka',
              nl: 'Station Lusaka',
              pt: 'Estação de Lusaka',
              tr: 'Lusaka Tren İstasyonu',
              ru: 'Железнодорожная станция Лусака',
              zh: '卢萨卡火车站',
              ar: 'محطة لوساكا للسكك الحديدية',
            },
            ZMKAP_RAIL: {
              en: 'Kapiri Mposhi Railway Station',
              fr: 'Gare de Kapiri Mposhi',
              de: 'Bahnhof Kapiri Mposhi',
              es: 'Estación de Kapiri Mposhi',
              it: 'Stazione di Kapiri Mposhi',
              nl: 'Station Kapiri Mposhi',
              pt: 'Estação de Kapiri Mposhi',
              tr: 'Kapiri Mposhi Tren İstasyonu',
              ru: 'Железнодорожная станция Капири-Мпоши',
              zh: '卡皮里姆波希火车站',
              ar: 'محطة كابيري مبوشي للسكك الحديدية',
            },
            USLAX_AIR: {
              en: 'Los Angeles International Airport (LAX)',
              fr: 'Aéroport international de Los Angeles (LAX)',
              de: 'Internationaler Flughafen Los Angeles (LAX)',
              es: 'Aeropuerto Internacional de Los Ángeles (LAX)',
              it: 'Aeroporto Internazionale di Los Angeles (LAX)',
              nl: 'Internationale Luchthaven Los Angeles (LAX)',
              pt: 'Aeroporto Internacional de Los Angeles (LAX)',
              tr: 'Los Angeles Uluslararası Havaalanı (LAX)',
              ru: 'Международный аэропорт Лос-Анджелес (LAX)',
              zh: '洛杉矶国际机场 (LAX)',
              ar: 'مطار لوس أنجلوس الدولي (LAX)',
            },
            USJFK: {
              en: 'John F. Kennedy International Airport (JFK)',
              fr: 'Aéroport international John F. Kennedy (JFK)',
              de: 'John F. Kennedy International Airport (JFK)',
              es: 'Aeropuerto Internacional John F. Kennedy (JFK)',
              it: 'Aeroporto Internazionale John F. Kennedy (JFK)',
              nl: 'John F. Kennedy International Airport (JFK)',
              pt: 'Aeroporto Internacional John F. Kennedy (JFK)',
              tr: 'John F. Kennedy Uluslararası Havaalanı (JFK)',
              ru: 'Международный аэропорт имени Джона Кеннеди (JFK)',
              zh: '约翰·肯尼迪国际机场 (JFK)',
              ar: 'مطار جون كينيدي الدولي (JFK)',
            },
            USORD: {
              en: "O'Hare International Airport (ORD)",
              fr: "Aéroport international O'Hare (ORD)",
              de: "O'Hare International Airport (ORD)",
              es: "Aeropuerto Internacional O'Hare (ORD)",
              it: "Aeroporto Internazionale O'Hare (ORD)",
              nl: "O'Hare International Airport (ORD)",
              pt: "Aeroporto Internacional O'Hare (ORD)",
              tr: "O'Hare Uluslararası Havaalanı (ORD)",
              ru: "Международный аэропорт О'Хэйр (ORD)",
              zh: '芝加哥奥黑尔国际机场 (ORD)',
              ar: 'مطار أوهير الدولي (ORD)',
            },
            USDFW: {
              en: 'Dallas/Fort Worth International Airport (DFW)',
              fr: 'Aéroport international de Dallas/Fort Worth (DFW)',
              de: 'Dallas/Fort Worth International Airport (DFW)',
              es: 'Aeropuerto Internacional de Dallas/Fort Worth (DFW)',
              it: 'Aeroporto Internazionale di Dallas/Fort Worth (DFW)',
              nl: 'Dallas/Fort Worth International Airport (DFW)',
              pt: 'Aeroporto Internacional de Dallas/Fort Worth (DFW)',
              tr: 'Dallas/Fort Worth Uluslararası Havaalanı (DFW)',
              ru: 'Международный аэропорт Даллас/Форт-Уэрт (DFW)',
              zh: '达拉斯/沃斯堡国际机场 (DFW)',
              ar: 'مطار دالاس/فورت وورث الدولي (DFW)',
            },
            USATL: {
              en: 'Hartsfield-Jackson Atlanta International Airport (ATL)',
              fr: "Aéroport international Hartsfield-Jackson d'Atlanta (ATL)",
              de: 'Hartsfield-Jackson Atlanta International Airport (ATL)',
              es: 'Aeropuerto Internacional Hartsfield-Jackson de Atlanta (ATL)',
              it: 'Aeroporto Internazionale Hartsfield-Jackson di Atlanta (ATL)',
              nl: 'Hartsfield-Jackson Atlanta International Airport (ATL)',
              pt: 'Aeroporto Internacional Hartsfield-Jackson de Atlanta (ATL)',
              tr: 'Hartsfield-Jackson Atlanta Uluslararası Havaalanı (ATL)',
              ru: 'Международный аэропорт Хартсфилд-Джексон Атланта (ATL)',
              zh: '亚特兰大哈茨菲尔德-杰克逊国际机场 (ATL)',
              ar: 'مطار هارتسفيلد جاكسون أتلانتا الدولي (ATL)',
            },
          }[d];
        if (re && re[s]) return re[s];
        const ue = {
            London: {
              en: 'London',
              fr: 'Londres',
              de: 'London',
              es: 'Londres',
              it: 'Londra',
              nl: 'Londen',
              pt: 'Londres',
              tr: 'Londra',
              ru: 'Лондон',
              zh: '伦敦',
              ar: 'لندن',
            },
            Londres: {
              en: 'London',
              fr: 'Londres',
              de: 'London',
              es: 'Londres',
              it: 'Londra',
              nl: 'Londen',
              pt: 'Londres',
              tr: 'Londra',
              ru: 'Лондон',
              zh: '伦敦',
              ar: 'لندن',
            },
            Munich: {
              en: 'Munich',
              fr: 'Munich',
              de: 'München',
              es: 'Múnich',
              it: 'Monaco',
              nl: 'München',
              pt: 'Munique',
              tr: 'Münih',
              ru: 'Мюнхен',
              zh: '慕尼黑',
              ar: 'ميونيخ',
            },
            München: {
              en: 'Munich',
              fr: 'Munich',
              de: 'München',
              es: 'Múnich',
              it: 'Monaco',
              nl: 'München',
              pt: 'Munique',
              tr: 'Münih',
              ru: 'Мюнхен',
              zh: '慕尼黑',
              ar: 'ميونيخ',
            },
            Cologne: {
              en: 'Cologne',
              fr: 'Cologne',
              de: 'Köln',
              es: 'Colonia',
              it: 'Colonia',
              nl: 'Keulen',
              pt: 'Colônia',
              tr: 'Köln',
              ru: 'Кёльн',
              zh: '科隆',
              ar: 'كولونيا',
            },
            Köln: {
              en: 'Cologne',
              fr: 'Cologne',
              de: 'Köln',
              es: 'Colonia',
              it: 'Colonia',
              nl: 'Keulen',
              pt: 'Colônia',
              tr: 'Köln',
              ru: 'Кёльн',
              zh: '科隆',
              ar: 'كولونيا',
            },
            Dover: {
              en: 'Dover',
              fr: 'Douvres',
              de: 'Dover',
              es: 'Dover',
              it: 'Dover',
              nl: 'Dover',
              pt: 'Dover',
              tr: 'Dover',
              ru: 'Дувр',
              zh: '多佛',
              ar: 'دوفر',
            },
            Douvres: {
              en: 'Dover',
              fr: 'Douvres',
              de: 'Dover',
              es: 'Dover',
              it: 'Dover',
              nl: 'Dover',
              pt: 'Dover',
              tr: 'Dover',
              ru: 'Дувр',
              zh: '多佛',
              ar: 'دوفر',
            },
            Edinburgh: {
              en: 'Edinburgh',
              fr: 'Édimbourg',
              de: 'Edinburgh',
              es: 'Edimburgo',
              it: 'Edimburgo',
              nl: 'Edinburgh',
              pt: 'Edimburgo',
              tr: 'Edinburgh',
              ru: 'Эдинбург',
              zh: '爱丁堡',
              ar: 'إدنبرة',
            },
            Édimbourg: {
              en: 'Edinburgh',
              fr: 'Édimbourg',
              de: 'Edinburgh',
              es: 'Edimburgo',
              it: 'Edimburgo',
              nl: 'Edinburgh',
              pt: 'Edimburgo',
              tr: 'Edinburgh',
              ru: 'Эдинбург',
              zh: '爱丁堡',
              ar: 'إدنبرة',
            },
            Genoa: {
              en: 'Genoa',
              fr: 'Gênes',
              de: 'Genua',
              es: 'Génova',
              it: 'Genova',
              nl: 'Genua',
              pt: 'Gênova',
              tr: 'Cenova',
              ru: 'Генуя',
              zh: '热那亚',
              ar: 'جنوة',
            },
            Gênes: {
              en: 'Genoa',
              fr: 'Gênes',
              de: 'Genua',
              es: 'Génova',
              it: 'Genova',
              nl: 'Genua',
              pt: 'Gênova',
              tr: 'Cenova',
              ru: 'Генуя',
              zh: '热那亚',
              ar: 'جنوة',
            },
            Genova: {
              en: 'Genoa',
              fr: 'Gênes',
              de: 'Genua',
              es: 'Génova',
              it: 'Genova',
              nl: 'Genua',
              pt: 'Gênova',
              tr: 'Cenova',
              ru: 'Генуя',
              zh: '热那亚',
              ar: 'جنوة',
            },
            Valletta: {
              en: 'Valletta',
              fr: 'La Valette',
              de: 'Valletta',
              es: 'La Valeta',
              it: 'La Valletta',
              nl: 'Valletta',
              pt: 'Valletta',
              tr: 'Valletta',
              ru: 'Валлетта',
              zh: '瓦莱塔',
              ar: 'فاليتا',
            },
            'La Valette': {
              en: 'Valletta',
              fr: 'La Valette',
              de: 'Valletta',
              es: 'La Valeta',
              it: 'La Valletta',
              nl: 'Valletta',
              pt: 'Valletta',
              tr: 'Valletta',
              ru: 'Валлетта',
              zh: '瓦莱塔',
              ar: 'فاليتا',
            },
            Warsaw: {
              en: 'Warsaw',
              fr: 'Varsovie',
              de: 'Warschau',
              es: 'Varsovia',
              it: 'Varsavia',
              nl: 'Warschau',
              pt: 'Varsóvia',
              tr: 'Varşova',
              ru: 'Варшава',
              zh: '华沙',
              ar: 'وارسو',
            },
            Varsovie: {
              en: 'Warsaw',
              fr: 'Varsovie',
              de: 'Warschau',
              es: 'Varsovia',
              it: 'Varsavia',
              nl: 'Warschau',
              pt: 'Varsóvia',
              tr: 'Varşova',
              ru: 'Варшава',
              zh: '华沙',
              ar: 'وارسو',
            },
            Immingham: {
              en: 'Immingham',
              fr: 'Immingham',
              de: 'Immingham',
              es: 'Immingham',
              it: 'Immingham',
              nl: 'Immingham',
              pt: 'Immingham',
              tr: 'Immingham',
              ru: 'Иммингхэм',
              zh: '伊明厄姆',
              ar: 'إمنجهام',
            },
          },
          Ae = (He) => {
            let ke = He;
            for (const [Te, je] of Object.entries(ue))
              if (je[s]) {
                const sa = new RegExp(`\\b${Te}\\b`, 'giu');
                ke = ke.replace(sa, je[s]);
              }
            return ke;
          },
          U = (He, ke) => {
            const Te = {
              en: {
                'Port of': 'Port of',
                Airport: 'Airport',
                Station: 'Station',
                'Central Station': 'Central Station',
                'Railway Station': 'Railway Station',
                'International Airport': 'International Airport',
              },
              fr: {
                'Port of': 'Port de',
                Airport: 'Aéroport',
                Station: 'Gare',
                'Central Station': 'Gare centrale',
                'Railway Station': 'Gare',
                'International Airport': 'Aéroport international',
                'Railway Connection': 'Connexion ferroviaire',
              },
              de: {
                'Port of': 'Hafen',
                Airport: 'Flughafen',
                Station: 'Bahnhof',
                'Central Station': 'Hauptbahnhof',
                'Railway Station': 'Bahnhof',
                'International Airport': 'Internationaler Flughafen',
                'Railway Connection': 'Bahnanschluss',
              },
              es: {
                'Port of': 'Puerto de',
                Airport: 'Aeropuerto',
                Station: 'Estación',
                'Central Station': 'Estación Central',
                'Railway Station': 'Estación',
                'International Airport': 'Aeropuerto Internacional',
                'Railway Connection': 'Conexión ferroviaria',
              },
              it: {
                'Port of': 'Porto di',
                Airport: 'Aeroporto',
                Station: 'Stazione',
                'Central Station': 'Stazione Centrale',
                'Railway Station': 'Stazione',
                'International Airport': 'Aeroporto Internazionale',
                'Railway Connection': 'Collegamento ferroviario',
              },
              nl: {
                'Port of': 'Haven van',
                Airport: 'Luchthaven',
                Station: 'Station',
                'Central Station': 'Centraal Station',
                'Railway Station': 'Station',
                'International Airport': 'Internationale Luchthaven',
                'Railway Connection': 'Spoorverbinding',
              },
              pt: {
                'Port of': 'Porto de',
                Airport: 'Aeroporto',
                Station: 'Estação',
                'Central Station': 'Estação Central',
                'Railway Station': 'Estação',
                'International Airport': 'Aeroporto Internacional',
                'Railway Connection': 'Conexão ferroviária',
              },
              tr: {
                'Port of': '',
                Airport: 'Havaalanı',
                Station: 'İstasyonu',
                'Central Station': 'Merkez İstasyonu',
                'Railway Station': 'Tren İstasyonu',
                'International Airport': 'Uluslararası Havaalanı',
                'Railway Connection': 'Demiryolu bağlantısı',
              },
              ru: {
                'Port of': 'Порт',
                Airport: 'Аэропорт',
                Station: 'Вокзал',
                'Central Station': 'Центральный вокзал',
                'Railway Station': 'Железнодорожный вокзал',
                'International Airport': 'Международный аэропорт',
                'Railway Connection': 'Железнодорожное соединение',
              },
              zh: {
                'Port of': '',
                Airport: '机场',
                Station: '车站',
                'Central Station': '中央车站',
                'Railway Station': '火车站',
                'International Airport': '国际机场',
                'Railway Connection': '铁路连接',
              },
              ar: {
                'Port of': 'ميناء',
                Airport: 'مطار',
                Station: 'محطة',
                'Central Station': 'المحطة المركزية',
                'Railway Station': 'محطة القطار',
                'International Airport': 'مطار دولي',
                'Railway Connection': 'الاتصال بالسكك الحديدية',
              },
            };
            return (Te[ke] || Te.en)[He] || He;
          };
        let me = $;
        return (
          (me = me
            .replace(/^Port de (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^Aéroport de (.+)$/, `${U('Airport', s)} $1`)
            .replace(/^Aéroport d'(.+)$/, `${U('Airport', s)} $1`)
            .replace(/^Port of (.+)$/, `${U('Port of', s)} $1`)
            .replace(/(.+) Airport$/, `$1 ${U('Airport', s)}`)
            .replace(/(.+) International Airport$/, `$1 ${U('International Airport', s)}`)
            .replace(/(.+) Central Station$/, `$1 ${U('Central Station', s)}`)
            .replace(/(.+) Railway Station$/, `$1 ${U('Railway Station', s)}`)
            .replace(/(.+) Railway Connection$/, `$1 ${U('Railway Connection', s)}`)
            .replace(/^Puerto de (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^Aeropuerto de (.+)$/, `$1 ${U('Airport', s)}`)
            .replace(/^Aeropuerto Internacional de (.+)$/, `$1 ${U('International Airport', s)}`)
            .replace(/^Porto di (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^Aeroporto di (.+)$/, `$1 ${U('Airport', s)}`)
            .replace(/^Aeroporto Internazionale di (.+)$/, `$1 ${U('International Airport', s)}`)
            .replace(/^Haven van (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^Luchthaven (.+)$/, `$1 ${U('Airport', s)}`)
            .replace(/^Internationale Luchthaven (.+)$/, `$1 ${U('International Airport', s)}`)
            .replace(/^Hafen (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^Flughafen (.+)$/, `$1 ${U('Airport', s)}`)
            .replace(/^Internationaler Flughafen (.+)$/, `$1 ${U('International Airport', s)}`)
            .replace(/(.+) Hauptbahnhof$/, `$1 ${U('Central Station', s)}`)
            .replace(/(.+) Bahnhof$/, `$1 ${U('Railway Station', s)}`)
            .replace(/(.+) Limanı$/, `${U('Port of', s)} $1`)
            .replace(/(.+) Havaalanı$/, `$1 ${U('Airport', s)}`)
            .replace(/(.+) İstasyonu$/, `$1 ${U('Railway Station', s)}`)
            .replace(/(.+)港$/, `${U('Port of', s)} $1`)
            .replace(/(.+)机场$/, `$1 ${U('Airport', s)}`)
            .replace(/(.+)车站$/, `$1 ${U('Railway Station', s)}`)
            .replace(/^ميناء (.+)$/, `${U('Port of', s)} $1`)
            .replace(/^مطار (.+)$/, `$1 ${U('Airport', s)}`)
            .replace(/^محطة (.+)$/, `$1 ${U('Railway Station', s)}`)),
          (me = me
            .replace(/Port of Port of Spain/g, 'Port of Spain')
            .replace(/Port of Londres/g, U('Port of', s) + ' London')
            .replace(/Port d'Immingham/g, U('Port of', s) + ' Immingham')
            .replace(/Port de Douvres/g, U('Port of', s) + ' Dover')),
          (me = Ae(me)),
          (me = me.replace(/\s+/g, ' ').trim()),
          me
        );
      }, []),
      ve = r.useCallback((o, s) => {
        const d = {
          en: { sea: 'Sea Port', air: 'Airport', rail: 'Rail Terminal' },
          fr: { sea: 'Port maritime', air: 'Aéroport', rail: 'Terminal ferroviaire' },
          de: { sea: 'Seehafen', air: 'Flughafen', rail: 'Bahnterminal' },
          es: { sea: 'Puerto marítimo', air: 'Aeropuerto', rail: 'Terminal ferroviario' },
          it: { sea: 'Porto marittimo', air: 'Aeroporto', rail: 'Terminal ferroviario' },
          nl: { sea: 'Zeehaven', air: 'Luchthaven', rail: 'Spoorterminal' },
          zh: { sea: '海港', air: '机场', rail: '铁路终端' },
          ar: { sea: 'ميناء بحري', air: 'مطار', rail: 'محطة سكة حديد' },
          pt: { sea: 'Porto marítimo', air: 'Aeroporto', rail: 'Terminal ferroviário' },
          tr: { sea: 'Deniz limanı', air: 'Havaalanı', rail: 'Demiryolu terminali' },
          ru: { sea: 'Морской порт', air: 'Аэропорт', rail: 'Железнодорожный терминал' },
        };
        return (d[s] || d.en)[o] || o;
      }, []),
      Ce = r.useCallback((o, s) => {
        var $;
        const d = (($ = ge[s]) == null ? void 0 : $.searchPortsIn) || 'Search ports in';
        if (s === 'fr') {
          if (['MC', 'AD', 'LI', 'VA', 'SM', 'MT', 'CY', 'SG', 'MU', 'SC', 'MV', 'FJ'].includes(o))
            return d.replace('en', 'à');
          if (['US', 'AE', 'NL', 'PH', 'MV'].includes(o)) return d.replace('en', 'aux');
          if (
            [
              'CA',
              'BR',
              'MX',
              'PE',
              'CL',
              'AR',
              'UY',
              'PY',
              'EC',
              'PA',
              'VE',
              'GT',
              'CR',
              'DO',
              'JM',
              'TT',
              'JP',
              'KR',
              'VN',
              'KH',
              'LA',
              'BD',
              'PK',
              'LK',
              'KZ',
              'KG',
              'UZ',
              'TJ',
              'TM',
              'AF',
              'IQ',
              'YE',
              'OM',
              'QA',
              'KW',
              'BH',
              'JO',
              'LB',
              'IL',
              'MA',
              'TN',
              'EG',
              'SD',
              'ET',
              'KE',
              'UG',
              'TZ',
              'RW',
              'NG',
              'GH',
              'CI',
              'SN',
              'ML',
              'BF',
              'NE',
              'TD',
              'CM',
              'GA',
              'CG',
              'CD',
              'AO',
              'ZM',
              'ZW',
              'MZ',
              'MG',
              'DK',
              'LU',
              'PT',
            ].includes(o)
          )
            return d.replace('en', 'au');
        }
        if (s === 'de') {
          if (['US', 'AE', 'NL', 'PH'].includes(o)) return d.replace('in', 'in den');
          if (['CH', 'TR', 'UA'].includes(o)) return d.replace('in', 'in der');
        }
        if (s === 'es') {
          if (['AR', 'IN'].includes(o)) return d.replace('en', 'en la');
          if (['AE'].includes(o)) return d.replace('en', 'en los');
          if (['PH', 'MV'].includes(o)) return d.replace('en', 'en las');
        }
        if (s === 'it') {
          if (['US', 'AE'].includes(o)) return d.replace('in', 'negli');
          if (['PH', 'MV'].includes(o)) return d.replace('in', 'nelle');
          if (['NL'].includes(o)) return d.replace('in', 'nei');
        }
        if (s === 'nl' && ['US', 'NL', 'PH', 'AE', 'GB', 'TR', 'CH', 'UA'].includes(o))
          return d.replace('in', 'in de');
        if (s === 'pt') {
          if (
            [
              'BR',
              'CA',
              'JP',
              'MX',
              'PE',
              'CL',
              'AR',
              'UY',
              'PY',
              'EC',
              'PA',
              'VE',
              'GT',
              'CR',
              'MA',
              'EG',
              'IR',
              'IQ',
              'PK',
              'BD',
              'KW',
              'QA',
              'OM',
              'JO',
              'LB',
            ].includes(o)
          )
            return d.replace('em', 'no');
          if (
            [
              'FR',
              'DE',
              'ES',
              'IT',
              'RU',
              'CN',
              'IN',
              'AU',
              'ZA',
              'TR',
              'UA',
              'PL',
              'RO',
              'GR',
              'HR',
              'BG',
              'HU',
              'CZ',
              'SK',
              'SI',
              'LT',
              'LV',
              'EE',
            ].includes(o)
          )
            return d.replace('em', 'na');
          if (['US', 'AE'].includes(o)) return d.replace('em', 'nos');
          if (['PH', 'MV'].includes(o)) return d.replace('em', 'nas');
        }
        return s === 'ru' &&
          [
            'CY',
            'MT',
            'IS',
            'IE',
            'GB',
            'PH',
            'JP',
            'TW',
            'NZ',
            'AU',
            'MV',
            'FJ',
            'SC',
            'MU',
            'UA',
          ].includes(o)
          ? d.replace('в', 'на')
          : d;
      }, []),
      Ie = ((o) =>
        o
          .replace(/[\u{1F1E6}-\u{1F1FF}]/gu, '')
          .trim()
          .toLowerCase())(_ || ''),
      he = (() => {
        const o = Wa[u] || [],
          s = xe.filter((Y) =>
            Ie
              ? fe(Y.code, u).toLowerCase().includes(Ie) ||
                Y.name.toLowerCase().includes(Ie) ||
                Y.code.toLowerCase().includes(Ie)
              : !0
          );
        if (Ie)
          return s.sort((Y, re) => {
            const ue = fe(Y.code, u),
              Ae = fe(re.code, u);
            return ue.localeCompare(Ae);
          });
        const d = s
            .filter((Y) => o.includes(Y.code))
            .sort((Y, re) => {
              const ue = fe(Y.code, u),
                Ae = fe(re.code, u);
              return ue.localeCompare(Ae);
            }),
          $ = s
            .filter((Y) => !o.includes(Y.code))
            .sort((Y, re) => {
              const ue = fe(Y.code, u),
                Ae = fe(re.code, u);
              return ue.localeCompare(Ae);
            });
        return [...d, ...$];
      })(),
      Xe = r.useCallback(
        (o) => {
          if (!H && ['ArrowDown', 'ArrowUp', 'Enter'].includes(o.key)) {
            N(!0);
            return;
          }
          if (o.key === 'ArrowDown') {
            if (!he.length) return;
            (o.preventDefault(), t((s) => (s + 1) % he.length));
          } else if (o.key === 'ArrowUp') {
            if (!he.length) return;
            (o.preventDefault(), t((s) => (s - 1 + he.length) % he.length));
          } else
            o.key === 'Enter'
              ? l >= 0 && l < he.length && (o.preventDefault(), G(he[l].code))
              : o.key === 'Escape' && (N(!1), t(-1));
        },
        [H, l, he, G, N, t]
      ),
      ea = r.useCallback(() => {
        (n((o) => ({ ...o, country: '' })), M(''), A((o) => ({ ...o, country: null })));
      }, [n, M, A]),
      aa = r.useCallback(
        (o) => {
          (n((s) => ({ ...s, destLocationType: o })), A((s) => ({ ...s, destLocationType: !0 })));
        },
        [n, A]
      ),
      na = r.useCallback(
        (o) => {
          const { name: s, value: d } = o.target;
          (n(($) => ({ ...$, [s]: d })), A(($) => ({ ...$, [s]: d.trim() ? !0 : null })));
        },
        [n, A]
      ),
      ra = r.useCallback(
        (o) => {
          const d = [
            { code: 'USD', flag: '💵', name: 'US Dollar' },
            { code: 'EUR', flag: '💶', name: 'Euro' },
            { code: 'GBP', flag: '💷', name: 'British Pound' },
            { code: 'CNY', flag: '💴', name: 'Chinese Yuan' },
            { code: 'JPY', flag: '💴', name: 'Japanese Yen' },
          ].find(($) => $.code === o);
          d && (n(($) => ({ ...$, goodsCurrency: o })), E(`${o} ${d.flag}`), L(!1));
        },
        [n, E, L]
      ),
      Re = r.useCallback(() => {
        z((o) => {
          const s = b.customerType === 'company' ? 5 : 4;
          if (o === 6 && oe < s) return (q((d) => d + 1), o);
          if (o === 4) {
            const d = b.loads[c],
              $ = (d == null ? void 0 : d.shippingType) || '';
            if ($ === '' || $ === 'unsure') return Math.min(o + 1, 7);
            if (ee < 2) return (ne((Y) => Y + 1), o);
          }
          return o === 3 && B < 2
            ? (i((d) => d + 1), o)
            : o === 1 && I < 3
              ? (F((d) => d + 1), o)
              : o === 5 && k < 3
                ? (w((d) => d + 1), o)
                : Math.min(o + 1, 7);
        });
      }, [I, B, ee, k, oe, b.customerType, b.loads, c]),
      ta = r.useCallback(() => {
        z((o) =>
          o === 6 && oe > 1
            ? (q((s) => s - 1), o)
            : o === 4 && ee > 1
              ? (ne((s) => s - 1), o)
              : o === 3 && B > 1
                ? (i((s) => s - 1), o)
                : o === 1 && I > 1
                  ? (F((s) => s - 1), o)
                  : o === 5 && k > 1
                    ? (w((s) => s - 1), o)
                    : Math.max(o - 1, 1)
        );
      }, [I, B, ee, k, oe]),
      oa = r.useCallback(
        (o) => {
          const d = (b.country ? De[b.country] || [] : []).find(($) => $.code === o);
          (n(($) => ({ ...$, destPort: o })),
            A(($) => ({ ...$, destPort: !0 })),
            d && h(`${d.flag} ${pe(d, u)}`),
            m(!1),
            Re());
        },
        [n, A, h, m, b.country, u, pe, Re]
      ),
      ia = {
        currentStep: a,
        setCurrentStep: z,
        nextStep: Re,
        prevStep: ta,
        formData: b,
        setFormData: n,
        fieldValid: p,
        setFieldValid: A,
        countrySearch: y,
        setCountrySearch: M,
        isCountryListVisible: H,
        setIsCountryListVisible: N,
        highlightedCountryIndex: l,
        setHighlightedCountryIndex: t,
        userLang: u,
        setUserLang: P,
        phonePrefixSearch: f,
        setPhonePrefixSearch: O,
        debouncedCountrySearch: _,
        setDebouncedCountrySearch: J,
        destPortSearch: x,
        setDestPortSearch: h,
        isDestPortListVisible: T,
        setIsDestPortListVisible: m,
        step1SubStep: I,
        setStep1SubStep: F,
        originPortSearch: C,
        setOriginPortSearch: j,
        isOriginPortListVisible: K,
        setIsOriginPortListVisible: S,
        step3SubStep: B,
        setStep3SubStep: i,
        step5SubStep: k,
        setStep5SubStep: w,
        activeLoadIndex: c,
        setActiveLoadIndex: D,
        shippingType: R,
        setShippingType: V,
        step4SubStep: ee,
        setStep4SubStep: ne,
        step6SubStep: oe,
        setStep6SubStep: q,
        currencySearch: v,
        setCurrencySearch: E,
        isCurrencyListVisible: W,
        setIsCurrencyListVisible: L,
        handleCurrencySelect: ra,
        handleCountrySelect: G,
        handleCountrySearchKeyDown: Xe,
        clearCountrySelection: ea,
        handleDestLocationTypeSelect: aa,
        handleDestPortSelect: oa,
        handleOriginLocationTypeSelect: be,
        handleOriginPortSelect: Se,
        handleInputChange: na,
        getDestinationLocationTypes: Q,
        getFilteredDestinationPorts: Z,
        getFilteredOriginPorts: ce,
        filteredCountries: he,
        sanitizedCountrySearch: Ie,
        I18N_TEXT: ge,
        getText: ae,
        getLocationTypeName: X,
        getLocationTypeDescription: te,
        getTranslatedPortNameLocal: pe,
        getTranslatedPortType: ve,
        getSearchPortsText: Ce,
        getTranslatedCountryName: fe,
      };
    return e.jsx(Qe.Provider, { value: ia, children: g });
  };
export { Qa as Q, Ya as a, $a as c, e as j };
